---
version: 2.1

commands:
  run_with_languages:
    description: "Run the given command in an environment that includes relevant langauges in the PATH"
    parameters:
      command:
        type: string
        description: "What command to execute"
      label:
        type: string
        description: "What to label the run"
        default: <<parameters.command>>
    steps:
      - run:
          name: <<parameters.label>>
          command: |
            export PATH="${HOME}/.pyenv/bin:${PATH}"
            export PATH="${HOME}/.rbenv/bin:${HOME}/.rbenv/shims:${PATH}"
            export PATH="${HOME}/project/node_modules/.bin:${PATH}"
            eval "$(pyenv init --path)"
            eval "$(pyenv virtualenv-init -)"
            eval "$(rbenv init -)"
            export BUNDLE_PATH=vendor/bundle

            <<parameters.command>>
          environment:
            # https://app.circleci.com/pipelines/github/apiology/cookiecutter-pypackage/4/workflows/29074dc8-944c-4600-8aaa-5116575fed90/jobs/4
            "LC_ALL": "C.UTF-8"
            "LANG": "C.UTF-8"
  set_up_environment:
    description: "Install source environment"
    steps:
      - checkout
      - restore_cache:
          keys:
            - gems-v2-{{ checksum "Gemfile.lock" }}
            - gems-v2-
            - gems-
      - restore_cache:
          keys:
            - solargraph-v2-{{ checksum "Gemfile.lock" }}-{{ .Branch }}
            - solargraph-v2-{{ checksum "Gemfile.lock" }}-
            - solargraph-v2-
            - solargraph-
      - restore_cache:
          keys:
            - wheels-v1-3.12.1-{{ checksum "requirements_dev.txt" }}
            - wheels-v1-3.12.1-
            - wheels-v1-
            - wheels-
      - run:
          name: Initialize packages
          command: |
            export BUNDLE_PATH=vendor/bundle
            './fix.sh'
      - run:
          name: Verify Gemfile.lock
          command: |
            if ! git diff --exit-code Gemfile.lock
            then
              >&2 echo "Please resolve changes to Gemfile.lock after bundle install to avoid caching difficulties"
              exit 1
            fi
      - save_cache:
          key: gems-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - "vendor/bundle"
      - save_cache:
          key: wheels-v1-3.12.1-{{ checksum "requirements_dev.txt" }}
          paths:
            - "/home/circleci/.cache/pip/wheels"
            - "/home/circleci/.pyenv/versions/3.12.1/envs/checkoff-3.12.1"
            - "/home/circleci/.pyenv/versions/checkoff-3.12.1"
      - run:
          name: Download new circleci tool
          command: |
            curl -fLSs \
            https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | sudo bash
  quality:
    description: "Quality checks"
    steps:
      - set_up_environment
      - run_with_languages:
          label: Run overcommit
          command: |
            # Coax overcommit into working
            git config --global user.email "test@test.test"
            git config --global user.name "Test Test"
            bundle exec overcommit --sign
            bundle exec overcommit --sign pre-commit

            if [ $(git rev-parse --abbrev-ref HEAD) == "main" ]
            then
              bundle exec overcommit --run
            else
              bundle exec bin/overcommit_branch
            fi
      - run_with_languages:
          label: Run brakeman
          command: |
            bundle exec brakeman --no-pager --force
      - run_with_languages:
          label: Ratchet rubocop quality
          command: |
            bundle exec rubocop --regenerate-todo --no-exclude-limit --auto-gen-only-exclude --no-auto-gen-timestamp
            if [ -f .rubocop_todo.yml ]
            then
              git diff --exit-code .rubocop.yml
              git diff --exit-code .rubocop_todo.yml
            fi
  update_dependencies:
    description: "Update dependencies whose build may have triggered this build"
    parameters:
      gems:
        type: string
        description: "Space-separated list of gems to update"
    steps:
      - run_with_languages:
          label: Update dependencies
          command: |
            set -x
            for package in <<parameters.gems>>
            do
              REMOTE_VERSION=$(gem search "${package}" | \
               grep "${package}" | cut -d\( -f2 | cut -d\) -f1)
              BUNDLED_VERSION=$(bundle info "${package}" | \
                 head -1 | cut -d\( -f2 | cut -d\) -f1)
              if [ ${REMOTE_VERSION:?} == ${BUNDLED_VERSION:?} ]
              then
                continue
              fi

              bundle update --conservative "${package}"

              BUNDLED_VERSION=$(bundle info "${package}" | \
                 head -1 | cut -d\( -f2 | cut -d\) -f1)

              if [ ${REMOTE_VERSION:?} == ${BUNDLED_VERSION:?} ]
              then
                continue
              fi

              echo "Waiting for ${package} v${REMOTE_VERSION} to be"\
                   "available..."
              sleep 20
              bundle update "${package}"

              BUNDLED_VERSION=$(bundle info "${package}" | \
                 head -1 | cut -d\( -f2 | cut -d\) -f1)


              if [ ${REMOTE_VERSION:?} != ${BUNDLED_VERSION:?} ]
              then
                >&2 echo "Manually upgrade to ${package}"\
                         "v${REMOTE_VERSION}"
                exit 1
              fi
            done
            if [ -z "$(git status --porcelain Gemfile.lock)" ]
            then
              echo "No updates needed"
              exit 0
            fi
            # Push any dependency gem updates
            git config user.email 'vince@broz.cc'
            git config user.name 'Vince Broz'
            git status
            # bundle exec so that overcommit is used from Gemfile for
            # git hooks
            #
            # https://app.circleci.com/pipelines/github/apiology/"${package}"-rails/806/workflows/40fdf1ef-fa23-421b-a0f1-641ea0ed1641/jobs/1173
            #
            bundle exec overcommit --sign pre-commit
            bundle exec git commit -m "Bump dependency releases" Gemfile.lock || true
            OVERCOMMIT_DEBUG=1 bundle exec git push --set-upstream origin "${CIRCLE_BRANCH:?}"
            echo "Avoiding double build after git push"
            exit 1
jobs:
  quality:
    working_directory: ~/checkoff
    docker:
      - image: apiology/circleci-ruby:latest
    steps:
      - quality
  build:
    working_directory: ~/checkoff
    docker:
      - image: apiology/circleci-ruby:latest
    steps:
      - set_up_environment
      - when:
          condition:
            equal: [<< pipeline.git.branch >>, "main"]
          steps:
            - update_dependencies:
                gems: checkoff
      # - run_with_languages:
      #     label: Typecheck
      #     command: make citypecheck citypecoverage
      - run_with_languages:
          label: Test
          command: |
            make citest cicoverage
      - save_cache:
          key: solargraph-v2-{{ checksum "Gemfile.lock" }}-{{ .Branch }}
          paths:
            - ".yardoc"
            - "/home/circleci/.cache/solargraph"
    # This seemed to shave 5ish% of the build time off when added
    resource_class: large
  publish_gem:
    working_directory: ~/checkoff
    docker:
      - image: apiology/circleci-ruby:latest
    steps:
      - set_up_environment
      - run: git config user.email 'vince@broz.cc'
      - run: git config user.name 'Vince Broz'
      - run_with_languages:
          label: Make RubyGems release
          command: |
            set -x

            # Coax overcommit into working
            git config --global user.email "test@test.test"
            git config --global user.name "Test Test"
            bundle exec overcommit --sign
            bundle exec overcommit --sign pre-commit
            bundle exec bump --commit-message ' [skip ci]' --tag --tag-prefix=v minor
            bundle install
            # bundle exec needed for overcommit hooks
            #
            # if this step fails, check that
            # https://app.circleci.com/settings/project/github/apiology/checkoff/ssh
            # includes a read-write 'user key':
            bundle exec git push --set-upstream origin "${CIRCLE_BRANCH:?}"
            git status
            bundle exec rake release trigger_next_builds

workflows:
  version: 2
  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 6"
          filters:
            branches:
              only:
                - main
    jobs:
      - build
      - quality
  quality:
    jobs:
      - quality
  build:
    jobs:
      - build
      - publish_gem:
          requires:
            - build
          filters:
            branches:
              only: main
