---
version: 2.1

commands:
  run_with_languages:
    description: "Run the given command in an environment that includes relevant langauges in the PATH"
    parameters:
      command:
        type: string
        description: "What command to execute"
      label:
        type: string
        description: "What to label the run"
        default: <<parameters.command>>
    steps:
      - run:
          name: <<parameters.label>>
          command: |
            export PATH="${HOME}/.pyenv/bin:${PATH}"
            export PATH="${HOME}/.rbenv/bin:${HOME}/.rbenv/shims:${PATH}"
            export PATH="${HOME}/project/node_modules/.bin:${PATH}"
            export PATH="$(pwd)/bin:${PATH}"
            eval "$(pyenv init --path)"
            eval "$(pyenv virtualenv-init -)"
            eval "$(rbenv init -)"

            <<parameters.command>>
          environment:
            # https://app.circleci.com/pipelines/github/apiology/cookiecutter-pypackage/4/workflows/29074dc8-944c-4600-8aaa-5116575fed90/jobs/4
            "LC_ALL": "C.UTF-8"
            "LANG": "C.UTF-8"
  set_up_environment:
    description: "Install source environment"
    steps:
      - checkout
      - run:
          name: Update timestamps to original commit time
          command: |
            git ls-tree -r --name-only HEAD | while read filename; do \
              unixtime=$(git log -1 --format="%at" -- "${filename}")
              touchtime=$(date -d @$unixtime +'%Y%m%d%H%M.%S')
              touch -ht ${touchtime} "${filename}"
            done
      - restore_cache:
          name: Restore rbenv cache
          keys:
            - rbenv-v5-{{ checksum "checkoff.gemspec" }}-{{ checksum "Gemfile" }}-{{ checksum "Gemfile.lock" }}-
            - rbenv-v5-{{ checksum "checkoff.gemspec" }}-{{ checksum "Gemfile" }}-
            - rbenv-v5-{{ checksum "checkoff.gemspec" }}-
            - rbenv-v5-
            - rbenv-
      - restore_cache:
          name: Restore ruby-types cache
          keys:
            - ruby-types-v1-{{ checksum "checkoff.gemspec" }}-{{ checksum "Gemfile" }}-{{ checksum "Gemfile.lock" }}- # yamllint disable-line rule:line-length
            - ruby-types-v1-{{ checksum "checkoff.gemspec" }}-{{ checksum "Gemfile" }}-
            - ruby-types-v1-{{ checksum "checkoff.gemspec" }}-
            - ruby-types-v1-
            - ruby-types-
      - restore_cache:
          name: Restore pyenv cache
          keys:
            - pyenv-v2-{{ checksum "requirements_dev.txt" }}-
            - pyenv-v2-
            - pyenv-
      - run:
          name: Initialize packages
          command: |
            # measuring slows down the script - only enable when you
            # want to debug where this is spending time

            # export FIX_SH_TIMING_LOG=/tmp/fix_sh_timing.log

            PATH="$(pwd)/bin:${PATH}"
            export PATH

            rm rbi/checkoff.rbi
            './fix.sh'
      - store_artifacts:
          path: /tmp/fix_sh_timing.log
      - save_cache:
          name: 'Save pyenv cache'
          key: pyenv-v2-{{ checksum "requirements_dev.txt" }}-{{ checksum ".python-version" }}
          paths:
            - "requirements_dev.txt.installed"
            - "/home/circleci/.cache/pip/wheels"
            - "/home/circleci/.pyenv"
      - save_cache:
          name: 'Save rbenv cache'
          key: rbenv-v5-{{ checksum "checkoff.gemspec" }}-{{ checksum "Gemfile" }}-{{ checksum "Gemfile.lock" }}-{{ checksum ".ruby-version" }}-{{ checksum "Makefile" }}-{{ checksum ".circleci/config.yml" }} # yamllint disable-line rule:line-length
          paths:
            - "Gemfile.lock.installed"
            - 'vendor/.keep'
            - "vendor/bundle"
            - "/home/circleci/.rbenv"
            - ".bundle"
            - "/home/circleci/.cache/rubocop_cache"
            - "/home/circleci/.cache/gem"
            - "/home/circleci/.bundle/cache"
      - run:
          name: Download new circleci tool
          command: |
            curl -fLSs \
            https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | sudo bash
  quality:
    description: "Quality checks"
    steps:
      - set_up_environment
      - run_with_languages:
          label: Run overcommit
          command: |
            # Coax overcommit into working
            git config --global user.email "test@test.test"
            git config --global user.name "Test Test"
            bundle exec overcommit --sign
            bundle exec overcommit --sign pre-commit

            if [ $(git rev-parse --abbrev-ref HEAD) == "main" ]
            then
              bundle exec overcommit --run
            else
              bundle exec bin/overcommit_branch
            fi
      - run_with_languages:
          label: Run brakeman
          command: |
            bundle exec brakeman --no-pager --force
      - run_with_languages:
          label: Run Rubocop
          command: |
            bundle exec rubocop
      - run_with_languages:
          label: Ratchet rubocop quality
          command: |
            make rubocop-ratchet
  update_dependencies:
    description: "Update dependencies whose build may have triggered this build"
    parameters:
      gems:
        type: string
        description: "Space-separated list of gems to update"
    steps:
      - run_with_languages:
          label: Update dependencies
          command: |
            set -x
            for package in <<parameters.gems>>
            do
              REMOTE_VERSION=$(gem search "${package}" | \
               grep "${package}" | cut -d\( -f2 | cut -d\) -f1)
              BUNDLED_VERSION=$(bundle info "${package}" | \
                 head -1 | cut -d\( -f2 | cut -d\) -f1)
              if [ ${REMOTE_VERSION:?} == ${BUNDLED_VERSION:?} ]
              then
                continue
              fi

              bundle update --conservative "${package}"

              BUNDLED_VERSION=$(bundle info "${package}" | \
                 head -1 | cut -d\( -f2 | cut -d\) -f1)

              if [ ${REMOTE_VERSION:?} == ${BUNDLED_VERSION:?} ]
              then
                continue
              fi

              echo "Waiting for ${package} v${REMOTE_VERSION} to be"\
                   "available..."
              sleep 20
              bundle update "${package}"

              BUNDLED_VERSION=$(bundle info "${package}" | \
                 head -1 | cut -d\( -f2 | cut -d\) -f1)


              if [ ${REMOTE_VERSION:?} != ${BUNDLED_VERSION:?} ]
              then
                >&2 echo "Manually upgrade to ${package}"\
                         "v${REMOTE_VERSION}"
                exit 1
              fi
            done
            make build-typecheck
            if [ -z "$(git status --porcelain Gemfile.lock)" ]
            then
              echo "No updates needed"
              exit 0
            fi
            # Push any dependency gem updates
            git config user.email 'vince@broz.cc'
            git config user.name 'Vince Broz'
            git status
            # bundle exec so that overcommit is used from Gemfile for
            # git hooks
            #
            # https://app.circleci.com/pipelines/github/apiology/"${package}"-rails/806/workflows/40fdf1ef-fa23-421b-a0f1-641ea0ed1641/jobs/1173
            #
            bundle exec overcommit --sign pre-commit
            bundle exec git commit -m "Bump dependency releases" Gemfile.lock || true
            OVERCOMMIT_DEBUG=1 bundle exec git push --set-upstream origin "${CIRCLE_BRANCH:?}"
            echo "Avoiding double build after git push"
            exit 1

jobs:
  quality:
    working_directory: ~/checkoff
    docker:
      - image: cimg/base:current
    steps:
      - quality
  build:
    working_directory: ~/checkoff
    docker:
      - image: cimg/base:current
    steps:
      - set_up_environment
      - when:
          condition:
            equal: [<< pipeline.git.branch >>, "main"]
          steps:
            - update_dependencies:
                gems: checkoff
      - run_with_languages:
          label: Verify deltas
          command: |
            if ! git diff --exit-code .
            then
              >&2 echo "Please resolve changes to avoid caching difficulties"
              exit 1
            fi
      - run_with_languages:
          label: Typecheck
          command: |
            make citypecheck citypecoverage
      - store_artifacts:
          path: rbi/checkoff.rbi
      - save_cache:
          name: 'Save ruby-types cache'
          key: ruby-types-v1-{{ checksum "checkoff.gemspec" }}-{{ checksum "Gemfile" }}-{{ checksum "Gemfile.lock" }}-{{ checksum ".ruby-version" }}-{{ checksum "rbi/checkoff.rbi" }}-{{ checksum "Makefile" }}-{{ checksum ".circleci/config.yml" }}  # yamllint disable-line rule:line-length
          paths:
            - ".yardoc"
            - "/home/circleci/.cache/solargraph"
            - "/home/circleci/.sorbet-cache"
            - "/home/circleci/.cache/sorbet"
            - "types.installed"
            - "yardoc.installed"
            - "tapioca.installed"
            - "rbi/checkoff.rbi"
      - run_with_languages:
          label: Test
          command: |
            make citest cicoverage
    # This seemed to shave 5ish% of the build time off when added
    resource_class: large
  publish_gem:
    working_directory: ~/checkoff
    docker:
      - image: cimg/base:current
    steps:
      - set_up_environment
      - run_with_languages:
          label: Make RubyGems release
          command: |
            set -x

            # Coax overcommit into working
            git config --global user.email "test@test.test"
            git config --global user.name "Test Test"
            # bump runs 'bundle' after excluding env vars, but doesn't
            # use --conservative or exclude env vars when running 'git
            # commit', which might need an updated gem.  This results
            # in periodic unexpected failures, fixed by later caching
            # :(
            #
            # Let's just use the system bundle path here
            unset BUNDLE_PATH
            bundle install
            bundle exec bump --commit-message ' [skip ci]' --tag --tag-prefix=v minor
            # bundle exec needed for overcommit hooks
            #
            # if this step fails, check that
            # https://app.circleci.com/settings/project/github/apiology/checkoff/ssh
            # includes a read-write 'user key':
            SKIP=RakeTarget bundle exec git push --set-upstream origin "${CIRCLE_BRANCH:?}"
            git status
            make release
            bundle exec rake trigger_next_builds

workflows:
  version: 2
  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 6"
          filters:
            branches:
              only:
                - main
    jobs:
      - build
      - quality
  quality:
    jobs:
      - quality
  build:
    jobs:
      - build
      - publish_gem:
          requires:
            - build
          filters:
            branches:
              only: main
