# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `asana` gem.
# Please instead update this file by running `bin/tapioca gem asana`.


# Public: Top-level namespace of the Asana API Ruby client.
#
# source://asana//lib/asana/authentication/oauth2/bearer_token_authentication.rb#1
module Asana
  include ::Asana::Resources
end

# Public: Authentication strategies for the Asana API.
#
# source://asana//lib/asana/authentication/oauth2/bearer_token_authentication.rb#2
module Asana::Authentication; end

# Public: Deals with OAuth2 authentication. Contains a function to get an
# access token throught a browserless authentication flow, needed for some
# applications such as CLI applications.
#
# source://asana//lib/asana/authentication/oauth2/bearer_token_authentication.rb#3
module Asana::Authentication::OAuth2
  private

  # Public: Retrieves an access token through an offline authentication
  # flow. If your application can receive HTTP requests, you might want to
  # opt for a browser-based flow and use the omniauth-asana gem instead.
  #
  # Your registered application's redirect_uri should be exactly
  # "urn:ietf:wg:oauth:2.0:oob".
  #
  # client_id     - [String] the client id of the registered Asana API
  #                 application.
  # client_secret - [String] the client secret of the registered Asana API
  #                 application.
  #
  # Returns an ::OAuth2::AccessToken object.
  #
  # Note: This function reads from STDIN and writes to STDOUT. It is meant
  # to be used only within the context of a CLI application.
  #
  # source://asana//lib/asana/authentication/oauth2.rb#29
  def offline_flow(client_id: T.unsafe(nil), client_secret: T.unsafe(nil)); end

  class << self
    # Public: Retrieves an access token through an offline authentication
    # flow. If your application can receive HTTP requests, you might want to
    # opt for a browser-based flow and use the omniauth-asana gem instead.
    #
    # Your registered application's redirect_uri should be exactly
    # "urn:ietf:wg:oauth:2.0:oob".
    #
    # client_id     - [String] the client id of the registered Asana API
    #                 application.
    # client_secret - [String] the client secret of the registered Asana API
    #                 application.
    #
    # Returns an ::OAuth2::AccessToken object.
    #
    # Note: This function reads from STDIN and writes to STDOUT. It is meant
    # to be used only within the context of a CLI application.
    #
    # source://asana//lib/asana/authentication/oauth2.rb#29
    def offline_flow(client_id: T.unsafe(nil), client_secret: T.unsafe(nil)); end
  end
end

# Public: A mechanism to authenticate with an OAuth2 access token (a
# bearer token and a refresh token) or just a refresh token.
#
# source://asana//lib/asana/authentication/oauth2/access_token_authentication.rb#6
class Asana::Authentication::OAuth2::AccessTokenAuthentication
  # Public: Initializes a new AccessTokenAuthentication.
  #
  # access_token - [::OAuth2::AccessToken] An ::OAuth2::AccessToken
  #                object.
  #
  # @return [AccessTokenAuthentication] a new instance of AccessTokenAuthentication
  #
  # source://asana//lib/asana/authentication/oauth2/access_token_authentication.rb#34
  def initialize(access_token); end

  # Public: Configures a Faraday connection injecting a bearer token,
  # auto-refreshing it when needed.
  #
  # connection - [Faraday::Connection] the Faraday connection instance.
  #
  # Returns nothing.
  #
  # source://asana//lib/asana/authentication/oauth2/access_token_authentication.rb#44
  def configure(connection); end

  class << self
    # Public: Builds an AccessTokenAuthentication from a refresh token and
    # client credentials, by refreshing into a new one.
    #
    # refresh_token - [String] a refresh token
    # client_id     - [String] the client id of the registered Asana API
    #                 Application.
    # client_secret - [String] the client secret of the registered Asana API
    #                 Application.
    # redirect_uri  - [String] the redirect uri of the registered Asana API
    #                 Application.
    #
    # Returns an [AccessTokenAuthentication] instance with a refreshed
    # access token.
    #
    # source://asana//lib/asana/authentication/oauth2/access_token_authentication.rb#20
    def from_refresh_token(refresh_token, client_id: T.unsafe(nil), client_secret: T.unsafe(nil), redirect_uri: T.unsafe(nil)); end
  end
end

# Public: A mechanism to authenticate with an OAuth2 bearer token obtained
# somewhere, for instance through omniauth-asana.
#
# Note: This authentication mechanism doesn't support token refreshing. If
# you'd like refreshing and you have a refresh token as well as a bearer
# token, you can generate a proper access token with
# {AccessTokenAuthentication.from_refresh_token}.
#
# source://asana//lib/asana/authentication/oauth2/bearer_token_authentication.rb#11
class Asana::Authentication::OAuth2::BearerTokenAuthentication
  # Public: Initializes a new BearerTokenAuthentication with a plain
  # bearer token.
  #
  # bearer_token - [String] a plain bearer token.
  #
  # @return [BearerTokenAuthentication] a new instance of BearerTokenAuthentication
  #
  # source://asana//lib/asana/authentication/oauth2/bearer_token_authentication.rb#16
  def initialize(bearer_token); end

  # Public: Configures a Faraday connection injecting its token as an
  # OAuth2 bearer token.
  #
  # connection - [Faraday::Connection] the Faraday connection instance.
  #
  # Returns nothing.
  #
  # source://asana//lib/asana/authentication/oauth2/bearer_token_authentication.rb#26
  def configure(connection); end
end

# Public: Deals with the details of obtaining an OAuth2 authorization URL
# and obtaining access tokens from either authorization codes or refresh
# tokens.
#
# source://asana//lib/asana/authentication/oauth2/client.rb#9
class Asana::Authentication::OAuth2::Client
  # Public: Initializes a new client with client credentials associated
  # with a registered Asana API application.
  #
  # client_id     - [String] a client id from the registered application
  # client_secret - [String] a client secret from the registered
  #                 application
  # redirect_uri  - [String] a redirect uri from the registered
  #                 application
  #
  # @return [Client] a new instance of Client
  #
  # source://asana//lib/asana/authentication/oauth2/client.rb#18
  def initialize(client_id: T.unsafe(nil), client_secret: T.unsafe(nil), redirect_uri: T.unsafe(nil)); end

  # Public:
  # Returns the [String] OAuth2 authorize URL.
  #
  # source://asana//lib/asana/authentication/oauth2/client.rb#30
  def authorize_url; end

  # Public: Retrieves a token from an authorization code.
  #
  # Returns the [::OAuth2::AccessToken] token.
  #
  # source://asana//lib/asana/authentication/oauth2/client.rb#37
  def token_from_auth_code(auth_code); end

  # Public: Retrieves a token from a refresh token.
  #
  # Returns the refreshed [::OAuth2::AccessToken] token.
  #
  # source://asana//lib/asana/authentication/oauth2/client.rb#44
  def token_from_refresh_token(token); end
end

# Public: Represents an API token authentication mechanism.
#
# source://asana//lib/asana/authentication/token_authentication.rb#4
class Asana::Authentication::TokenAuthentication
  # @return [TokenAuthentication] a new instance of TokenAuthentication
  #
  # source://asana//lib/asana/authentication/token_authentication.rb#5
  def initialize(token); end

  # Public: Configures a Faraday connection injecting its token as
  # basic auth.
  #
  # builder - [Faraday::Connection] the Faraday connection instance.
  #
  # Returns nothing.
  #
  # source://asana//lib/asana/authentication/token_authentication.rb#15
  def configure(connection); end
end

# Public: A client to interact with the Asana API. It exposes all the
# available resources of the Asana API in idiomatic Ruby.
#
# Examples
#
#   # Authentication with a personal access token
#   Asana::Client.new do |client|
#     client.authentication :access_token, '...'
#   end
#
#   # OAuth2 with a plain bearer token (doesn't support auto-refresh)
#   Asana::Client.new do |client|
#     client.authentication :oauth2, bearer_token: '...'
#   end
#
#   # OAuth2 with a plain refresh token and client credentials
#   Asana::Client.new do |client|
#     client.authentication :oauth2,
#                           refresh_token: '...',
#                           client_id: '...',
#                           client_secret: '...',
#                           redirect_uri: '...'
#   end
#
#   # OAuth2 with an ::OAuth2::AccessToken object
#   Asana::Client.new do |client|
#     client.authentication :oauth2, my_oauth2_access_token_object
#   end
#
#   # Use a custom Faraday network adapter
#   Asana::Client.new do |client|
#     client.authentication ...
#     client.adapter :typhoeus
#   end
#
#   # Use a custom user agent string
#   Asana::Client.new do |client|
#     client.authentication ...
#     client.user_agent '...'
#   end
#
#   # Pass in custom configuration to the Faraday connection
#   Asana::Client.new do |client|
#     client.authentication ...
#     client.configure_faraday { |conn| conn.use MyMiddleware }
#   end
#
# source://asana//lib/asana/client/configuration.rb#2
class Asana::Client
  # Public: Initializes a new client.
  #
  # Yields a {Asana::Client::Configuration} object as a configuration
  # DSL. See {Asana::Client} for usage examples.
  #
  # @return [Client] a new instance of Client
  #
  # source://asana//lib/asana/client.rb#75
  def initialize; end

  # source://asana//lib/asana/client.rb#120
  def attachments; end

  # source://asana//lib/asana/client.rb#120
  def batch_apis; end

  # source://asana//lib/asana/client.rb#120
  def custom_field_settings; end

  # source://asana//lib/asana/client.rb#120
  def custom_fields; end

  # Public: Performs a DELETE request against an arbitrary Asana URL. Allows
  # for the user to interact with the API in ways that haven't been
  # reflected/foreseen in this library.
  #
  # source://asana//lib/asana/client.rb#111
  def delete(url, **args); end

  # source://asana//lib/asana/client.rb#120
  def event_responses; end

  # Public: Performs a GET request against an arbitrary Asana URL. Allows for
  # the user to interact with the API in ways that haven't been
  # reflected/foreseen in this library.
  #
  # source://asana//lib/asana/client.rb#90
  def get(url, **args); end

  # source://asana//lib/asana/client.rb#120
  def jobs; end

  # source://asana//lib/asana/client.rb#120
  def organization_exports; end

  # source://asana//lib/asana/client.rb#120
  def portfolio_memberships; end

  # source://asana//lib/asana/client.rb#120
  def portfolios; end

  # Public: Performs a POST request against an arbitrary Asana URL. Allows for
  # the user to interact with the API in ways that haven't been
  # reflected/foreseen in this library.
  #
  # source://asana//lib/asana/client.rb#97
  def post(url, **args); end

  # source://asana//lib/asana/client.rb#120
  def project_memberships; end

  # source://asana//lib/asana/client.rb#120
  def project_statuses; end

  # source://asana//lib/asana/client.rb#120
  def projects; end

  # Public: Performs a PUT request against an arbitrary Asana URL. Allows for
  # the user to interact with the API in ways that haven't been
  # reflected/foreseen in this library.
  #
  # source://asana//lib/asana/client.rb#104
  def put(url, **args); end

  # source://asana//lib/asana/client.rb#120
  def sections; end

  # source://asana//lib/asana/client.rb#120
  def stories; end

  # source://asana//lib/asana/client.rb#120
  def tags; end

  # source://asana//lib/asana/client.rb#120
  def tasks; end

  # source://asana//lib/asana/client.rb#120
  def team_memberships; end

  # source://asana//lib/asana/client.rb#120
  def teams; end

  # source://asana//lib/asana/client.rb#120
  def typeaheads; end

  # source://asana//lib/asana/client.rb#120
  def user_task_lists; end

  # source://asana//lib/asana/client.rb#120
  def users; end

  # source://asana//lib/asana/client.rb#120
  def webhooks; end

  # source://asana//lib/asana/client.rb#120
  def workspace_memberships; end

  # source://asana//lib/asana/client.rb#120
  def workspaces; end
end

# Internal: Represents a configuration DSL for an Asana::Client.
#
# Examples
#
#   config = Configuration.new
#   config.authentication :access_token, 'personal_access_token'
#   config.adapter :typhoeus
#   config.configure_faraday { |conn| conn.use MyMiddleware }
#   config.to_h
#   # => { authentication: #<Authentication::TokenAuthentication>,
#          faraday_adapter: :typhoeus,
#          faraday_configuration: #<Proc> }
#
# source://asana//lib/asana/client/configuration.rb#16
class Asana::Client::Configuration
  # Public: Initializes an empty configuration object.
  #
  # @return [Configuration] a new instance of Configuration
  #
  # source://asana//lib/asana/client/configuration.rb#18
  def initialize; end

  # Public: Sets an authentication strategy.
  #
  # type  - [:oauth2, :api_token] the kind of authentication strategy to use
  # value - [::OAuth2::AccessToken, String, Hash] the configuration for the
  #         chosen authentication strategy.
  #
  # Returns nothing.
  #
  # Raises ArgumentError if the arguments are invalid.
  #
  # source://asana//lib/asana/client/configuration.rb#33
  def authentication(type, value); end

  # Public: Sets a custom configuration block for the Faraday connection.
  #
  # config - [Proc] the configuration block.
  #
  # Returns nothing.
  #
  # source://asana//lib/asana/client/configuration.rb#56
  def configure_faraday(&config); end

  # Public: Configures the client in debug mode, which will print verbose
  # information on STDERR.
  #
  # Returns nothing.
  #
  # source://asana//lib/asana/client/configuration.rb#64
  def debug_mode; end

  # Public: Configures the client to always send the given headers
  #
  # Returns nothing.
  #
  # source://asana//lib/asana/client/configuration.rb#78
  def default_headers(value); end

  # Public: Sets a custom network adapter for Faraday.
  #
  # adapter - [Symbol, Proc] the adapter.
  #
  # Returns nothing.
  #
  # source://asana//lib/asana/client/configuration.rb#47
  def faraday_adapter(adapter); end

  # Public: Configures the client to log Asana-Change warnings on STDERR.
  #
  # Returns nothing.
  #
  # source://asana//lib/asana/client/configuration.rb#71
  def log_asana_change_warnings(value); end

  # Public:
  # Returns the configuration [Hash].
  #
  # source://asana//lib/asana/client/configuration.rb#84
  def to_h; end

  private

  # @raise [ArgumentError]
  #
  # source://asana//lib/asana/client/configuration.rb#166
  def error(msg); end

  # Internal: Configures an OAuth2 AccessTokenAuthentication strategy.
  #
  # access_token - [::OAuth2::AccessToken] the OAuth2 access token object
  #
  # Returns a [Authentication::OAuth2::AccessTokenAuthentication] strategy.
  #
  # source://asana//lib/asana/client/configuration.rb#124
  def from_access_token(access_token); end

  # Internal: Configures an OAuth2 BearerTokenAuthentication strategy.
  #
  # bearer_token - [String] the plain OAuth2 bearer token
  #
  # Returns a [Authentication::OAuth2::BearerTokenAuthentication] strategy.
  #
  # source://asana//lib/asana/client/configuration.rb#155
  def from_bearer_token(bearer_token); end

  # Internal: Configures an OAuth2 AccessTokenAuthentication strategy.
  #
  # hash - The configuration hash:
  #        :refresh_token - [String] the OAuth2 refresh token
  #        :client_id     - [String] the OAuth2 client id
  #        :client_secret - [String] the OAuth2 client secret
  #        :redirect_uri  - [String] the OAuth2 redirect URI
  #
  # Returns a [Authentication::OAuth2::AccessTokenAuthentication] strategy.
  #
  # source://asana//lib/asana/client/configuration.rb#138
  def from_refresh_token(hash); end

  # Internal: Configures an OAuth2 authentication strategy from either an
  # OAuth2 access token object, or a plain refresh token, or a plain bearer
  # token.
  #
  # value - [::OAuth::AccessToken, String] the value to configure the
  #         strategy from.
  #
  # Returns [Asana::Authentication::OAuth2::AccessTokenAuthentication,
  #          Asana::Authentication::OAuth2::BearerTokenAuthentication]
  #         the OAuth2 authentication strategy.
  #
  # Raises ArgumentError if the OAuth2 configuration arguments are invalid.
  #
  #
  # source://asana//lib/asana/client/configuration.rb#104
  def oauth2(value); end

  # source://asana//lib/asana/client/configuration.rb#160
  def requiring(hash, *keys); end
end

# Internal: Proxies Resource classes to implement a fluent API on the Client
# instances.
#
# source://asana//lib/asana/client.rb#56
class Asana::Client::ResourceProxy
  # @return [ResourceProxy] a new instance of ResourceProxy
  #
  # source://asana//lib/asana/client.rb#57
  def initialize(client: T.unsafe(nil), resource: T.unsafe(nil)); end

  # source://asana//lib/asana/client.rb#62
  def method_missing(m, *args, **kwargs, &block); end

  private

  # @return [Boolean]
  #
  # source://asana//lib/asana/client.rb#66
  def respond_to_missing?(m, *_arg1); end
end

# Public: Defines the different errors that the Asana API may throw, which the
# client code may want to catch.
#
# source://asana//lib/asana/errors.rb#4
module Asana::Errors; end

# Public: A generic, catch-all API error. It contains the whole response
# object for debugging purposes.
#
# Note: This exception should never be raised when there exists a more
# specific subclass.
#
# source://asana//lib/asana/errors.rb#10
class Asana::Errors::APIError < ::StandardError
  # source://asana//lib/asana/errors.rb#11
  def response; end

  # source://asana//lib/asana/errors.rb#11
  def response=(_arg0); end

  # source://asana//lib/asana/errors.rb#13
  def to_s; end
end

# Public: A 403 error. Raised when the user doesn't have permission to
# access the requested resource or to perform the requested action on it.
#
# source://asana//lib/asana/errors.rb#38
class Asana::Errors::Forbidden < ::Asana::Errors::APIError
  # source://asana//lib/asana/errors.rb#39
  def to_s; end
end

# Public: A 400 error. Raised when the request was malformed or missing some
# parameters. It contains a list of errors indicating the specific problems.
#
# source://asana//lib/asana/errors.rb#73
class Asana::Errors::InvalidRequest < ::Asana::Errors::APIError
  # source://asana//lib/asana/errors.rb#76
  def initialize(errors); end

  # source://asana//lib/asana/errors.rb#74
  def errors; end

  # source://asana//lib/asana/errors.rb#74
  def errors=(_arg0); end

  # source://asana//lib/asana/errors.rb#80
  def to_s; end
end

# Public: A 401 error. Raised when the credentials used are invalid and the
# user could not be authenticated.
#
# source://asana//lib/asana/errors.rb#20
class Asana::Errors::NotAuthorized < ::Asana::Errors::APIError
  # source://asana//lib/asana/errors.rb#21
  def to_s; end
end

# Public: A 404 error. Raised when the requested resource doesn't exist.
#
# source://asana//lib/asana/errors.rb#47
class Asana::Errors::NotFound < ::Asana::Errors::APIError
  # source://asana//lib/asana/errors.rb#48
  def to_s; end
end

# Public: A 402 error. Raised when the user is trying to access a feature
# that requires a premium account (Payment Required).
#
# source://asana//lib/asana/errors.rb#29
class Asana::Errors::PremiumOnly < ::Asana::Errors::APIError
  # source://asana//lib/asana/errors.rb#30
  def to_s; end
end

# Public: A 429 error. Raised when the Asana API enforces rate-limiting on
# the client to avoid overload. It contains the number of seconds to wait
# before retrying the operation.
#
# source://asana//lib/asana/errors.rb#88
class Asana::Errors::RateLimitEnforced < ::Asana::Errors::APIError
  # source://asana//lib/asana/errors.rb#91
  def initialize(retry_after_seconds); end

  # source://asana//lib/asana/errors.rb#89
  def retry_after_seconds; end

  # source://asana//lib/asana/errors.rb#89
  def retry_after_seconds=(_arg0); end

  # source://asana//lib/asana/errors.rb#95
  def to_s; end
end

# Public: A 500 error. Raised when there is a problem in the Asana API
# server. It contains a unique phrase that can be used to identify the
# problem when contacting developer support.
#
# source://asana//lib/asana/errors.rb#58
class Asana::Errors::ServerError < ::Asana::Errors::APIError
  # source://asana//lib/asana/errors.rb#61
  def initialize(phrase); end

  # source://asana//lib/asana/errors.rb#59
  def phrase; end

  # source://asana//lib/asana/errors.rb#59
  def phrase=(_arg0); end

  # source://asana//lib/asana/errors.rb#65
  def to_s; end
end

# Internal: Wrapper over Faraday that abstracts authentication, request
# parsing and common options.
#
# source://asana//lib/asana/http_client/error_handling.rb#6
class Asana::HttpClient
  # Public: Initializes an HttpClient to make requests to the Asana API.
  #
  # authentication - [Asana::Authentication] An authentication strategy.
  # adapter        - [Symbol, Proc] A Faraday adapter, eiter a Symbol for
  #                  registered adapters or a Proc taking a builder for a
  #                  custom one. Defaults to Faraday.default_adapter.
  # user_agent     - [String] The user agent. Defaults to "ruby-asana vX.Y.Z".
  # config         - [Proc] An optional block that yields the Faraday builder
  #                  object for customization.
  #
  # @return [HttpClient] a new instance of HttpClient
  #
  # source://asana//lib/asana/http_client.rb#25
  def initialize(authentication: T.unsafe(nil), adapter: T.unsafe(nil), user_agent: T.unsafe(nil), debug_mode: T.unsafe(nil), log_asana_change_warnings: T.unsafe(nil), default_headers: T.unsafe(nil), &config); end

  # Public: Performs a DELETE request against the API.
  #
  # resource_uri - [String] the resource URI relative to the base Asana API
  #                URL, e.g "/tags".
  # options      - [Hash] the request I/O options
  #
  # Returns an [Asana::HttpClient::Response] if everything went well.
  # Raises [Asana::Errors::APIError] if anything went wrong.
  #
  # source://asana//lib/asana/http_client.rb#115
  def delete(resource_uri, params: T.unsafe(nil), options: T.unsafe(nil)); end

  # Public: Performs a GET request against the API.
  #
  # resource_uri - [String] the resource URI relative to the base Asana API
  #                URL, e.g "/users/me".
  # params       - [Hash] the request parameters
  # options      - [Hash] the request I/O options
  #
  # Returns an [Asana::HttpClient::Response] if everything went well.
  # Raises [Asana::Errors::APIError] if anything went wrong.
  #
  # source://asana//lib/asana/http_client.rb#50
  def get(resource_uri, params: T.unsafe(nil), options: T.unsafe(nil)); end

  # Public: Performs a POST request against the API.
  #
  # resource_uri - [String] the resource URI relative to the base Asana API
  #                URL, e.g "/tags".
  # body         - [Hash] the body to POST.
  # upload       - [Faraday::UploadIO] an upload object to post as multipart.
  #                Defaults to nil.
  # options      - [Hash] the request I/O options
  #
  # Returns an [Asana::HttpClient::Response] if everything went well.
  # Raises [Asana::Errors::APIError] if anything went wrong.
  #
  # source://asana//lib/asana/http_client.rb#90
  def post(resource_uri, body: T.unsafe(nil), upload: T.unsafe(nil), options: T.unsafe(nil)); end

  # Public: Performs a PUT request against the API.
  #
  # resource_uri - [String] the resource URI relative to the base Asana API
  #                URL, e.g "/users/me".
  # body         - [Hash] the body to PUT.
  # options      - [Hash] the request I/O options
  #
  # Returns an [Asana::HttpClient::Response] if everything went well.
  # Raises [Asana::Errors::APIError] if anything went wrong.
  #
  # source://asana//lib/asana/http_client.rb#68
  def put(resource_uri, body: T.unsafe(nil), options: T.unsafe(nil)); end

  private

  # source://asana//lib/asana/http_client.rb#154
  def add_middleware(builder); end

  # source://asana//lib/asana/http_client.rb#149
  def configure_format(builder); end

  # source://asana//lib/asana/http_client.rb#126
  def connection(&request_config); end

  # source://asana//lib/asana/http_client.rb#168
  def handling_errors(&request); end

  # source://asana//lib/asana/http_client.rb#180
  def log_asana_change_headers(request_headers, response_headers); end

  # source://asana//lib/asana/http_client.rb#172
  def log_request(method, url, body); end

  # source://asana//lib/asana/http_client.rb#138
  def perform_request(method, resource_uri, body = T.unsafe(nil), headers = T.unsafe(nil), &request_config); end

  # source://asana//lib/asana/http_client.rb#159
  def use_adapter(builder, adapter); end
end

# Internal: The API base URI.
#
# source://asana//lib/asana/http_client.rb#14
Asana::HttpClient::BASE_URI = T.let(T.unsafe(nil), String)

# Internal: Adds environment information to a Faraday request.
#
# source://asana//lib/asana/http_client/environment_info.rb#7
class Asana::HttpClient::EnvironmentInfo
  # @return [EnvironmentInfo] a new instance of EnvironmentInfo
  #
  # source://asana//lib/asana/http_client/environment_info.rb#11
  def initialize(user_agent = T.unsafe(nil)); end

  # Public: Augments a Faraday connection with information about the
  # environment.
  #
  # source://asana//lib/asana/http_client/environment_info.rb#20
  def configure(builder); end

  private

  # source://asana//lib/asana/http_client/environment_info.rb#27
  def header; end

  # source://asana//lib/asana/http_client/environment_info.rb#37
  def os; end
end

# Internal: The default user agent to use in all requests to the API.
#
# source://asana//lib/asana/http_client/environment_info.rb#9
Asana::HttpClient::EnvironmentInfo::USER_AGENT = T.let(T.unsafe(nil), String)

# Internal: Handles errors from the API and re-raises them as proper
# exceptions.
#
# source://asana//lib/asana/http_client/error_handling.rb#9
module Asana::HttpClient::ErrorHandling
  include ::Asana::Errors

  private

  # Internal: Returns an APIError exception.
  #
  # source://asana//lib/asana/http_client/error_handling.rb#102
  def api_error(response); end

  # Internal: Parser a response body from JSON.
  #
  # source://asana//lib/asana/http_client/error_handling.rb#107
  def body(response); end

  # Internal: Returns a Forbidden exception.
  #
  # source://asana//lib/asana/http_client/error_handling.rb#75
  def forbidden(response); end

  # Public: Perform a request handling any API errors correspondingly.
  #
  # request - [Proc] a block that will execute the request.
  #
  # Returns a [Faraday::Response] object.
  #
  # Raises [Asana::Errors::InvalidRequest] for invalid requests.
  # Raises [Asana::Errors::NotAuthorized] for unauthorized requests.
  # Raises [Asana::Errors::Forbidden] for forbidden requests.
  # Raises [Asana::Errors::NotFound] when a resource can't be found.
  # Raises [Asana::Errors::RateLimitEnforced] when the API is throttling.
  # Raises [Asana::Errors::ServerError] when there's a server problem.
  # Raises [Asana::Errors::APIError] when the API returns an unknown error.
  #
  #
  # source://asana//lib/asana/http_client/error_handling.rb#31
  def handle(num_timeouts = T.unsafe(nil), &request); end

  # Internal: Returns an InvalidRequest exception including a list of
  # errors.
  #
  # source://asana//lib/asana/http_client/error_handling.rb#57
  def invalid_request(response); end

  # Internal: Returns a NotAuthorized exception.
  #
  # source://asana//lib/asana/http_client/error_handling.rb#65
  def not_authorized(response); end

  # Internal: Returns a NotFound exception.
  #
  # source://asana//lib/asana/http_client/error_handling.rb#80
  def not_found(response); end

  # Internal: Returns a PremiumOnly exception.
  #
  # source://asana//lib/asana/http_client/error_handling.rb#70
  def payment_required(response); end

  # Internal: Returns a RateLimitEnforced exception with a retry after
  # field.
  #
  # source://asana//lib/asana/http_client/error_handling.rb#86
  def rate_limit_enforced(response); end

  # source://asana//lib/asana/http_client/error_handling.rb#111
  def recover_response(response); end

  # Internal: Returns a ServerError exception with a unique phrase.
  #
  # source://asana//lib/asana/http_client/error_handling.rb#94
  def server_error(response); end

  class << self
    # Internal: Returns an APIError exception.
    #
    # source://asana//lib/asana/http_client/error_handling.rb#102
    def api_error(response); end

    # Internal: Parser a response body from JSON.
    #
    # source://asana//lib/asana/http_client/error_handling.rb#107
    def body(response); end

    # Internal: Returns a Forbidden exception.
    #
    # source://asana//lib/asana/http_client/error_handling.rb#75
    def forbidden(response); end

    # Public: Perform a request handling any API errors correspondingly.
    #
    # request - [Proc] a block that will execute the request.
    #
    # Returns a [Faraday::Response] object.
    #
    # Raises [Asana::Errors::InvalidRequest] for invalid requests.
    # Raises [Asana::Errors::NotAuthorized] for unauthorized requests.
    # Raises [Asana::Errors::Forbidden] for forbidden requests.
    # Raises [Asana::Errors::NotFound] when a resource can't be found.
    # Raises [Asana::Errors::RateLimitEnforced] when the API is throttling.
    # Raises [Asana::Errors::ServerError] when there's a server problem.
    # Raises [Asana::Errors::APIError] when the API returns an unknown error.
    #
    #
    # source://asana//lib/asana/http_client/error_handling.rb#31
    def handle(num_timeouts = T.unsafe(nil), &request); end

    # Internal: Returns an InvalidRequest exception including a list of
    # errors.
    #
    # source://asana//lib/asana/http_client/error_handling.rb#57
    def invalid_request(response); end

    # Internal: Returns a NotAuthorized exception.
    #
    # source://asana//lib/asana/http_client/error_handling.rb#65
    def not_authorized(response); end

    # Internal: Returns a NotFound exception.
    #
    # source://asana//lib/asana/http_client/error_handling.rb#80
    def not_found(response); end

    # Internal: Returns a PremiumOnly exception.
    #
    # source://asana//lib/asana/http_client/error_handling.rb#70
    def payment_required(response); end

    # Internal: Returns a RateLimitEnforced exception with a retry after
    # field.
    #
    # source://asana//lib/asana/http_client/error_handling.rb#86
    def rate_limit_enforced(response); end

    # source://asana//lib/asana/http_client/error_handling.rb#111
    def recover_response(response); end

    # Internal: Returns a ServerError exception with a unique phrase.
    #
    # source://asana//lib/asana/http_client/error_handling.rb#94
    def server_error(response); end
  end
end

# source://asana//lib/asana/http_client/error_handling.rb#14
Asana::HttpClient::ErrorHandling::MAX_TIMEOUTS = T.let(T.unsafe(nil), Integer)

# Internal: Represents a response from the Asana API.
#
# source://asana//lib/asana/http_client/response.rb#4
class Asana::HttpClient::Response
  # Public: Wraps a Faraday response.
  #
  # faraday_response - [Faraday::Response] the Faraday response to wrap.
  #
  # @return [Response] a new instance of Response
  #
  # source://asana//lib/asana/http_client/response.rb#21
  def initialize(faraday_response); end

  # Public:
  # Returns the [Hash] representing the parsed JSON body.
  #
  # source://asana//lib/asana/http_client/response.rb#13
  def body; end

  # Public:
  # Returns a [Faraday::Env] object for debugging.
  #
  # source://asana//lib/asana/http_client/response.rb#7
  def faraday_env; end

  # Public:
  # Returns the [Hash] of attribute headers.
  #
  # source://asana//lib/asana/http_client/response.rb#16
  def headers; end

  # Public:
  # Returns a [String] representation of the response.
  #
  # source://asana//lib/asana/http_client/response.rb#30
  def inspect; end

  # Public:
  # Returns the [Integer] status code of the response.
  #
  # source://asana//lib/asana/http_client/response.rb#10
  def status; end

  # Public:
  # Returns a [String] representation of the response.
  #
  # source://asana//lib/asana/http_client/response.rb#30
  def to_s; end
end

# Public: Contains all the resources that the Asana API can return.
#
# source://asana//lib/asana/resource_includes/registry.rb#5
module Asana::Resources; end

# An _attachment_ object represents any file attached to a task in Asana,
# whether it's an uploaded file or one associated via a third-party service
# such as Dropbox or Google Drive.
#
# source://asana//lib/asana/resources/attachment.rb#8
class Asana::Resources::Attachment < ::Asana::Resources::AttachmentsBase
  # Returns the value of attribute created_at.
  #
  # source://asana//lib/asana/resources/attachment.rb#15
  def created_at; end

  # Returns the value of attribute download_url.
  #
  # source://asana//lib/asana/resources/attachment.rb#17
  def download_url; end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/attachment.rb#11
  def gid; end

  # Returns the value of attribute host.
  #
  # source://asana//lib/asana/resources/attachment.rb#19
  def host; end

  # Returns the value of attribute name.
  #
  # source://asana//lib/asana/resources/attachment.rb#21
  def name; end

  # Returns the value of attribute parent.
  #
  # source://asana//lib/asana/resources/attachment.rb#23
  def parent; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/attachment.rb#13
  def resource_type; end

  # Returns the value of attribute view_url.
  #
  # source://asana//lib/asana/resources/attachment.rb#25
  def view_url; end

  class << self
    # Returns the full record for a single attachment.
    #
    # id - [Gid] Globally unique identifier for the attachment.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/attachment.rb#38
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the compact records for all attachments on the task.
    #
    # task - [Gid] Globally unique identifier for the task.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/attachment.rb#49
    def find_by_task(client, task: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/attachment.rb#29
    def plural_name; end
  end
end

# Internal: Mixin to add the ability to upload an attachment to a specific
# Asana resource (a Task, really).
#
# source://asana//lib/asana/resource_includes/attachment_uploading.rb#5
module Asana::Resources::AttachmentUploading
  # Uploads a new attachment to the resource.
  #
  # filename - [String] the absolute path of the file to upload OR the desired filename when using +io+
  # mime     - [String] the MIME type of the file
  # io       - [IO] an object which returns the file's content on +#read+, e.g. a +::StringIO+
  # options  - [Hash] the request I/O options
  # data     - [Hash] extra attributes to post
  #
  #
  # source://asana//lib/asana/resource_includes/attachment_uploading.rb#16
  def attach(filename: T.unsafe(nil), mime: T.unsafe(nil), io: T.unsafe(nil), options: T.unsafe(nil), **data); end
end

# source://asana//lib/asana/resources/gen/attachments_base.rb#8
class Asana::Resources::AttachmentsBase < ::Asana::Resources::Resource
  class << self
    # Delete an attachment
    #
    # attachment_gid - [str]  (required) Globally unique identifier for the attachment.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/attachments_base.rb#21
    def delete_attachment(client, attachment_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get an attachment
    #
    # attachment_gid - [str]  (required) Globally unique identifier for the attachment.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/attachments_base.rb#33
    def get_attachment(client, attachment_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get attachments for a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/attachments_base.rb#47
    def get_attachments_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/attachments_base.rb#10
    def inherited(base); end
  end
end

# source://asana//lib/asana/resources/batch_api.rb#5
class Asana::Resources::BatchAPI < ::Asana::Resources::BatchAPIBase
  class << self
    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/batch_api.rb#9
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/batch_api_base.rb#8
class Asana::Resources::BatchAPIBase < ::Asana::Resources::Resource
  class << self
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/batch_api_base.rb#22
    def create_batch_request(client, options: T.unsafe(nil), **data); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/batch_api_base.rb#10
    def inherited(base); end
  end
end

# Public: Represents a paginated collection of Asana resources.
#
# source://asana//lib/asana/resource_includes/collection.rb#6
class Asana::Resources::Collection
  include ::Enumerable
  include ::Asana::Resources::ResponseHelper

  # Public: Initializes a collection representing a page of resources of a
  # given type.
  #
  # (elements, extra) - [Array] an (String, Hash) tuple coming from the
  #                     response parser.
  # type              - [Class] the type of resource that the collection
  #                     contains. Defaults to the generic Resource.
  # client            - [Asana::Client] the client to perform requests.
  #
  # @return [Collection] a new instance of Collection
  #
  # source://asana//lib/asana/resource_includes/collection.rb#20
  def initialize(_arg0, type: T.unsafe(nil), client: T.unsafe(nil)); end

  # Public: Iterates over the elements of the collection.
  #
  # source://asana//lib/asana/resource_includes/collection.rb#30
  def each(&block); end

  # Returns the value of attribute elements.
  #
  # source://asana//lib/asana/resource_includes/collection.rb#10
  def elements; end

  # Public: Returns a String representation of the collection.
  #
  # source://asana//lib/asana/resource_includes/collection.rb#51
  def inspect; end

  # Public: Returns the last item in the collection.
  #
  # source://asana//lib/asana/resource_includes/collection.rb#40
  def last; end

  # Public: Returns the size of the collection.
  #
  # source://asana//lib/asana/resource_includes/collection.rb#45
  def length; end

  # Public: Returns a new Asana::Resources::Collection with the next page
  # or nil if there are no more pages. Caches the result.
  #
  # source://asana//lib/asana/resource_includes/collection.rb#60
  def next_page; end

  # Public: Returns the size of the collection.
  #
  # source://asana//lib/asana/resource_includes/collection.rb#45
  def size; end

  # Public: Returns a String representation of the collection.
  #
  # source://asana//lib/asana/resource_includes/collection.rb#51
  def to_s; end
end

# Custom Fields store the metadata that is used in order to add user-specified
# information to tasks in Asana. Be sure to reference the [Custom
# Fields](/developers/documentation/getting-started/custom-fields) developer
# documentation for more information about how custom fields relate to various
# resources in Asana.
#
# Users in Asana can [lock custom
# fields](/guide/help/premium/custom-fields#gl-lock-fields), which will make
# them read-only when accessed by other users. Attempting to edit a locked
# custom field will return HTTP error code `403 Forbidden`.
#
# source://asana//lib/asana/resources/custom_fields.rb#15
class Asana::Resources::CustomField < ::Asana::Resources::CustomFieldsBase
  # A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field.
  #
  # Locked custom fields can only be deleted by the user who locked the field.
  #
  # Returns an empty data record.
  #
  # source://asana//lib/asana/resources/custom_fields.rb#142
  def delete; end

  # Returns the value of attribute description.
  #
  # source://asana//lib/asana/resources/custom_fields.rb#26
  def description; end

  # Returns the value of attribute enum_options.
  #
  # source://asana//lib/asana/resources/custom_fields.rb#30
  def enum_options; end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/custom_fields.rb#18
  def gid; end

  # Returns the value of attribute name.
  #
  # source://asana//lib/asana/resources/custom_fields.rb#24
  def name; end

  # Returns the value of attribute precision.
  #
  # source://asana//lib/asana/resources/custom_fields.rb#32
  def precision; end

  # Returns the value of attribute resource_subtype.
  #
  # source://asana//lib/asana/resources/custom_fields.rb#22
  def resource_subtype; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/custom_fields.rb#20
  def resource_type; end

  # Returns the value of attribute type.
  #
  # source://asana//lib/asana/resources/custom_fields.rb#28
  def type; end

  # A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged
  #
  # When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field.
  #
  # An enum custom field's `enum_options` cannot be updated with this endpoint. Instead see "Work With Enum Options" for information on how to update `enum_options`.
  #
  # Locked custom fields can only be updated by the user who locked the field.
  #
  # Returns the complete updated custom field record.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/custom_fields.rb#132
  def update(options: T.unsafe(nil), **data); end

  # Updates an existing enum option. Enum custom fields require at least one enabled enum option.
  #
  # Locked custom fields can only be updated by the user who locked the field.
  #
  # Returns the full record of the updated enum option.
  #
  # enum_option - [Gid] Globally unique identifier for the enum option.
  #
  # name - [String] The name of the enum option.
  # color - [String] The color of the enum option. Defaults to 'none'.
  # enabled - [Boolean] Whether or not the enum option is a selectable value for the custom field.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/custom_fields.rb#160
  def update_enum_option(enum_option: T.unsafe(nil), name: T.unsafe(nil), color: T.unsafe(nil), enabled: T.unsafe(nil), options: T.unsafe(nil), **data); end

  class << self
    # Creates an enum option and adds it to this custom field's list of enum options. A custom field can have at most 50 enum options (including disabled options). By default new enum options are inserted at the end of a custom field's list.
    #
    # Locked custom fields can only have enum options added by the user who locked the field.
    #
    # Returns the full record of the newly created enum option.
    #
    # custom_field - [Gid] Globally unique identifier for the custom field.
    #
    # name - [String] The name of the enum option.
    # color - [String] The color of the enum option. Defaults to 'none'.
    # insert_before - [Gid] An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
    # insert_after - [Gid] An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/custom_fields.rb#94
    def add_enum_option(client, custom_field: T.unsafe(nil), name: T.unsafe(nil), color: T.unsafe(nil), insert_before: T.unsafe(nil), insert_after: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.
    #
    # A custom field's `name` must be unique within a workspace and not conflict with names of existing task properties such as 'Due Date' or 'Assignee'. A custom field's `type` must be one of  'text', 'enum', or 'number'.
    #
    # Returns the full record of the newly created custom field.
    #
    # workspace - [Gid] The workspace to create a custom field in.
    # resource_subtype - [String] The type of the custom field. Must be one of the given values.
    # type - [String] **Deprecated: New integrations should prefer the `resource_subtype` parameter.**
    # name - [String] The name of the custom field.
    # description - [String] The description of the custom field.
    # precision - [Integer] The number of decimal places for the numerical values. Required if the custom field is of type 'number'.
    # enum_options - [String] The discrete values the custom field can assume. Required if the custom field is of type 'enum'.
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/custom_fields.rb#55
    def create(client, workspace: T.unsafe(nil), resource_subtype: T.unsafe(nil), type: T.unsafe(nil), name: T.unsafe(nil), description: T.unsafe(nil), precision: T.unsafe(nil), enum_options: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Creates an enum option and adds it to this custom field's list of enum options. A custom field can have at most 50 enum options (including disabled options). By default new enum options are inserted at the end of a custom field's list.
    #
    # Locked custom fields can only have enum options added by the user who locked the field.
    #
    # Returns the full record of the newly created enum option.
    #
    # custom_field - [Gid] Globally unique identifier for the custom field.
    #
    # name - [String] The name of the enum option.
    # color - [String] The color of the enum option. Defaults to 'none'.
    # insert_before - [Gid] An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
    # insert_after - [Gid] An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/custom_fields.rb#94
    def create_enum_option(client, custom_field: T.unsafe(nil), name: T.unsafe(nil), color: T.unsafe(nil), insert_before: T.unsafe(nil), insert_after: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Returns the complete definition of a custom field's metadata.
    #
    # id - [Gid] Globally unique identifier for the custom field.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/custom_fields.rb#65
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns a list of the compact representation of all of the custom fields in a workspace.
    #
    # workspace - [Gid] The workspace or organization to find custom field definitions in.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/custom_fields.rb#75
    def find_by_workspace(client, workspace: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Moves a particular enum option to be either before or after another specified enum option in the custom field.
    #
    # Locked custom fields can only be reordered by the user who locked the field.
    #
    # custom_field - [Gid] Globally unique identifier for the custom field.
    #
    # enum_option - [Gid] The ID of the enum option to relocate.
    # name - [String] The name of the enum option.
    # color - [String] The color of the enum option. Defaults to 'none'.
    # before_enum_option - [Gid] An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
    # after_enum_option - [Gid] An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/custom_fields.rb#113
    def insert_enum_option(client, custom_field: T.unsafe(nil), enum_option: T.unsafe(nil), name: T.unsafe(nil), color: T.unsafe(nil), before_enum_option: T.unsafe(nil), after_enum_option: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/custom_fields.rb#36
    def plural_name; end

    # Moves a particular enum option to be either before or after another specified enum option in the custom field.
    #
    # Locked custom fields can only be reordered by the user who locked the field.
    #
    # custom_field - [Gid] Globally unique identifier for the custom field.
    #
    # enum_option - [Gid] The ID of the enum option to relocate.
    # name - [String] The name of the enum option.
    # color - [String] The color of the enum option. Defaults to 'none'.
    # before_enum_option - [Gid] An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
    # after_enum_option - [Gid] An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/custom_fields.rb#113
    def reorder_enum_option(client, custom_field: T.unsafe(nil), enum_option: T.unsafe(nil), name: T.unsafe(nil), color: T.unsafe(nil), before_enum_option: T.unsafe(nil), after_enum_option: T.unsafe(nil), options: T.unsafe(nil), **data); end
  end
end

# Custom fields are applied to a particular project or portfolio with the
# Custom Field Settings resource. This resource both represents the
# many-to-many join of the Custom Field and Project or Portfolio as well as
# stores information that is relevant to that particular pairing; for instance,
# the `is_important` property determines some possible application-specific
# handling of that custom field and parent.
#
# source://asana//lib/asana/resources/custom_field_settings.rb#11
class Asana::Resources::CustomFieldSetting < ::Asana::Resources::CustomFieldSettingsBase
  # Returns the value of attribute created_at.
  #
  # source://asana//lib/asana/resources/custom_field_settings.rb#18
  def created_at; end

  # Returns the value of attribute custom_field.
  #
  # source://asana//lib/asana/resources/custom_field_settings.rb#26
  def custom_field; end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/custom_field_settings.rb#14
  def gid; end

  # Returns the value of attribute is_important.
  #
  # source://asana//lib/asana/resources/custom_field_settings.rb#20
  def is_important; end

  # Returns the value of attribute parent.
  #
  # source://asana//lib/asana/resources/custom_field_settings.rb#22
  def parent; end

  # Returns the value of attribute project.
  #
  # source://asana//lib/asana/resources/custom_field_settings.rb#24
  def project; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/custom_field_settings.rb#16
  def resource_type; end

  class << self
    # Returns a list of all of the custom fields settings on a portfolio.
    #
    # portfolio - [Gid] The ID of the portfolio for which to list custom field settings
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/custom_field_settings.rb#49
    def find_by_portfolio(client, portfolio: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns a list of all of the custom fields settings on a project.
    #
    # project - [Gid] The ID of the project for which to list custom field settings
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/custom_field_settings.rb#39
    def find_by_project(client, project: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/custom_field_settings.rb#30
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/custom_field_settings_base.rb#8
class Asana::Resources::CustomFieldSettingsBase < ::Asana::Resources::Resource
  class << self
    # Get a portfolio's custom fields
    #
    # portfolio_gid - [str]  (required) Globally unique identifier for the portfolio.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/custom_field_settings_base.rb#23
    def get_custom_field_settings_for_portfolio(client, portfolio_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a project's custom fields
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/custom_field_settings_base.rb#37
    def get_custom_field_settings_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/custom_field_settings_base.rb#10
    def inherited(base); end
  end
end

# source://asana//lib/asana/resources/gen/custom_fields_base.rb#8
class Asana::Resources::CustomFieldsBase < ::Asana::Resources::Resource
  class << self
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/custom_fields_base.rb#24
    def create_custom_field(client, options: T.unsafe(nil), **data); end

    # Create an enum option
    #
    # custom_field_gid - [str]  (required) Globally unique identifier for the custom field.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/custom_fields_base.rb#38
    def create_enum_option_for_custom_field(client, custom_field_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Delete a custom field
    #
    # custom_field_gid - [str]  (required) Globally unique identifier for the custom field.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/custom_fields_base.rb#50
    def delete_custom_field(client, custom_field_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a custom field
    #
    # custom_field_gid - [str]  (required) Globally unique identifier for the custom field.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/custom_fields_base.rb#62
    def get_custom_field(client, custom_field_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a workspace's custom fields
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/custom_fields_base.rb#76
    def get_custom_fields_for_workspace(client, workspace_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/custom_fields_base.rb#10
    def inherited(base); end

    # Reorder a custom field's enum
    #
    # custom_field_gid - [str]  (required) Globally unique identifier for the custom field.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/custom_fields_base.rb#89
    def insert_enum_option_for_custom_field(client, custom_field_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Update a custom field
    #
    # custom_field_gid - [str]  (required) Globally unique identifier for the custom field.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to PUT
    #
    # source://asana//lib/asana/resources/gen/custom_fields_base.rb#102
    def update_custom_field(client, custom_field_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Update an enum option
    #
    # enum_option_gid - [str]  (required) Globally unique identifier for the enum option.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to PUT
    #
    # source://asana//lib/asana/resources/gen/custom_fields_base.rb#115
    def update_enum_option(client, enum_option_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end
  end
end

# An _event_ is an object representing a change to a resource that was
# observed by an event subscription.
#
# In general, requesting events on a resource is faster and subject to
# higher rate limits than requesting the resource itself. Additionally,
# change events bubble up - listening to events on a project would include
# when stories are added to tasks in the project, even on subtasks.
#
# Establish an initial sync token by making a request with no sync token.
# The response will be a `412` error - the same as if the sync token had
# expired.
#
# Subsequent requests should always provide the sync token from the
# immediately preceding call.
#
# Sync tokens may not be valid if you attempt to go 'backward' in the
# history by requesting previous tokens, though re-requesting the current
# sync token is generally safe, and will always return the same results.
#
# When you receive a `412 Precondition Failed` error, it means that the sync
# token is either invalid or expired. If you are attempting to keep a set of
# data in sync, this signals you may need to re-crawl the data.
#
# Sync tokens always expire after 24 hours, but may expire sooner, depending
# on load on the service.
#
# source://asana//lib/asana/resource_includes/event.rb#30
class Asana::Resources::Event < ::Asana::Resources::Resource
  # Returns the value of attribute type.
  #
  # source://asana//lib/asana/resource_includes/event.rb#31
  def type; end

  class << self
    # Public: Returns an infinite collection of events on a particular
    # resource.
    #
    # client - [Asana::Client] the client to perform the requests.
    # id     - [String] the id of the resource to get events from.
    # wait   - [Integer] the number of seconds to wait between each poll.
    #
    # source://asana//lib/asana/resource_includes/event.rb#45
    def for(client, id, wait: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resource_includes/event.rb#35
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/events.rb#5
class Asana::Resources::EventResponse < ::Asana::Resources::EventsBase
  # Returns the value of attribute action.
  #
  # source://asana//lib/asana/resources/events.rb#14
  def action; end

  # Returns the value of attribute created_at.
  #
  # source://asana//lib/asana/resources/events.rb#18
  def created_at; end

  # Returns the value of attribute parent.
  #
  # source://asana//lib/asana/resources/events.rb#16
  def parent; end

  # Returns the value of attribute resource.
  #
  # source://asana//lib/asana/resources/events.rb#10
  def resource; end

  # Returns the value of attribute type.
  #
  # source://asana//lib/asana/resources/events.rb#12
  def type; end

  # Returns the value of attribute user.
  #
  # source://asana//lib/asana/resources/events.rb#8
  def user; end

  class << self
    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/events.rb#22
    def plural_name; end
  end
end

# Public: Mixin to enable a resource with the ability to fetch events about
# itself.
#
# source://asana//lib/asana/resource_includes/event_subscription.rb#7
module Asana::Resources::EventSubscription
  # Public: Returns an infinite collection of events on the resource.
  #
  # source://asana//lib/asana/resource_includes/event_subscription.rb#9
  def events(wait: T.unsafe(nil), options: T.unsafe(nil)); end
end

# Public: An infinite collection of events.
#
# Since they are infinite, if you want to filter or do other collection
# operations without blocking indefinitely you should call #lazy on them to
# turn them into a lazy collection.
#
# Examples:
#
#   # Subscribes to an event stream and blocks indefinitely, printing
#   # information of every event as it comes in.
#   events = Events.new(resource: 'someresourceID', client: client)
#   events.each do |event|
#     puts [event.type, event.action]
#   end
#
#   # Lazily filters events as they come in and prints them.
#   events = Events.new(resource: 'someresourceID', client: client)
#   events.lazy.select { |e| e.type == 'task' }.each do |event|
#     puts [event.type, event.action]
#   end
#
# source://asana//lib/asana/resource_includes/events.rb#26
class Asana::Resources::Events
  include ::Enumerable

  # Public: Initializes a new Events instance, subscribed to a resource ID.
  #
  # resource - [String] a resource ID. Can be a task id or a workspace id.
  # client   - [Asana::Client] a client to perform the requests.
  # wait     - [Integer] the number of seconds to wait between each poll.
  # options  - [Hash] the request I/O options
  #
  # @return [Events] a new instance of Events
  #
  # source://asana//lib/asana/resource_includes/events.rb#35
  def initialize(resource: T.unsafe(nil), client: T.unsafe(nil), wait: T.unsafe(nil), options: T.unsafe(nil)); end

  # Public: Iterates indefinitely over all events happening to a particular
  # resource from the @sync timestamp or from now if it is nil.
  #
  # source://asana//lib/asana/resource_includes/events.rb#49
  def each(&block); end

  private

  # Internal: Returns the formatted params for the poll request.
  #
  # source://asana//lib/asana/resource_includes/events.rb#91
  def params; end

  # Internal: Polls and fetches all events that have occurred since the sync
  # token was created. Updates the sync token as it comes back from the
  # response.
  #
  # If we polled less than @wait seconds ago, we don't do anything.
  #
  # Notes:
  #
  # On the first request, the sync token is not passed (because it is
  # nil). The response will be the same as for an expired sync token, and
  # will include a new valid sync token.
  #
  # If the sync token is too old (which may happen from time to time)
  # the API will return a `412 Precondition Failed` error, and include
  # a fresh `sync` token in the response.
  #
  # source://asana//lib/asana/resource_includes/events.rb#78
  def poll; end

  # Internal: Executes a block if at least @wait seconds have passed since
  #
  # source://asana//lib/asana/resource_includes/events.rb#97
  def rate_limiting; end
end

# source://asana//lib/asana/resources/gen/events_base.rb#8
class Asana::Resources::EventsBase < ::Asana::Resources::Resource
  class << self
    # resource - [str]  (required) A resource ID to subscribe to. The resource can be a task or project.
    # sync - [str]  A sync token received from the last request, or none on first sync. Events will be returned from the point in time that the sync token was generated. *Note: On your first request, omit the sync token. The response will be the same as for an expired sync token, and will include a new valid sync token.If the sync token is too old (which may happen from time to time) the API will return a `412 Precondition Failed` error, and include a fresh sync token in the response.*
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/events_base.rb#23
    def get_events(client, resource: T.unsafe(nil), sync: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/events_base.rb#10
    def inherited(base); end
  end
end

# A _job_ represents a process that handles asynchronous work.
#
# Jobs are created when an endpoint requests an action that will be handled asynchronously.
# Such as project or task duplication.
#
# source://asana//lib/asana/resources/job.rb#9
class Asana::Resources::Job < ::Asana::Resources::JobsBase
  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/job.rb#12
  def gid; end

  # Returns the value of attribute new_project.
  #
  # source://asana//lib/asana/resources/job.rb#20
  def new_project; end

  # Returns the value of attribute new_task.
  #
  # source://asana//lib/asana/resources/job.rb#22
  def new_task; end

  # Returns the value of attribute resource_subtype.
  #
  # source://asana//lib/asana/resources/job.rb#16
  def resource_subtype; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/job.rb#14
  def resource_type; end

  # Returns the value of attribute status.
  #
  # source://asana//lib/asana/resources/job.rb#18
  def status; end

  class << self
    # Returns the complete job record for a single job.
    #
    # id - [Gid] The job to get.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/job.rb#34
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/job.rb#26
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/jobs_base.rb#8
class Asana::Resources::JobsBase < ::Asana::Resources::Resource
  class << self
    # Get a job by id
    #
    # job_gid - [str]  (required) Globally unique identifier for the job.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/jobs_base.rb#21
    def get_job(client, job_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/jobs_base.rb#10
    def inherited(base); end
  end
end

# An _organization_export_ object represents a request to export the complete data of an Organization
# in JSON format.
#
# To export an Organization using this API:
#
# * Create an `organization_export` [request](#create) and store the id that is returned.\
# * Request the `organization_export` every few minutes, until the `state` field contains 'finished'.\
# * Download the file located at the URL in the `download_url` field.
#
# Exports can take a long time, from several minutes to a few hours for large Organizations.
#
# **Note:** These endpoints are only available to [Service Accounts](/guide/help/premium/service-accounts)
# of an [Enterprise](/enterprise) Organization.
#
# source://asana//lib/asana/resources/organization_export.rb#18
class Asana::Resources::OrganizationExport < ::Asana::Resources::OrganizationExportsBase
  # Returns the value of attribute created_at.
  #
  # source://asana//lib/asana/resources/organization_export.rb#23
  def created_at; end

  # Returns the value of attribute download_url.
  #
  # source://asana//lib/asana/resources/organization_export.rb#25
  def download_url; end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/organization_export.rb#21
  def gid; end

  # Returns the value of attribute organization.
  #
  # source://asana//lib/asana/resources/organization_export.rb#29
  def organization; end

  # Returns the value of attribute state.
  #
  # source://asana//lib/asana/resources/organization_export.rb#27
  def state; end

  class << self
    # This method creates a request to export an Organization. Asana will complete the export at some
    # point after you create the request.
    #
    # organization - [Gid] Globally unique identifier for the workspace or organization.
    #
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/organization_export.rb#54
    def create(client, organization: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Returns details of a previously-requested Organization export.
    #
    # id - [Gid] Globally unique identifier for the Organization export.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/organization_export.rb#42
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/organization_export.rb#33
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/organization_exports_base.rb#8
class Asana::Resources::OrganizationExportsBase < ::Asana::Resources::Resource
  class << self
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/organization_exports_base.rb#24
    def create_organization_export(client, options: T.unsafe(nil), **data); end

    # Get details on an org export request
    #
    # organization_export_gid - [str]  (required) Globally unique identifier for the organization export.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/organization_exports_base.rb#35
    def get_organization_export(client, organization_export_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/organization_exports_base.rb#10
    def inherited(base); end
  end
end

# A _portfolio_ gives a high-level overview of the status of multiple
# initiatives in Asana.  Portfolios provide a dashboard overview of the state
# of multiple items, including a progress report and the most recent
# [project status](/developers/api-reference/project_statuses) update.
#
# Portfolios have some restrictions on size. Each portfolio has a maximum of 250
# items and, like projects, a maximum of 20 custom fields.
#
# source://asana//lib/asana/resources/portfolio.rb#12
class Asana::Resources::Portfolio < ::Asana::Resources::PortfoliosBase
  # Create a new custom field setting on the portfolio. Returns the full
  # record for the new custom field setting.
  #
  # custom_field - [Gid] The id of the custom field to add to the portfolio.
  # is_important - [Boolean] Whether this field should be considered important to this portfolio (for instance, to display in the list view of items in the portfolio).
  #
  # insert_before - [Gid] An id of a custom field setting on this portfolio. The new custom field setting will be added before this one.
  # `insert_before` and `insert_after` parameters cannot both be specified.
  #
  # insert_after - [Gid] An id of a custom field setting on this portfolio. The new custom field setting will be added after this one.
  # `insert_before` and `insert_after` parameters cannot both be specified.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/portfolio.rb#185
  def add_custom_field_setting(custom_field: T.unsafe(nil), is_important: T.unsafe(nil), insert_before: T.unsafe(nil), insert_after: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Add an item to a portfolio.
  #
  # Returns an empty data block.
  #
  # item - [Gid] The item to add to the portfolio.
  # insert_before - [Gid] An id of an item in this portfolio. The new item will be added before the one specified here.
  # `insert_before` and `insert_after` parameters cannot both be specified.
  #
  # insert_after - [Gid] An id of an item in this portfolio. The new item will be added after the one specified here.
  # `insert_before` and `insert_after` parameters cannot both be specified.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/portfolio.rb#126
  def add_item(item: T.unsafe(nil), insert_before: T.unsafe(nil), insert_after: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
  #
  # members - [Array] An array of user ids.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/portfolio.rb#148
  def add_members(members: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute color.
  #
  # source://asana//lib/asana/resources/portfolio.rb#29
  def color; end

  # Returns the value of attribute created_at.
  #
  # source://asana//lib/asana/resources/portfolio.rb#23
  def created_at; end

  # Returns the value of attribute created_by.
  #
  # source://asana//lib/asana/resources/portfolio.rb#25
  def created_by; end

  # Get the custom field settings on a portfolio.
  #
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/portfolio.rb#166
  def custom_field_settings(options: T.unsafe(nil)); end

  # An existing portfolio can be deleted by making a DELETE request
  # on the URL for that portfolio.
  #
  # Returns an empty data record.
  #
  # source://asana//lib/asana/resources/portfolio.rb#100
  def delete; end

  # Get a list of the items in compact form in a portfolio.
  #
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/portfolio.rb#108
  def get_items(options: T.unsafe(nil)); end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/portfolio.rb#15
  def gid; end

  # Returns the value of attribute members.
  #
  # source://asana//lib/asana/resources/portfolio.rb#33
  def members; end

  # Returns the value of attribute name.
  #
  # source://asana//lib/asana/resources/portfolio.rb#19
  def name; end

  # Returns the value of attribute owner.
  #
  # source://asana//lib/asana/resources/portfolio.rb#21
  def owner; end

  # Remove a custom field setting on the portfolio. Returns an empty data
  # block.
  #
  # custom_field - [Gid] The id of the custom field to remove from this portfolio.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/portfolio.rb#196
  def remove_custom_field_setting(custom_field: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Remove an item to a portfolio.
  #
  # Returns an empty data block.
  #
  # item - [Gid] The item to remove from the portfolio.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/portfolio.rb#138
  def remove_item(item: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Removes the specified list of members from the portfolio. Returns the updated portfolio record.
  #
  # members - [Array] An array of user ids.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/portfolio.rb#158
  def remove_members(members: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/portfolio.rb#17
  def resource_type; end

  # An existing portfolio can be updated by making a PUT request on the
  # URL for that portfolio. Only the fields provided in the `data` block will be
  # updated; any unspecified fields will remain unchanged.
  #
  # Returns the complete updated portfolio record.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/portfolio.rb#91
  def update(options: T.unsafe(nil), **data); end

  # Returns the value of attribute workspace.
  #
  # source://asana//lib/asana/resources/portfolio.rb#31
  def workspace; end

  class << self
    # Creates a new portfolio in the given workspace with the supplied name.
    #
    # Note that portfolios created in the Asana UI may have some state
    # (like the "Priority" custom field) which is automatically added to the
    # portfolio when it is created. Portfolios created via our API will **not**
    # be created with the same initial state to allow integrations to create
    # their own starting state on a portfolio.
    #
    # workspace - [Gid] The workspace or organization in which to create the portfolio.
    # name - [String] The name of the newly-created portfolio
    # color - [String] An optional color for the portfolio
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/portfolio.rb#54
    def create(client, workspace: T.unsafe(nil), name: T.unsafe(nil), color: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Returns a list of the portfolios in compact representation that are owned
    # by the current API user.
    #
    # workspace - [Gid] The workspace or organization to filter portfolios on.
    # owner - [String] The user who owns the portfolio. Currently, API users can only get a
    # list of portfolios that they themselves own.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/portfolio.rb#77
    def find_all(client, workspace: T.unsafe(nil), owner: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the complete record for a single portfolio.
    #
    # id - [Gid] The portfolio to get.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/portfolio.rb#63
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/portfolio.rb#37
    def plural_name; end
  end
end

# This object determines if a user is a member of a portfolio.
#
# source://asana//lib/asana/resources/portfolio_membership.rb#6
class Asana::Resources::PortfolioMembership < ::Asana::Resources::PortfolioMembershipsBase
  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/portfolio_membership.rb#9
  def gid; end

  # Returns the value of attribute portfolio.
  #
  # source://asana//lib/asana/resources/portfolio_membership.rb#15
  def portfolio; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/portfolio_membership.rb#11
  def resource_type; end

  # Returns the value of attribute user.
  #
  # source://asana//lib/asana/resources/portfolio_membership.rb#13
  def user; end

  class << self
    # Returns the compact portfolio membership records for the portfolio. You must
    # specify `portfolio`, `portfolio` and `user`, or `workspace` and `user`.
    #
    # portfolio - [Gid] The portfolio for which to fetch memberships.
    # workspace - [Gid] The workspace for which to fetch memberships.
    # user - [String] The user to filter the memberships to.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/portfolio_membership.rb#31
    def find_all(client, portfolio: T.unsafe(nil), workspace: T.unsafe(nil), user: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the portfolio membership record.
    #
    # id - [Gid] Globally unique identifier for the portfolio membership.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/portfolio_membership.rb#52
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the compact portfolio membership records for the portfolio.
    #
    # portfolio - [Gid] The portfolio for which to fetch memberships.
    # user - [String] If present, the user to filter the memberships to.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/portfolio_membership.rb#42
    def find_by_portfolio(client, portfolio: T.unsafe(nil), user: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/portfolio_membership.rb#19
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/portfolio_memberships_base.rb#8
class Asana::Resources::PortfolioMembershipsBase < ::Asana::Resources::Resource
  class << self
    # Get a portfolio membership
    #
    # portfolio_membership_gid - [str]  (required)
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/portfolio_memberships_base.rb#21
    def get_portfolio_membership(client, portfolio_membership_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # portfolio - [str]  The portfolio to filter results on.
    # workspace - [str]  The workspace to filter results on.
    # user - [str]  A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/portfolio_memberships_base.rb#38
    def get_portfolio_memberships(client, portfolio: T.unsafe(nil), workspace: T.unsafe(nil), user: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get memberships from a portfolio
    #
    # portfolio_gid - [str]  (required) Globally unique identifier for the portfolio.
    # user - [str]  A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/portfolio_memberships_base.rb#53
    def get_portfolio_memberships_for_portfolio(client, portfolio_gid: T.unsafe(nil), user: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/portfolio_memberships_base.rb#10
    def inherited(base); end
  end
end

# source://asana//lib/asana/resources/gen/portfolios_base.rb#8
class Asana::Resources::PortfoliosBase < ::Asana::Resources::Resource
  class << self
    # Add a custom field to a portfolio
    #
    # portfolio_gid - [str]  (required) Globally unique identifier for the portfolio.
    # options - [Hash] the request I/O options
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/portfolios_base.rb#21
    def add_custom_field_setting_for_portfolio(client, portfolio_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Add a portfolio item
    #
    # portfolio_gid - [str]  (required) Globally unique identifier for the portfolio.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/portfolios_base.rb#34
    def add_item_for_portfolio(client, portfolio_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Add users to a portfolio
    #
    # portfolio_gid - [str]  (required) Globally unique identifier for the portfolio.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/portfolios_base.rb#47
    def add_members_for_portfolio(client, portfolio_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/portfolios_base.rb#60
    def create_portfolio(client, options: T.unsafe(nil), **data); end

    # Delete a portfolio
    #
    # portfolio_gid - [str]  (required) Globally unique identifier for the portfolio.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/portfolios_base.rb#71
    def delete_portfolio(client, portfolio_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get portfolio items
    #
    # portfolio_gid - [str]  (required) Globally unique identifier for the portfolio.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/portfolios_base.rb#85
    def get_items_for_portfolio(client, portfolio_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a portfolio
    #
    # portfolio_gid - [str]  (required) Globally unique identifier for the portfolio.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/portfolios_base.rb#97
    def get_portfolio(client, portfolio_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # workspace - [str]  (required) The workspace or organization to filter portfolios on.
    # owner - [str]  (required) The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/portfolios_base.rb#113
    def get_portfolios(client, workspace: T.unsafe(nil), owner: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/portfolios_base.rb#10
    def inherited(base); end

    # Remove a custom field from a portfolio
    #
    # portfolio_gid - [str]  (required) Globally unique identifier for the portfolio.
    # options - [Hash] the request I/O options
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/portfolios_base.rb#125
    def remove_custom_field_setting_for_portfolio(client, portfolio_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Remove a portfolio item
    #
    # portfolio_gid - [str]  (required) Globally unique identifier for the portfolio.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/portfolios_base.rb#138
    def remove_item_for_portfolio(client, portfolio_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Remove users from a portfolio
    #
    # portfolio_gid - [str]  (required) Globally unique identifier for the portfolio.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/portfolios_base.rb#151
    def remove_members_for_portfolio(client, portfolio_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Update a portfolio
    #
    # portfolio_gid - [str]  (required) Globally unique identifier for the portfolio.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to PUT
    #
    # source://asana//lib/asana/resources/gen/portfolios_base.rb#164
    def update_portfolio(client, portfolio_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end
  end
end

# A _project_ represents a prioritized list of tasks in Asana or a board with
# columns of tasks represented as cards. It exists in a single workspace or
# organization and is accessible to a subset of users in that workspace or
# organization, depending on its permissions.
#
# Projects in organizations are shared with a single team. You cannot currently
# change the team of a project via the API. Non-organization workspaces do not
# have teams and so you should not specify the team of project in a regular
# workspace.
#
# source://asana//lib/asana/resources/project.rb#14
class Asana::Resources::Project < ::Asana::Resources::ProjectsBase
  include ::Asana::Resources::EventSubscription

  # Create a new custom field setting on the project.
  #
  # custom_field - [Gid] The id of the custom field to associate with this project.
  # is_important - [Boolean] Whether this field should be considered important to this project.
  #
  # insert_before - [Gid] An id of a Custom Field Settings on this project, before which the new Custom Field Settings will be added.
  # `insert_before` and `insert_after` parameters cannot both be specified.
  #
  # insert_after - [Gid] An id of a Custom Field Settings on this project, after which the new Custom Field Settings will be added.
  # `insert_before` and `insert_after` parameters cannot both be specified.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/project.rb#292
  def add_custom_field_setting(custom_field: T.unsafe(nil), is_important: T.unsafe(nil), insert_before: T.unsafe(nil), insert_after: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Adds the specified list of users as followers to the project. Followers are a subset of members, therefore if
  # the users are not already members of the project they will also become members as a result of this operation.
  # Returns the updated project record.
  #
  # followers - [Array] An array of followers to add to the project.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/project.rb#243
  def add_followers(followers: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Adds the specified list of users as members of the project. Returns the updated project record.
  #
  # members - [Array] An array of user ids.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/project.rb#264
  def add_members(members: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute archived.
  #
  # source://asana//lib/asana/resources/project.rb#39
  def archived; end

  # Returns the value of attribute color.
  #
  # source://asana//lib/asana/resources/project.rb#51
  def color; end

  # Returns the value of attribute created_at.
  #
  # source://asana//lib/asana/resources/project.rb#35
  def created_at; end

  # Returns the value of attribute current_status.
  #
  # source://asana//lib/asana/resources/project.rb#27
  def current_status; end

  # Returns the value of attribute custom_field_settings.
  #
  # source://asana//lib/asana/resources/project.rb#49
  def custom_field_settings; end

  # Returns the value of attribute custom_fields.
  #
  # source://asana//lib/asana/resources/project.rb#47
  def custom_fields; end

  # A specific, existing project can be deleted by making a DELETE request
  # on the URL for that project.
  #
  # Returns an empty data record.
  #
  # source://asana//lib/asana/resources/project.rb#197
  def delete; end

  # Returns the value of attribute due_date.
  #
  # source://asana//lib/asana/resources/project.rb#29
  def due_date; end

  # Returns the value of attribute due_on.
  #
  # source://asana//lib/asana/resources/project.rb#31
  def due_on; end

  # Creates and returns a job that will asynchronously handle the duplication.
  #
  # name - [String] The name of the new project.
  # team - [Gid] Sets the team of the new project. If team is not defined, the new project
  # will be in the same team as the the original project.
  #
  # include - [Array] The elements that will be duplicated to the new project.
  # Tasks are always included.
  #
  # schedule_dates - [String] A dictionary of options to auto-shift dates.
  # `task_dates` must be included to use this option.
  # Requires either `start_on` or `due_on`, but not both.
  # `start_on` will set the first start date of the new
  # project to the given date, while `due_on` will set the last due date
  # to the given date. Both will offset the remaining dates by the same amount
  # of the original project.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/project.rb#221
  def duplicate_project(name: T.unsafe(nil), team: T.unsafe(nil), include: T.unsafe(nil), schedule_dates: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute followers.
  #
  # source://asana//lib/asana/resources/project.rb#45
  def followers; end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/project.rb#19
  def gid; end

  # Returns the value of attribute html_notes.
  #
  # source://asana//lib/asana/resources/project.rb#55
  def html_notes; end

  # Returns the value of attribute layout.
  #
  # source://asana//lib/asana/resources/project.rb#61
  def layout; end

  # Returns the value of attribute members.
  #
  # source://asana//lib/asana/resources/project.rb#43
  def members; end

  # Returns the value of attribute modified_at.
  #
  # source://asana//lib/asana/resources/project.rb#37
  def modified_at; end

  # Returns the value of attribute name.
  #
  # source://asana//lib/asana/resources/project.rb#23
  def name; end

  # Returns the value of attribute notes.
  #
  # source://asana//lib/asana/resources/project.rb#53
  def notes; end

  # Returns the value of attribute owner.
  #
  # source://asana//lib/asana/resources/project.rb#25
  def owner; end

  # Returns the value of attribute public.
  #
  # source://asana//lib/asana/resources/project.rb#41
  def public; end

  # Remove a custom field setting on the project.
  #
  # custom_field - [Gid] The id of the custom field to remove from this project.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/project.rb#302
  def remove_custom_field_setting(custom_field: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Removes the specified list of users from following the project, this will not affect project membership status.
  # Returns the updated project record.
  #
  # followers - [Array] An array of followers to remove from the project.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/project.rb#254
  def remove_followers(followers: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Removes the specified list of members from the project. Returns the updated project record.
  #
  # members - [Array] An array of user ids.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/project.rb#274
  def remove_members(members: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/project.rb#21
  def resource_type; end

  # Returns the value of attribute start_on.
  #
  # source://asana//lib/asana/resources/project.rb#33
  def start_on; end

  # Returns the compact task records for all tasks within the given project,
  # ordered by their priority within the project. Tasks can exist in more than one project at a time.
  #
  # per_page - [Integer] the number of records to fetch per page.
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/project.rb#231
  def tasks(per_page: T.unsafe(nil), options: T.unsafe(nil)); end

  # Returns the value of attribute team.
  #
  # source://asana//lib/asana/resources/project.rb#59
  def team; end

  # A specific, existing project can be updated by making a PUT request on the
  # URL for that project. Only the fields provided in the `data` block will be
  # updated; any unspecified fields will remain unchanged.
  #
  # When using this method, it is best to specify only those fields you wish
  # to change, or else you may overwrite changes made by another user since
  # you last retrieved the task.
  #
  # Returns the complete updated project record.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/project.rb#188
  def update(options: T.unsafe(nil), **data); end

  # Returns the value of attribute workspace.
  #
  # source://asana//lib/asana/resources/project.rb#57
  def workspace; end

  class << self
    # Creates a new project in a workspace or team.
    #
    # Every project is required to be created in a specific workspace or
    # organization, and this cannot be changed once set. Note that you can use
    # the `workspace` parameter regardless of whether or not it is an
    # organization.
    #
    # If the workspace for your project _is_ an organization, you must also
    # supply a `team` to share the project with.
    #
    # Returns the full record of the newly created project.
    #
    # workspace - [Gid] The workspace or organization to create the project in.
    # team - [Gid] If creating in an organization, the specific team to create the
    # project in.
    #
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/project.rb#87
    def create(client, workspace: T.unsafe(nil), team: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Creates a project shared with the given team.
    #
    # Returns the full record of the newly created project.
    #
    # team - [Gid] The team to create the project in.
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/project.rb#112
    def create_in_team(client, team: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # If the workspace for your project _is_ an organization, you must also
    # supply a `team` to share the project with.
    #
    # Returns the full record of the newly created project.
    #
    # workspace - [Gid] The workspace or organization to create the project in.
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/project.rb#100
    def create_in_workspace(client, workspace: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Returns the compact project records for some filtered set of projects.
    # Use one or more of the parameters provided to filter the projects returned.
    #
    # workspace - [Gid] The workspace or organization to filter projects on.
    # team - [Gid] The team to filter projects on.
    # is_template - [Boolean] **Note: This parameter can only be included if a team is also defined, or the workspace is not an organization**
    # Filters results to include only template projects.
    #
    # archived - [Boolean] Only return projects whose `archived` field takes on the value of
    # this parameter.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/project.rb#139
    def find_all(client, workspace: T.unsafe(nil), team: T.unsafe(nil), is_template: T.unsafe(nil), archived: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the complete project record for a single project.
    #
    # id - [Gid] The project to get.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/project.rb#121
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the compact project records for all projects in the team.
    #
    # team - [Gid] The team to find projects in.
    # is_template - [Boolean] Filters results to include only template projects.
    #
    # archived - [Boolean] Only return projects whose `archived` field takes on the value of
    # this parameter.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/project.rb#170
    def find_by_team(client, team: T.unsafe(nil), is_template: T.unsafe(nil), archived: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the compact project records for all projects in the workspace.
    #
    # workspace - [Gid] The workspace or organization to find projects in.
    # is_template - [Boolean] **Note: This parameter can only be included if a team is also defined, or the workspace is not an organization**
    # Filters results to include only template projects.
    #
    # archived - [Boolean] Only return projects whose `archived` field takes on the value of
    # this parameter.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/project.rb#155
    def find_by_workspace(client, workspace: T.unsafe(nil), is_template: T.unsafe(nil), archived: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/project.rb#65
    def plural_name; end
  end
end

# With the introduction of "comment-only" projects in Asana, a user's membership
# in a project comes with associated permissions. These permissions (whether a
# user has full access to the project or comment-only access) are accessible
# through the project memberships endpoints described here.
#
# source://asana//lib/asana/resources/project_membership.rb#9
class Asana::Resources::ProjectMembership < ::Asana::Resources::ProjectMembershipsBase
  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/project_membership.rb#12
  def gid; end

  # Returns the value of attribute project.
  #
  # source://asana//lib/asana/resources/project_membership.rb#18
  def project; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/project_membership.rb#14
  def resource_type; end

  # Returns the value of attribute user.
  #
  # source://asana//lib/asana/resources/project_membership.rb#16
  def user; end

  # Returns the value of attribute write_access.
  #
  # source://asana//lib/asana/resources/project_membership.rb#20
  def write_access; end

  class << self
    # Returns the project membership record.
    #
    # id - [Gid] Globally unique identifier for the project membership.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/project_membership.rb#45
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the compact project membership records for the project.
    #
    # project - [Gid] The project for which to fetch memberships.
    # user - [String] If present, the user to filter the memberships to.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/project_membership.rb#34
    def find_by_project(client, project: T.unsafe(nil), user: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the compact project membership records for the project.
    #
    # project - [Gid] The project for which to fetch memberships.
    # user - [String] If present, the user to filter the memberships to.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/project_membership.rb#34
    def get_many(client, project: T.unsafe(nil), user: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the project membership record.
    #
    # id - [Gid] Globally unique identifier for the project membership.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/project_membership.rb#45
    def get_single(client, id, options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/project_membership.rb#24
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/project_memberships_base.rb#8
class Asana::Resources::ProjectMembershipsBase < ::Asana::Resources::Resource
  class << self
    # Get a project membership
    #
    # project_membership_gid - [str]  (required)
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/project_memberships_base.rb#21
    def get_project_membership(client, project_membership_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get memberships from a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # user - [str]  A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/project_memberships_base.rb#36
    def get_project_memberships_for_project(client, project_gid: T.unsafe(nil), user: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/project_memberships_base.rb#10
    def inherited(base); end
  end
end

# A _project status_ is an update on the progress of a particular project, and is sent out to all project
# followers when created. These updates include both text describing the update and a color code intended to
# represent the overall state of the project: "green" for projects that are on track, "yellow" for projects
# at risk, and "red" for projects that are behind.
#
# Project statuses can be created and deleted, but not modified.
#
# source://asana//lib/asana/resources/project_status.rb#11
class Asana::Resources::ProjectStatus < ::Asana::Resources::ProjectStatusesBase
  # Returns the value of attribute color.
  #
  # source://asana//lib/asana/resources/project_status.rb#24
  def color; end

  # Returns the value of attribute created_at.
  #
  # source://asana//lib/asana/resources/project_status.rb#28
  def created_at; end

  # Returns the value of attribute created_by.
  #
  # source://asana//lib/asana/resources/project_status.rb#26
  def created_by; end

  # Deletes a specific, existing project status update.
  #
  # Returns an empty data record.
  #
  # source://asana//lib/asana/resources/project_status.rb#76
  def delete; end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/project_status.rb#14
  def gid; end

  # Returns the value of attribute html_text.
  #
  # source://asana//lib/asana/resources/project_status.rb#22
  def html_text; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/project_status.rb#16
  def resource_type; end

  # Returns the value of attribute text.
  #
  # source://asana//lib/asana/resources/project_status.rb#20
  def text; end

  # Returns the value of attribute title.
  #
  # source://asana//lib/asana/resources/project_status.rb#18
  def title; end

  class << self
    # Creates a new status update on the project.
    #
    # Returns the full record of the newly created project status update.
    #
    # project - [Gid] The project on which to create a status update.
    # text - [String] The text of the project status update.
    #
    # color - [String] The color to associate with the status update. Must be one of `"red"`, `"yellow"`, or `"green"`.
    #
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/project_status.rb#47
    def create(client, project: T.unsafe(nil), text: T.unsafe(nil), color: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Creates a new status update on the project.
    #
    # Returns the full record of the newly created project status update.
    #
    # project - [Gid] The project on which to create a status update.
    # text - [String] The text of the project status update.
    #
    # color - [String] The color to associate with the status update. Must be one of `"red"`, `"yellow"`, or `"green"`.
    #
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/project_status.rb#47
    def create_in_project(client, project: T.unsafe(nil), text: T.unsafe(nil), color: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Returns the complete record for a single status update.
    #
    # id - [Gid] The project status update to get.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/project_status.rb#67
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the compact project status update records for all updates on the project.
    #
    # project - [Gid] The project to find status updates for.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/project_status.rb#58
    def find_by_project(client, project: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/project_status.rb#32
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/project_statuses_base.rb#8
class Asana::Resources::ProjectStatusesBase < ::Asana::Resources::Resource
  class << self
    # Create a project status
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/project_statuses_base.rb#22
    def create_project_status_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Delete a project status
    #
    # project_status_gid - [str]  (required) The project status update to get.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/project_statuses_base.rb#34
    def delete_project_status(client, project_status_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a project status
    #
    # project_status_gid - [str]  (required) The project status update to get.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/project_statuses_base.rb#46
    def get_project_status(client, project_status_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get statuses from a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/project_statuses_base.rb#60
    def get_project_statuses_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/project_statuses_base.rb#10
    def inherited(base); end
  end
end

# source://asana//lib/asana/resources/gen/projects_base.rb#8
class Asana::Resources::ProjectsBase < ::Asana::Resources::Resource
  class << self
    # Add a custom field to a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#21
    def add_custom_field_setting_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Add followers to a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#34
    def add_followers_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Add users to a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#47
    def add_members_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#60
    def create_project(client, options: T.unsafe(nil), **data); end

    # Create a project in a team
    #
    # team_gid - [str]  (required) Globally unique identifier for the team.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#72
    def create_project_for_team(client, team_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Create a project in a workspace
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#85
    def create_project_for_workspace(client, workspace_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Delete a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#97
    def delete_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Duplicate a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#110
    def duplicate_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Get a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#122
    def get_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # workspace - [str]  The workspace or organization to filter projects on.
    # team - [str]  The team to filter projects on.
    # archived - [bool]  Only return projects whose `archived` field takes on the value of this parameter.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#139
    def get_projects(client, workspace: T.unsafe(nil), team: T.unsafe(nil), archived: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get projects a task is in
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#153
    def get_projects_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a team's projects
    #
    # team_gid - [str]  (required) Globally unique identifier for the team.
    # archived - [bool]  Only return projects whose `archived` field takes on the value of this parameter.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#168
    def get_projects_for_team(client, team_gid: T.unsafe(nil), archived: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get all projects in a workspace
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # archived - [bool]  Only return projects whose `archived` field takes on the value of this parameter.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#184
    def get_projects_for_workspace(client, workspace_gid: T.unsafe(nil), archived: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get task count of a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#199
    def get_task_counts_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#10
    def inherited(base); end

    # Remove a custom field from a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#211
    def remove_custom_field_setting_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Remove followers from a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#224
    def remove_followers_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Remove users from a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#237
    def remove_members_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Update a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to PUT
    #
    # source://asana//lib/asana/resources/gen/projects_base.rb#250
    def update_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end
  end
end

# Internal: Global registry of Resource subclasses. It provides lookup from
# singular and plural names to the actual class objects.
#
# Examples
#
#   class Unicorn < Asana::Resources::Resource
#     path '/unicorns'
#   end
#
#   Registry.lookup(:unicorn) # => Unicorn
#   Registry.lookup_many(:unicorns) # => Unicorn
#
# source://asana//lib/asana/resource_includes/registry.rb#18
module Asana::Resources::Registry
  class << self
    # Public: Looks up a resource class by its singular name.
    #
    # singular_name - [#to_s] the name of the resource, e.g :unicorn.
    #
    # Returns the resource class or {Asana::Resources::Resource}.
    #
    # source://asana//lib/asana/resource_includes/registry.rb#34
    def lookup(singular_name); end

    # Public: Looks up a resource class by its plural name.
    #
    # plural_name - [#to_s] the plural name of the resource, e.g :unicorns.
    #
    # Returns the resource class or {Asana::Resources::Resource}.
    #
    # source://asana//lib/asana/resource_includes/registry.rb#45
    def lookup_many(plural_name); end

    # Public: Registers a new resource class.
    #
    # resource_klass - [Class] the resource class.
    #
    # Returns nothing.
    #
    # source://asana//lib/asana/resource_includes/registry.rb#25
    def register(resource_klass); end

    # Internal: A set of Resource classes.
    #
    # Returns the Set, defaulting to the empty set.
    #
    # Note: this object is a mutable singleton, so it should not be accessed
    # from multiple threads.
    #
    # source://asana//lib/asana/resource_includes/registry.rb#57
    def resources; end
  end
end

# Public: The base resource class which provides some sugar over common
# resource functionality.
#
# source://asana//lib/asana/resource_includes/resource.rb#8
class Asana::Resources::Resource
  include ::Asana::Resources::ResponseHelper
  extend ::Asana::Resources::ResponseHelper

  # @return [Resource] a new instance of Resource
  #
  # source://asana//lib/asana/resource_includes/resource.rb#12
  def initialize(data, client: T.unsafe(nil)); end

  # source://asana//lib/asana/resource_includes/resource.rb#52
  def inspect; end

  # Internal: Proxies method calls to the data, wrapping it accordingly and
  # caching the result by defining a real reader method.
  #
  # Returns the value for the requested property.
  #
  # Raises a NoMethodError if the property doesn't exist.
  #
  # source://asana//lib/asana/resource_includes/resource.rb#33
  def method_missing(m, *args); end

  # If it has findById, it implements #refresh
  #
  # source://asana//lib/asana/resource_includes/resource.rb#21
  def refresh; end

  # Public:
  # Returns the raw Hash representation of the data.
  #
  # source://asana//lib/asana/resource_includes/resource.rb#48
  def to_h; end

  # source://asana//lib/asana/resource_includes/resource.rb#52
  def to_s; end

  private

  # Internal: Caches a property and a value by defining a reader method for
  # it.
  #
  # property - [#to_s] the property
  # value    - [Object] the corresponding value
  #
  # Returns the value.
  #
  # source://asana//lib/asana/resource_includes/resource.rb#72
  def cache(property, value); end

  # Internal: The Asana::Client instance.
  #
  # source://asana//lib/asana/resource_includes/resource.rb#61
  def client; end

  # source://asana//lib/asana/resource_includes/resource.rb#91
  def refresh_with(data); end

  # Internal: Guard for the method_missing proxy. Checks if the resource
  # actually has a specific piece of data at all.
  #
  # Returns true if the resource has the property, false otherwise.
  #
  # @return [Boolean]
  #
  # source://asana//lib/asana/resource_includes/resource.rb#42
  def respond_to_missing?(m, *_arg1); end

  # Internal: Wraps a value in a more useful class if possible, namely a
  # Resource or a Collection.
  #
  # Returns the wrapped value or the plain value if it couldn't be wrapped.
  #
  # source://asana//lib/asana/resource_includes/resource.rb#83
  def wrapped(value); end
end

# Internal: A helper to make response body parsing easier.
#
# source://asana//lib/asana/resource_includes/response_helper.rb#4
module Asana::Resources::ResponseHelper
  # source://asana//lib/asana/resource_includes/response_helper.rb#5
  def parse(response); end
end

# A _section_ is a subdivision of a project that groups tasks together. It can
# either be a header above a list of tasks in a list view or a column in a
# board view of a project.
#
# source://asana//lib/asana/resources/section.rb#8
class Asana::Resources::Section < ::Asana::Resources::SectionsBase
  # Add a task to a specific, existing section. This will remove the task from other sections of the project.
  #
  # The task will be inserted at the top of a section unless an `insert_before` or `insert_after` parameter is declared.
  #
  # This does not work for separators (tasks with the `resource_subtype` of section).
  #
  # insert_before - [Gid] Insert the given task immediately before the task specified by this parameter. Cannot be provided together with `insert_after`.
  # insert_after - [Gid] Insert the given task immediately after the task specified by this parameter. Cannot be provided together with `insert_before`.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/section.rb#101
  def add_task(insert_before: T.unsafe(nil), insert_after: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute created_at.
  #
  # source://asana//lib/asana/resources/section.rb#19
  def created_at; end

  # A specific, existing section can be deleted by making a DELETE request
  # on the URL for that section.
  #
  # Note that sections must be empty to be deleted.
  #
  # The last remaining section in a board view cannot be deleted.
  #
  # Returns an empty data block.
  #
  # source://asana//lib/asana/resources/section.rb#86
  def delete; end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/section.rb#11
  def gid; end

  # Move sections relative to each other in a board view. One of
  # `before_section` or `after_section` is required.
  #
  # Sections cannot be moved between projects.
  #
  # At this point in time, moving sections is not supported in list views, only board views.
  #
  # Returns an empty data block.
  #
  # project - [Gid] The project in which to reorder the given section
  # before_section - [Gid] Insert the given section immediately before the section specified by this parameter.
  # after_section - [Gid] Insert the given section immediately after the section specified by this parameter.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/section.rb#120
  def insert_in_project(project: T.unsafe(nil), before_section: T.unsafe(nil), after_section: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute name.
  #
  # source://asana//lib/asana/resources/section.rb#15
  def name; end

  # Returns the value of attribute project.
  #
  # source://asana//lib/asana/resources/section.rb#17
  def project; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/section.rb#13
  def resource_type; end

  # A specific, existing section can be updated by making a PUT request on
  # the URL for that project. Only the fields provided in the `data` block
  # will be updated; any unspecified fields will remain unchanged. (note that
  # at this time, the only field that can be updated is the `name` field.)
  #
  # When using this method, it is best to specify only those fields you wish
  # to change, or else you may overwrite changes made by another user since
  # you last retrieved the task.
  #
  # Returns the complete updated section record.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/section.rb#73
  def update(options: T.unsafe(nil), **data); end

  class << self
    # Creates a new section in a project.
    #
    # Returns the full record of the newly created section.
    #
    # project - [Gid] The project to create the section in
    # name - [String] The text to be displayed as the section name. This cannot be an empty string.
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/section.rb#35
    def create_in_project(client, project: T.unsafe(nil), name: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Returns the complete record for a single section.
    #
    # id - [Gid] The section to get.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/section.rb#54
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the compact records for all sections in the specified project.
    #
    # project - [Gid] The project to get sections from.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/section.rb#45
    def find_by_project(client, project: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/section.rb#23
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/sections_base.rb#8
class Asana::Resources::SectionsBase < ::Asana::Resources::Resource
  class << self
    # Add task to section
    #
    # section_gid - [str]  (required) The globally unique identifier for the section.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/sections_base.rb#22
    def add_task_for_section(client, section_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Create a section in a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/sections_base.rb#35
    def create_section_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Delete a section
    #
    # section_gid - [str]  (required) The globally unique identifier for the section.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/sections_base.rb#47
    def delete_section(client, section_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a section
    #
    # section_gid - [str]  (required) The globally unique identifier for the section.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/sections_base.rb#59
    def get_section(client, section_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get sections in a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/sections_base.rb#73
    def get_sections_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/sections_base.rb#10
    def inherited(base); end

    # Move or Insert sections
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/sections_base.rb#86
    def insert_section_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Update a section
    #
    # section_gid - [str]  (required) The globally unique identifier for the section.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to PUT
    #
    # source://asana//lib/asana/resources/gen/sections_base.rb#99
    def update_section(client, section_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end
  end
end

# source://asana//lib/asana/resources/gen/stories_base.rb#8
class Asana::Resources::StoriesBase < ::Asana::Resources::Resource
  class << self
    # Create a story on a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/stories_base.rb#22
    def create_story_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Delete a story
    #
    # story_gid - [str]  (required) Globally unique identifier for the story.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/stories_base.rb#34
    def delete_story(client, story_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get stories from a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/stories_base.rb#48
    def get_stories_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a story
    #
    # story_gid - [str]  (required) Globally unique identifier for the story.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/stories_base.rb#62
    def get_story(client, story_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/stories_base.rb#10
    def inherited(base); end

    # Update a story
    #
    # story_gid - [str]  (required) Globally unique identifier for the story.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to PUT
    #
    # source://asana//lib/asana/resources/gen/stories_base.rb#75
    def update_story(client, story_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end
  end
end

# A _story_ represents an activity associated with an object in the Asana
# system. Stories are generated by the system whenever users take actions such
# as creating or assigning tasks, or moving tasks between projects. _Comments_
# are also a form of user-generated story.
#
# source://asana//lib/asana/resources/story.rb#9
class Asana::Resources::Story < ::Asana::Resources::StoriesBase
  # Returns the value of attribute created_at.
  #
  # source://asana//lib/asana/resources/story.rb#18
  def created_at; end

  # Returns the value of attribute created_by.
  #
  # source://asana//lib/asana/resources/story.rb#20
  def created_by; end

  # Deletes a story. A user can only delete stories they have created. Returns an empty data record.
  #
  # source://asana//lib/asana/resources/story.rb#104
  def delete; end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/story.rb#12
  def gid; end

  # Returns the value of attribute liked.
  #
  # source://asana//lib/asana/resources/story.rb#22
  def hearted; end

  # Returns the value of attribute likes.
  #
  # source://asana//lib/asana/resources/story.rb#25
  def hearts; end

  # Returns the value of attribute html_text.
  #
  # source://asana//lib/asana/resources/story.rb#32
  def html_text; end

  # Returns the value of attribute is_edited.
  #
  # source://asana//lib/asana/resources/story.rb#38
  def is_edited; end

  # Returns the value of attribute is_pinned.
  #
  # source://asana//lib/asana/resources/story.rb#36
  def is_pinned; end

  # Returns the value of attribute liked.
  #
  # source://asana//lib/asana/resources/story.rb#22
  def liked; end

  # Returns the value of attribute likes.
  #
  # source://asana//lib/asana/resources/story.rb#25
  def likes; end

  # Returns the value of attribute num_likes.
  #
  # source://asana//lib/asana/resources/story.rb#28
  def num_likes; end

  # Returns the value of attribute resource_subtype.
  #
  # source://asana//lib/asana/resources/story.rb#16
  def resource_subtype; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/story.rb#14
  def resource_type; end

  # Returns the value of attribute source.
  #
  # source://asana//lib/asana/resources/story.rb#40
  def source; end

  # Returns the value of attribute target.
  #
  # source://asana//lib/asana/resources/story.rb#34
  def target; end

  # Returns the value of attribute text.
  #
  # source://asana//lib/asana/resources/story.rb#30
  def text; end

  # Returns the value of attribute type.
  #
  # source://asana//lib/asana/resources/story.rb#42
  def type; end

  # Updates the story and returns the full record for the updated story.
  # Only comment stories can have their text updated, and only comment stories and
  # attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
  #
  # text - [String] The plain text with which to update the comment.
  #
  # html_text - [String] The rich text with which to update the comment.
  # is_pinned - [Boolean] Whether the story should be pinned on the resource.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/story.rb#98
  def update(text: T.unsafe(nil), html_text: T.unsafe(nil), is_pinned: T.unsafe(nil), options: T.unsafe(nil), **data); end

  class << self
    # Adds a comment to a task. The comment will be authored by the
    # currently authenticated user, and timestamped when the server receives
    # the request.
    #
    # Returns the full record for the new story added to the task.
    #
    # task - [Id] Globally unique identifier for the task.
    #
    # text - [String] The plain text of the comment to add.
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/story.rb#82
    def create_on_task(client, task: T.unsafe(nil), text: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Returns the full record for a single story.
    #
    # id - [Gid] Globally unique identifier for the story.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/story.rb#66
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the compact records for all stories on the task.
    #
    # task - [Gid] Globally unique identifier for the task.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/story.rb#56
    def find_by_task(client, task: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/story.rb#46
    def plural_name; end
  end
end

# A _tag_ is a label that can be attached to any task in Asana. It exists in a
# single workspace or organization.
#
# Tags have some metadata associated with them, but it is possible that we will
# simplify them in the future so it is not encouraged to rely too heavily on it.
# Unlike projects, tags do not provide any ordering on the tasks they
# are associated with.
#
# source://asana//lib/asana/resources/tag.rb#12
class Asana::Resources::Tag < ::Asana::Resources::TagsBase
  # Returns the value of attribute color.
  #
  # source://asana//lib/asana/resources/tag.rb#25
  def color; end

  # Returns the value of attribute created_at.
  #
  # source://asana//lib/asana/resources/tag.rb#19
  def created_at; end

  # A specific, existing tag can be deleted by making a DELETE request
  # on the URL for that tag.
  #
  # Returns an empty data record.
  #
  # source://asana//lib/asana/resources/tag.rb#124
  def delete; end

  # Returns the value of attribute followers.
  #
  # source://asana//lib/asana/resources/tag.rb#21
  def followers; end

  # Returns the compact task records for all tasks with the given tag.
  # Tasks can have more than one tag at a time.
  #
  # per_page - [Integer] the number of records to fetch per page.
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/tag.rb#134
  def get_tasks_with_tag(per_page: T.unsafe(nil), options: T.unsafe(nil)); end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/tag.rb#15
  def gid; end

  # Returns the value of attribute name.
  #
  # source://asana//lib/asana/resources/tag.rb#23
  def name; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/tag.rb#17
  def resource_type; end

  # Updates the properties of a tag. Only the fields provided in the `data`
  # block will be updated; any unspecified fields will remain unchanged.
  #
  # When using this method, it is best to specify only those fields you wish
  # to change, or else you may overwrite changes made by another user since
  # you last retrieved the task.
  #
  # Returns the complete updated tag record.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/tag.rb#115
  def update(options: T.unsafe(nil), **data); end

  # Returns the value of attribute workspace.
  #
  # source://asana//lib/asana/resources/tag.rb#27
  def workspace; end

  class << self
    # Creates a new tag in a workspace or organization.
    #
    # Every tag is required to be created in a specific workspace or
    # organization, and this cannot be changed once set. Note that you can use
    # the `workspace` parameter regardless of whether or not it is an
    # organization.
    #
    # Returns the full record of the newly created tag.
    #
    # workspace - [Gid] The workspace or organization to create the tag in.
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/tag.rb#47
    def create(client, workspace: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Creates a new tag in a workspace or organization.
    #
    # Every tag is required to be created in a specific workspace or
    # organization, and this cannot be changed once set. Note that you can use
    # the `workspace` parameter regardless of whether or not it is an
    # organization.
    #
    # Returns the full record of the newly created tag.
    #
    # workspace - [Gid] The workspace or organization to create the tag in.
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/tag.rb#64
    def create_in_workspace(client, workspace: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Returns the compact tag records for some filtered set of tags.
    # Use one or more of the parameters provided to filter the tags returned.
    #
    # workspace - [Gid] The workspace or organization to filter tags on.
    # team - [Gid] The team to filter tags on.
    # archived - [Boolean] Only return tags whose `archived` field takes on the value of
    # this parameter.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/tag.rb#88
    def find_all(client, workspace: T.unsafe(nil), team: T.unsafe(nil), archived: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the complete tag record for a single tag.
    #
    # id - [Gid] The tag to get.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/tag.rb#73
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the compact tag records for all tags in the workspace.
    #
    # workspace - [Gid] The workspace or organization to find tags in.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/tag.rb#98
    def find_by_workspace(client, workspace: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/tag.rb#31
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/tags_base.rb#8
class Asana::Resources::TagsBase < ::Asana::Resources::Resource
  class << self
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tags_base.rb#22
    def create_tag(client, options: T.unsafe(nil), **data); end

    # Create a tag in a workspace
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tags_base.rb#34
    def create_tag_for_workspace(client, workspace_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Delete a tag
    #
    # tag_gid - [str]  (required) Globally unique identifier for the tag.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tags_base.rb#48
    def delete_tag(client, tag_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a tag
    #
    # tag_gid - [str]  (required) Globally unique identifier for the tag.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tags_base.rb#62
    def get_tag(client, tag_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # workspace - [str]  The workspace to filter tags on.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tags_base.rb#77
    def get_tags(client, workspace: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a task's tags
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tags_base.rb#91
    def get_tags_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get tags in a workspace
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tags_base.rb#105
    def get_tags_for_workspace(client, workspace_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/tags_base.rb#10
    def inherited(base); end

    # Update a tag
    #
    # tag_gid - [str]  (required) Globally unique identifier for the tag.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to PUT
    #
    # source://asana//lib/asana/resources/gen/tags_base.rb#120
    def update_tag(client, tag_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end
  end
end

# The _task_ is the basic object around which many operations in Asana are
# centered. In the Asana application, multiple tasks populate the middle pane
# according to some view parameters, and the set of selected tasks determines
# the more detailed information presented in the details pane.
#
# source://asana//lib/asana/resources/task.rb#9
class Asana::Resources::Task < ::Asana::Resources::TasksBase
  include ::Asana::Resources::AttachmentUploading
  include ::Asana::Resources::EventSubscription

  # Adds a comment to a task. The comment will be authored by the
  # currently authenticated user, and timestamped when the server receives
  # the request.
  #
  # Returns the full record for the new story added to the task.
  #
  # text - [String] The plain text of the comment to add.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#503
  def add_comment(text: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Marks a set of tasks as dependencies of this task, if they are not
  # already dependencies. *A task can have at most 15 dependencies.*
  #
  # dependencies - [Array] An array of task IDs that this task should depend on.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#302
  def add_dependencies(dependencies: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Marks a set of tasks as dependents of this task, if they are not already
  # dependents. *A task can have at most 30 dependents.*
  #
  # dependents - [Array] An array of task IDs that should depend on this task.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#313
  def add_dependents(dependents: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Adds each of the specified followers to the task, if they are not already
  # following. Returns the complete, updated record for the affected task.
  #
  # followers - [Array] An array of followers to add to the task.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#344
  def add_followers(followers: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # project - [Gid] The project to add the task to.
  # insert_after - [Gid] A task in the project to insert the task after, or `null` to
  # insert at the beginning of the list.
  #
  # insert_before - [Gid] A task in the project to insert the task before, or `null` to
  # insert at the end of the list.
  #
  # section - [Gid] A section in the project to insert the task into. The task will be
  # inserted at the bottom of the section.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#397
  def add_project(project: T.unsafe(nil), insert_after: T.unsafe(nil), insert_before: T.unsafe(nil), section: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Creates a new subtask and adds it to the parent task. Returns the full record
  # for the newly created subtask.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#460
  def add_subtask(options: T.unsafe(nil), **data); end

  # Adds a tag to a task. Returns an empty data block.
  #
  # tag - [Gid] The tag to add to the task.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#431
  def add_tag(tag: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute assignee.
  #
  # source://asana//lib/asana/resources/task.rb#22
  def assignee; end

  # Returns the value of attribute assignee_status.
  #
  # source://asana//lib/asana/resources/task.rb#24
  def assignee_status; end

  # Returns the value of attribute completed.
  #
  # source://asana//lib/asana/resources/task.rb#28
  def completed; end

  # Returns the value of attribute completed_at.
  #
  # source://asana//lib/asana/resources/task.rb#30
  def completed_at; end

  # Returns the value of attribute created_at.
  #
  # source://asana//lib/asana/resources/task.rb#26
  def created_at; end

  # Returns the value of attribute custom_fields.
  #
  # source://asana//lib/asana/resources/task.rb#32
  def custom_fields; end

  # A specific, existing task can be deleted by making a DELETE request on the
  # URL for that task. Deleted tasks go into the "trash" of the user making
  # the delete request. Tasks can be recovered from the trash within a period
  # of 30 days; afterward they are completely removed from the system.
  #
  # Returns an empty data record.
  #
  # source://asana//lib/asana/resources/task.rb#263
  def delete; end

  # Returns the compact representations of all of the dependencies of a task.
  #
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/task.rb#283
  def dependencies(options: T.unsafe(nil)); end

  # Returns the compact representations of all of the dependents of a task.
  #
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/task.rb#291
  def dependents(options: T.unsafe(nil)); end

  # Returns the value of attribute due_at.
  #
  # source://asana//lib/asana/resources/task.rb#40
  def due_at; end

  # Returns the value of attribute due_on.
  #
  # source://asana//lib/asana/resources/task.rb#38
  def due_on; end

  # Creates and returns a job that will asynchronously handle the duplication.
  #
  # name - [String] The name of the new task.
  # include - [Array] The fields that will be duplicated to the new task.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#275
  def duplicate_task(name: T.unsafe(nil), include: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute external.
  #
  # source://asana//lib/asana/resources/task.rb#42
  def external; end

  # Returns the value of attribute followers.
  #
  # source://asana//lib/asana/resources/task.rb#44
  def followers; end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/task.rb#16
  def gid; end

  # Returns the value of attribute html_notes.
  #
  # source://asana//lib/asana/resources/task.rb#60
  def html_notes; end

  # Insert or reorder tasks in a user's My Tasks list. If the task was not
  # assigned to the owner of the user task list it will be reassigned when
  # this endpoint is called. If neither `insert_before` nor `insert_after`
  # are provided the task will be inserted at the top of the assignee's
  # inbox.
  #
  # Returns an empty data block.
  #
  # user_task_list - [Gid] Globally unique identifier for the user task list.
  #
  # insert_before - [Gid] Insert the task before the task specified by this field. The inserted
  # task will inherit the `assignee_status` of this task. `insert_before`
  # and `insert_after` parameters cannot both be specified.
  #
  # insert_after - [Gid] Insert the task after the task specified by this field. The inserted
  # task will inherit the `assignee_status` of this task. `insert_before`
  # and `insert_after` parameters cannot both be specified.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#528
  def insert_in_user_task_list(user_task_list: T.unsafe(nil), insert_before: T.unsafe(nil), insert_after: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute is_rendered_as_separator.
  #
  # source://asana//lib/asana/resources/task.rb#46
  def is_rendered_as_separator; end

  # Returns the value of attribute liked.
  #
  # source://asana//lib/asana/resources/task.rb#48
  def liked; end

  # Returns the value of attribute likes.
  #
  # source://asana//lib/asana/resources/task.rb#50
  def likes; end

  # Returns the value of attribute memberships.
  #
  # source://asana//lib/asana/resources/task.rb#52
  def memberships; end

  # Returns the value of attribute modified_at.
  #
  # source://asana//lib/asana/resources/task.rb#54
  def modified_at; end

  # Returns the value of attribute name.
  #
  # source://asana//lib/asana/resources/task.rb#56
  def name; end

  # Returns the value of attribute notes.
  #
  # source://asana//lib/asana/resources/task.rb#58
  def notes; end

  # Returns the value of attribute num_likes.
  #
  # source://asana//lib/asana/resources/task.rb#62
  def num_likes; end

  # Returns the value of attribute num_subtasks.
  #
  # source://asana//lib/asana/resources/task.rb#64
  def num_subtasks; end

  # Returns the value of attribute parent.
  #
  # source://asana//lib/asana/resources/task.rb#66
  def parent; end

  # Returns a compact representation of all of the projects the task is in.
  #
  # per_page - [Integer] the number of records to fetch per page.
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/task.rb#364
  def projects(per_page: T.unsafe(nil), options: T.unsafe(nil)); end

  # Unlinks a set of dependencies from this task.
  #
  # dependencies - [Array] An array of task IDs to remove as dependencies.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#323
  def remove_dependencies(dependencies: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Unlinks a set of dependents from this task.
  #
  # dependents - [Array] An array of task IDs to remove as dependents.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#333
  def remove_dependents(dependents: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Removes each of the specified followers from the task if they are
  # following. Returns the complete, updated record for the affected task.
  #
  # followers - [Array] An array of followers to remove from the task.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#355
  def remove_followers(followers: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Removes the task from the specified project. The task will still exist
  # in the system, but it will not be in the project anymore.
  #
  # Returns an empty data block.
  #
  # project - [Gid] The project to remove the task from.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#412
  def remove_project(project: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Removes a tag from the task. Returns an empty data block.
  #
  # tag - [Gid] The tag to remove from the task.
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#441
  def remove_tag(tag: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute resource_subtype.
  #
  # source://asana//lib/asana/resources/task.rb#20
  def resource_subtype; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/task.rb#18
  def resource_type; end

  # Changes the parent of a task. Each task may only be a subtask of a single
  # parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`,
  # at most one of those two options can be specified, and they must already be subtasks
  # of the parent.
  #
  # parent - [Gid] The new parent of the task, or `null` for no parent.
  # insert_after - [Gid] A subtask of the parent to insert the task after, or `null` to
  # insert at the beginning of the list.
  #
  # insert_before - [Gid] A subtask of the parent to insert the task before, or `null` to
  # insert at the end of the list.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#479
  def set_parent(parent: T.unsafe(nil), insert_after: T.unsafe(nil), insert_before: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute start_on.
  #
  # source://asana//lib/asana/resources/task.rb#70
  def start_on; end

  # Returns a compact representation of all of the stories on the task.
  #
  # per_page - [Integer] the number of records to fetch per page.
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/task.rb#489
  def stories(per_page: T.unsafe(nil), options: T.unsafe(nil)); end

  # Returns a compact representation of all of the subtasks of a task.
  #
  # per_page - [Integer] the number of records to fetch per page.
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/task.rb#450
  def subtasks(per_page: T.unsafe(nil), options: T.unsafe(nil)); end

  # Returns a compact representation of all of the tags the task has.
  #
  # per_page - [Integer] the number of records to fetch per page.
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/task.rb#421
  def tags(per_page: T.unsafe(nil), options: T.unsafe(nil)); end

  # A specific, existing task can be updated by making a PUT request on the
  # URL for that task. Only the fields provided in the `data` block will be
  # updated; any unspecified fields will remain unchanged.
  #
  # When using this method, it is best to specify only those fields you wish
  # to change, or else you may overwrite changes made by another user since
  # you last retrieved the task.
  #
  # Returns the complete updated task record.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/task.rb#252
  def update(options: T.unsafe(nil), **data); end

  # Returns the value of attribute workspace.
  #
  # source://asana//lib/asana/resources/task.rb#72
  def workspace; end

  class << self
    # Creating a new task is as easy as POSTing to the `/tasks` endpoint
    # with a data block containing the fields you'd like to set on the task.
    # Any unspecified fields will take on default values.
    #
    # Every task is required to be created in a specific workspace, and this
    # workspace cannot be changed once set. The workspace need not be set
    # explicitly if you specify `projects` or a `parent` task instead.
    #
    # `projects` can be a comma separated list of projects, or just a single
    # project the task should belong to.
    #
    # workspace - [Gid] The workspace to create a task in.
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/task.rb#96
    def create(client, workspace: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Creating a new task is as easy as POSTing to the `/tasks` endpoint
    # with a data block containing the fields you'd like to set on the task.
    # Any unspecified fields will take on default values.
    #
    # Every task is required to be created in a specific workspace, and this
    # workspace cannot be changed once set. The workspace need not be set
    # explicitly if you specify a `project` or a `parent` task instead.
    #
    # workspace - [Gid] The workspace to create a task in.
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/task.rb#112
    def create_in_workspace(client, workspace: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Returns the compact task records for some filtered set of tasks. Use one
    # or more of the parameters provided to filter the tasks returned. You must
    # specify a `project`, `section`, `tag`, or `user_task_list` if you do not
    # specify `assignee` and `workspace`.
    #
    # assignee - [String] The assignee to filter tasks on.
    # workspace - [Gid] The workspace or organization to filter tasks on.
    # project - [Gid] The project to filter tasks on.
    # section - [Gid] The section to filter tasks on.
    # tag - [Gid] The tag to filter tasks on.
    # user_task_list - [Gid] The user task list to filter tasks on.
    # completed_since - [String] Only return tasks that are either incomplete or that have been
    # completed since this time.
    #
    # modified_since - [String] Only return tasks that have been modified since the given time.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    # Notes:
    #
    # If you specify `assignee`, you must also specify the `workspace` to filter on.
    #
    # If you specify `workspace`, you must also specify the `assignee` to filter on.
    #
    # Currently, this is only supported in board views.
    #
    # A task is considered "modified" if any of its properties change,
    # or associations between it and other objects are modified (e.g.
    # a task being added to a project). A task is not considered modified
    # just because another object it is associated with (e.g. a subtask)
    # is modified. Actions that count as modifying the task include
    # assigning, renaming, completing, and adding stories.
    #
    # source://asana//lib/asana/resources/task.rb#218
    def find_all(client, assignee: T.unsafe(nil), workspace: T.unsafe(nil), project: T.unsafe(nil), section: T.unsafe(nil), tag: T.unsafe(nil), user_task_list: T.unsafe(nil), completed_since: T.unsafe(nil), modified_since: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the complete task record for a single task.
    #
    # id - [Gid] The task to get.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/task.rb#121
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the compact task records for all tasks within the given project,
    # ordered by their priority within the project.
    #
    # project - [Gid] The project in which to search for tasks.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/task.rb#132
    def find_by_project(client, project: T.unsafe(nil), projectId: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # <b>Board view only:</b> Returns the compact section records for all tasks within the given section.
    #
    # section - [Gid] The section in which to search for tasks.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/task.rb#152
    def find_by_section(client, section: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the compact task records for all tasks with the given tag.
    #
    # tag - [Gid] The tag in which to search for tasks.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/task.rb#142
    def find_by_tag(client, tag: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the compact list of tasks in a user's My Tasks list. The returned
    # tasks will be in order within each assignee status group of `Inbox`,
    # `Today`, and `Upcoming`.
    #
    # **Note:** tasks in `Later` have a different ordering in the Asana web app
    # than the other assignee status groups; this endpoint will still return
    # them in list order in `Later` (differently than they show up in Asana,
    # but the same order as in Asana's mobile apps).
    #
    # **Note:** Access control is enforced for this endpoint as with all Asana
    # API endpoints, meaning a user's private tasks will be filtered out if the
    # API-authenticated user does not have access to them.
    #
    # **Note:** Both complete and incomplete tasks are returned by default
    # unless they are filtered out (for example, setting `completed_since=now`
    # will return only incomplete tasks, which is the default view for "My
    # Tasks" in Asana.)
    #
    # user_task_list - [Gid] The user task list in which to search for tasks.
    # completed_since - [String] Only return tasks that are either incomplete or that have been
    # completed since this time.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/task.rb#181
    def find_by_user_task_list(client, user_task_list: T.unsafe(nil), completed_since: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/task.rb#78
    def plural_name; end

    # The search endpoint allows you to build complex queries to find and fetch exactly the data you need from Asana. For a more comprehensive description of all the query parameters and limitations of this endpoint, see our [long-form documentation](/developers/documentation/getting-started/search-api) for this feature.
    #
    # workspace - [Gid] The workspace or organization in which to search for tasks.
    # resource_subtype - [Enum] Filters results by the task's resource_subtype.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/task.rb#230
    def search(client, workspace: T.unsafe(nil), resource_subtype: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # The search endpoint allows you to build complex queries to find and fetch exactly the data you need from Asana. For a more comprehensive description of all the query parameters and limitations of this endpoint, see our [long-form documentation](/developers/documentation/getting-started/search-api) for this feature.
    #
    # workspace - [Gid] The workspace or organization in which to search for tasks.
    # resource_subtype - [Enum] Filters results by the task's resource_subtype.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/task.rb#230
    def search_in_workspace(client, workspace: T.unsafe(nil), resource_subtype: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end
  end
end

# source://asana//lib/asana/resources/gen/tasks_base.rb#8
class Asana::Resources::TasksBase < ::Asana::Resources::Resource
  class << self
    # Set dependencies for a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#22
    def add_dependencies_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Set dependents for a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#35
    def add_dependents_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Add followers to a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#48
    def add_followers_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Add a project to a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#61
    def add_project_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Add a tag to a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#74
    def add_tag_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Create a subtask
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#87
    def create_subtask_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#100
    def create_task(client, options: T.unsafe(nil), **data); end

    # Delete a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#111
    def delete_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Duplicate a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#124
    def duplicate_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Get dependencies from a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#138
    def get_dependencies_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get dependents from a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#152
    def get_dependents_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get subtasks from a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#166
    def get_subtasks_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#178
    def get_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # assignee - [str]  The assignee to filter tasks on. *Note: If you specify `assignee`, you must also specify the `workspace` to filter on.*
    # project - [str]  The project to filter tasks on.
    # section - [str]  The section to filter tasks on. *Note: Currently, this is only supported in board views.*
    # workspace - [str]  The workspace to filter tasks on. *Note: If you specify `workspace`, you must also specify the `assignee` to filter on.*
    # completed_since - [datetime]  Only return tasks that are either incomplete or that have been completed since this time.
    # modified_since - [datetime]  Only return tasks that have been modified since the given time.  *Note: A task is considered “modified” if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.*
    # per_page - [Integer] the number of records to fetch per page.  Defaults to 20.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#197
    def get_tasks(client, assignee: T.unsafe(nil), project: T.unsafe(nil), section: T.unsafe(nil), workspace: T.unsafe(nil), completed_since: T.unsafe(nil), per_page: T.unsafe(nil), modified_since: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get tasks from a project
    #
    # project_gid - [str]  (required) Globally unique identifier for the project.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#211
    def get_tasks_for_project(client, project_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get tasks from a section
    #
    # section_gid - [str]  (required) The globally unique identifier for the section.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#225
    def get_tasks_for_section(client, section_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get tasks from a tag
    #
    # tag_gid - [str]  (required) Globally unique identifier for the tag.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#239
    def get_tasks_for_tag(client, tag_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get tasks from a user task list
    #
    # user_task_list_gid - [str]  (required) Globally unique identifier for the user task list.
    # completed_since - [str]  Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#254
    def get_tasks_for_user_task_list(client, user_task_list_gid: T.unsafe(nil), completed_since: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#10
    def inherited(base); end

    # Unlink dependencies from a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#268
    def remove_dependencies_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Unlink dependents from a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#281
    def remove_dependents_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Remove followers from a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#294
    def remove_follower_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Remove a project from a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#307
    def remove_project_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Remove a tag from a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#320
    def remove_tag_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Search tasks in a workspace
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # text - [str]  Performs full-text search on both task name and description
    # resource_subtype - [str]  Filters results by the task's resource_subtype
    # assignee_any - [str]  Comma-separated list of user identifiers
    # assignee_not - [str]  Comma-separated list of user identifiers
    # portfolios_any - [str]  Comma-separated list of portfolio IDs
    # projects_any - [str]  Comma-separated list of project IDs
    # projects_not - [str]  Comma-separated list of project IDs
    # projects_all - [str]  Comma-separated list of project IDs
    # sections_any - [str]  Comma-separated list of section or column IDs
    # sections_not - [str]  Comma-separated list of section or column IDs
    # sections_all - [str]  Comma-separated list of section or column IDs
    # tags_any - [str]  Comma-separated list of tag IDs
    # tags_not - [str]  Comma-separated list of tag IDs
    # tags_all - [str]  Comma-separated list of tag IDs
    # teams_any - [str]  Comma-separated list of team IDs
    # followers_any - [str]  Comma-separated list of user identifiers
    # followers_not - [str]  Comma-separated list of user identifiers
    # created_by_any - [str]  Comma-separated list of user identifiers
    # created_by_not - [str]  Comma-separated list of user identifiers
    # assigned_by_any - [str]  Comma-separated list of user identifiers
    # assigned_by_not - [str]  Comma-separated list of user identifiers
    # liked_by_any - [str]  Comma-separated list of user identifiers
    # liked_by_not - [str]  Comma-separated list of user identifiers
    # commented_on_by_any - [str]  Comma-separated list of user identifiers
    # commented_on_by_not - [str]  Comma-separated list of user identifiers
    # custom_fields.{gid}.is_set - [bool]  Filter to custom field set or not
    # custom_fields.{gid}.value - [str/int]  Filter to custom field where value (string/number/enum option ID) matches
    # custom_fields.{gid}.starts_with - [str]  Filter to custom field where text value has this prefix
    # custom_fields.{gid}.ends_with - [str]  Filter to custom field where text value has this suffix
    # custom_fields.{gid}.contains - [str]  Filter to custom field where text value has substring
    # custom_fields.{gid}.less_than - [int]  Filter to custom field where number value is lower
    # custom_fields.{gid}.greater_than - [int]  Filter to custom field where number value is higher
    # due_on_before - [date]  ISO 8601 date string
    # due_on_after - [date]  ISO 8601 date string
    # due_on - [date]  ISO 8601 date string or `null`
    # due_at_before - [datetime]  ISO 8601 datetime string
    # due_at_after - [datetime]  ISO 8601 datetime string
    # start_on_before - [date]  ISO 8601 date string
    # start_on_after - [date]  ISO 8601 date string
    # start_on - [date]  ISO 8601 date string or `null`
    # created_on_before - [date]  ISO 8601 date string
    # created_on_after - [date]  ISO 8601 date string
    # created_on - [date]  ISO 8601 date string or `null`
    # created_at_before - [datetime]  ISO 8601 datetime string
    # created_at_after - [datetime]  ISO 8601 datetime string
    # completed_on_before - [date]  ISO 8601 date string
    # completed_on_after - [date]  ISO 8601 date string
    # completed_on - [date]  ISO 8601 date string or `null`
    # completed_at_before - [datetime]  ISO 8601 datetime string
    # completed_at_after - [datetime]  ISO 8601 datetime string
    # modified_on_before - [date]  ISO 8601 date string
    # modified_on_after - [date]  ISO 8601 date string
    # modified_on - [date]  ISO 8601 date string or `null`
    # modified_at_before - [datetime]  ISO 8601 datetime string
    # modified_at_after - [datetime]  ISO 8601 datetime string
    # is_blocking - [bool]  Filter to incomplete tasks with dependents
    # is_blocked - [bool]  Filter to tasks with incomplete dependencies
    # has_attachment - [bool]  Filter to tasks with attachments
    # completed - [bool]  Filter to completed tasks
    # is_subtask - [bool]  Filter to subtasks
    # sort_by - [str]  One of `due_date`, `created_at`, `completed_at`, `likes`, or `modified_at`, defaults to `modified_at`
    # sort_ascending - [bool]  Default `false`
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#394
    def search_tasks_for_workspace(client, workspace_gid: T.unsafe(nil), text: T.unsafe(nil), resource_subtype: T.unsafe(nil), assignee_any: T.unsafe(nil), assignee_not: T.unsafe(nil), portfolios_any: T.unsafe(nil), projects_any: T.unsafe(nil), projects_not: T.unsafe(nil), projects_all: T.unsafe(nil), sections_any: T.unsafe(nil), sections_not: T.unsafe(nil), sections_all: T.unsafe(nil), tags_any: T.unsafe(nil), tags_not: T.unsafe(nil), tags_all: T.unsafe(nil), teams_any: T.unsafe(nil), followers_any: T.unsafe(nil), followers_not: T.unsafe(nil), created_by_any: T.unsafe(nil), created_by_not: T.unsafe(nil), assigned_by_any: T.unsafe(nil), assigned_by_not: T.unsafe(nil), liked_by_any: T.unsafe(nil), liked_by_not: T.unsafe(nil), commented_on_by_any: T.unsafe(nil), commented_on_by_not: T.unsafe(nil), due_on_before: T.unsafe(nil), due_on_after: T.unsafe(nil), due_on: T.unsafe(nil), due_at_before: T.unsafe(nil), due_at_after: T.unsafe(nil), start_on_before: T.unsafe(nil), start_on_after: T.unsafe(nil), start_on: T.unsafe(nil), created_on_before: T.unsafe(nil), created_on_after: T.unsafe(nil), created_on: T.unsafe(nil), created_at_before: T.unsafe(nil), created_at_after: T.unsafe(nil), completed_on_before: T.unsafe(nil), completed_on_after: T.unsafe(nil), completed_on: T.unsafe(nil), completed_at_before: T.unsafe(nil), completed_at_after: T.unsafe(nil), modified_on_before: T.unsafe(nil), modified_on_after: T.unsafe(nil), modified_on: T.unsafe(nil), modified_at_before: T.unsafe(nil), modified_at_after: T.unsafe(nil), is_blocking: T.unsafe(nil), is_blocked: T.unsafe(nil), has_attachment: T.unsafe(nil), completed: T.unsafe(nil), is_subtask: T.unsafe(nil), sort_by: T.unsafe(nil), sort_ascending: T.unsafe(nil), options: T.unsafe(nil), **kwargs); end

    # Set the parent of a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#415
    def set_parent_for_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Update a task
    #
    # task_gid - [str]  (required) The task to operate on.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to PUT
    #
    # source://asana//lib/asana/resources/gen/tasks_base.rb#428
    def update_task(client, task_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end
  end
end

# A _team_ is used to group related projects and people together within an
# organization. Each project in an organization is associated with a team.
#
# source://asana//lib/asana/resources/team.rb#7
class Asana::Resources::Team < ::Asana::Resources::TeamsBase
  # The user making this call must be a member of the team in order to add others.
  # The user to add must exist in the same organization as the team in order to be added.
  # The user to add can be referenced by their globally unique user ID or their email address.
  # Returns the full user record for the added user.
  #
  # user - [String] An identifier for the user. Can be one of an email address,
  # the globally unique identifier for the user, or the keyword `me`
  # to indicate the current user making the request.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/team.rb#85
  def add_user(user: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute description.
  #
  # source://asana//lib/asana/resources/team.rb#16
  def description; end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/team.rb#10
  def gid; end

  # Returns the value of attribute html_description.
  #
  # source://asana//lib/asana/resources/team.rb#18
  def html_description; end

  # Returns the value of attribute name.
  #
  # source://asana//lib/asana/resources/team.rb#14
  def name; end

  # Returns the value of attribute organization.
  #
  # source://asana//lib/asana/resources/team.rb#20
  def organization; end

  # The user to remove can be referenced by their globally unique user ID or their email address.
  # Removes the user from the specified team. Returns an empty data record.
  #
  # user - [String] An identifier for the user. Can be one of an email address,
  # the globally unique identifier for the user, or the keyword `me`
  # to indicate the current user making the request.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/team.rb#99
  def remove_user(user: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/team.rb#12
  def resource_type; end

  # Returns the compact records for all users that are members of the team.
  #
  # per_page - [Integer] the number of records to fetch per page.
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/team.rb#69
  def users(per_page: T.unsafe(nil), options: T.unsafe(nil)); end

  class << self
    # Returns the full record for a single team.
    #
    # id - [Id] Globally unique identifier for the team.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/team.rb#33
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the compact records for all teams in the organization visible to
    # the authorized user.
    #
    # organization - [Id] Globally unique identifier for the workspace or organization.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/team.rb#45
    def find_by_organization(client, organization: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the compact records for all teams to which user is assigned.
    #
    # user - [String] An identifier for the user. Can be one of an email address,
    # the globally unique identifier for the user, or the keyword `me`
    # to indicate the current user making the request.
    #
    # organization - [Id] The workspace or organization to filter teams on.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/team.rb#59
    def find_by_user(client, user: T.unsafe(nil), organization: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/team.rb#24
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/team_membership.rb#5
class Asana::Resources::TeamMembership < ::Asana::Resources::TeamMembershipsBase
  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/team_membership.rb#8
  def gid; end

  # Returns the value of attribute is_guest.
  #
  # source://asana//lib/asana/resources/team_membership.rb#16
  def is_guest; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/team_membership.rb#10
  def resource_type; end

  # Returns the value of attribute team.
  #
  # source://asana//lib/asana/resources/team_membership.rb#14
  def team; end

  # Returns the value of attribute user.
  #
  # source://asana//lib/asana/resources/team_membership.rb#12
  def user; end

  class << self
    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/team_membership.rb#20
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/team_memberships_base.rb#8
class Asana::Resources::TeamMembershipsBase < ::Asana::Resources::Resource
  class << self
    # Get a team membership
    #
    # team_membership_gid - [str]  (required)
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/team_memberships_base.rb#21
    def get_team_membership(client, team_membership_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # team - [str]  Globally unique identifier for the team.
    # user - [str]  A string identifying a user. This can either be the string \"me\", an email, or the gid of a user. This parameter must be used with the workspace parameter.
    # workspace - [str]  Globally unique identifier for the workspace. This parameter must be used with the user parameter.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/team_memberships_base.rb#38
    def get_team_memberships(client, team: T.unsafe(nil), user: T.unsafe(nil), workspace: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get memberships from a team
    #
    # team_gid - [str]  (required) Globally unique identifier for the team.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/team_memberships_base.rb#52
    def get_team_memberships_for_team(client, team_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get memberships from a user
    #
    # user_gid - [str]  (required) A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    # workspace - [str]  (required) Globally unique identifier for the workspace.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/team_memberships_base.rb#67
    def get_team_memberships_for_user(client, user_gid: T.unsafe(nil), workspace: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/team_memberships_base.rb#10
    def inherited(base); end
  end
end

# source://asana//lib/asana/resources/gen/teams_base.rb#8
class Asana::Resources::TeamsBase < ::Asana::Resources::Resource
  class << self
    # Add a user to a team
    #
    # team_gid - [str]  (required) Globally unique identifier for the team.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/teams_base.rb#22
    def add_user_for_team(client, team_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/teams_base.rb#37
    def create_team(client, options: T.unsafe(nil), **data); end

    # Get a team
    #
    # team_gid - [str]  (required) Globally unique identifier for the team.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/teams_base.rb#50
    def get_team(client, team_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get teams in an organization
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/teams_base.rb#64
    def get_teams_for_organization(client, workspace_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get teams for a user
    #
    # user_gid - [str]  (required) A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    # organization - [str]  (required) The workspace or organization to filter teams on.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/teams_base.rb#79
    def get_teams_for_user(client, user_gid: T.unsafe(nil), organization: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/teams_base.rb#10
    def inherited(base); end

    # Remove a user from a team
    #
    # team_gid - [str]  (required) Globally unique identifier for the team.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/teams_base.rb#93
    def remove_user_for_team(client, team_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end
  end
end

# source://asana//lib/asana/resources/typeahead.rb#5
class Asana::Resources::Typeahead < ::Asana::Resources::TypeaheadBase
  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/typeahead.rb#8
  def gid; end

  # Returns the value of attribute name.
  #
  # source://asana//lib/asana/resources/typeahead.rb#12
  def name; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/typeahead.rb#10
  def resource_type; end

  class << self
    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/typeahead.rb#16
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/typeahead_base.rb#8
class Asana::Resources::TypeaheadBase < ::Asana::Resources::Resource
  class << self
    # @private
    #
    # source://asana//lib/asana/resources/gen/typeahead_base.rb#10
    def inherited(base); end

    # Get objects via typeahead
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # resource_type - [str]  (required) The type of values the typeahead should return. You can choose from one of the following: `custom_field`, `project`, `portfolio`, `tag`, `task`, and `user`. Note that unlike in the names of endpoints, the types listed here are in singular form (e.g. `task`). Using multiple types is not yet supported.
    # type - [str]  *Deprecated: new integrations should prefer the resource_type field.*
    # query - [str]  The string that will be used to search for relevant objects. If an empty string is passed in, the API will currently return an empty result set.
    # count - [int]  The number of results to return. The default is 20 if this parameter is omitted, with a minimum of 1 and a maximum of 100. If there are fewer results found than requested, all will be returned.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/typeahead_base.rb#25
    def typeahead_for_workspace(client, workspace_gid: T.unsafe(nil), resource_type: T.unsafe(nil), type: T.unsafe(nil), query: T.unsafe(nil), count: T.unsafe(nil), options: T.unsafe(nil)); end
  end
end

# A _user_ object represents an account in Asana that can be given access to
# various workspaces, projects, and tasks.
#
# Like other objects in the system, users are referred to by numerical IDs.
# However, the special string identifier `me` can be used anywhere
# a user ID is accepted, to refer to the current authenticated user.
#
# source://asana//lib/asana/resources/user.rb#11
class Asana::Resources::User < ::Asana::Resources::UsersBase
  # Returns the value of attribute email.
  #
  # source://asana//lib/asana/resources/user.rb#20
  def email; end

  # Returns all of a user's favorites in the given workspace, of the given type.
  # Results are given in order (The same order as Asana's sidebar).
  #
  # workspace - [Id] The workspace in which to get favorites.
  # resource_type - [Enum] The resource type of favorites to be returned.
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/user.rb#82
  def get_user_favorites(workspace: T.unsafe(nil), resource_type: T.unsafe(nil), options: T.unsafe(nil)); end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/user.rb#14
  def gid; end

  # Returns the value of attribute name.
  #
  # source://asana//lib/asana/resources/user.rb#18
  def name; end

  # Returns the value of attribute photo.
  #
  # source://asana//lib/asana/resources/user.rb#22
  def photo; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/user.rb#16
  def resource_type; end

  # Returns the value of attribute workspaces.
  #
  # source://asana//lib/asana/resources/user.rb#24
  def workspaces; end

  class << self
    # Returns the user records for all users in all workspaces and organizations
    # accessible to the authenticated user. Accepts an optional workspace ID
    # parameter.
    #
    # workspace - [Id] The workspace or organization to filter users on.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/user.rb#70
    def find_all(client, workspace: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the full user record for the single user with the provided ID.
    #
    # id - [String] An identifier for the user. Can be one of an email address,
    # the globally unique identifier for the user, or the keyword `me`
    # to indicate the current user making the request.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/user.rb#47
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the user records for all users in the specified workspace or
    # organization.
    #
    # workspace - [Id] The workspace in which to get users.
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/user.rb#58
    def find_by_workspace(client, workspace: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the full user record for the currently authenticated user.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/user.rb#35
    def me(client, options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/user.rb#28
    def plural_name; end
  end
end

# A _user task list_ represents the tasks assigned to a particular user. It provides API access to a user's "My Tasks" view in Asana.
#
# A user's "My Tasks" represent all of the tasks assigned to that user. It is
# visually divided into regions based on the task's
# [`assignee_status`](/developers/api-reference/tasks#field-assignee_status)
# for Asana users to triage their tasks based on when they can address them.
# When building an integration it's worth noting that tasks with due dates will
# automatically move through `assignee_status` states as their due dates
# approach; read up on [task
# auto-promotion](/guide/help/fundamentals/my-tasks#gl-auto-promote) for more
# infomation.
#
# source://asana//lib/asana/resources/user_task_list.rb#16
class Asana::Resources::UserTaskList < ::Asana::Resources::UserTaskListsBase
  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/user_task_list.rb#19
  def gid; end

  # Returns the value of attribute name.
  #
  # source://asana//lib/asana/resources/user_task_list.rb#23
  def name; end

  # Returns the value of attribute owner.
  #
  # source://asana//lib/asana/resources/user_task_list.rb#25
  def owner; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/user_task_list.rb#21
  def resource_type; end

  # Returns the compact list of tasks in a user's My Tasks list. The returned
  # tasks will be in order within each assignee status group of `Inbox`,
  # `Today`, and `Upcoming`.
  #
  # **Note:** tasks in `Later` have a different ordering in the Asana web app
  # than the other assignee status groups; this endpoint will still return
  # them in list order in `Later` (differently than they show up in Asana,
  # but the same order as in Asana's mobile apps).
  #
  # **Note:** Access control is enforced for this endpoint as with all Asana
  # API endpoints, meaning a user's private tasks will be filtered out if the
  # API-authenticated user does not have access to them.
  #
  # **Note:** Both complete and incomplete tasks are returned by default
  # unless they are filtered out (for example, setting `completed_since=now`
  # will return only incomplete tasks, which is the default view for "My
  # Tasks" in Asana.)
  #
  # completed_since - [String] Only return tasks that are either incomplete or that have been
  # completed since this time.
  #
  # per_page - [Integer] the number of records to fetch per page.
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/user_task_list.rb#83
  def tasks(completed_since: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

  # Returns the value of attribute workspace.
  #
  # source://asana//lib/asana/resources/user_task_list.rb#27
  def workspace; end

  class << self
    # Returns the full record for a user task list.
    #
    # id - [Gid] Globally unique identifier for the user task list.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/user_task_list.rb#54
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the full record for the user task list for the given user
    #
    # user - [String] An identifier for the user. Can be one of an email address,
    # the globally unique identifier for the user, or the keyword `me`
    # to indicate the current user making the request.
    #
    # workspace - [Gid] Globally unique identifier for the workspace or organization.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/user_task_list.rb#44
    def find_by_user(client, user: T.unsafe(nil), workspace: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/user_task_list.rb#31
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/user_task_lists_base.rb#8
class Asana::Resources::UserTaskListsBase < ::Asana::Resources::Resource
  class << self
    # Get a user task list
    #
    # user_task_list_gid - [str]  (required) Globally unique identifier for the user task list.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/user_task_lists_base.rb#21
    def get_user_task_list(client, user_task_list_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a user's task list
    #
    # user_gid - [str]  (required) A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    # workspace - [str]  (required) The workspace in which to get the user task list.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/user_task_lists_base.rb#34
    def get_user_task_list_for_user(client, user_gid: T.unsafe(nil), workspace: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/user_task_lists_base.rb#10
    def inherited(base); end
  end
end

# source://asana//lib/asana/resources/gen/users_base.rb#8
class Asana::Resources::UsersBase < ::Asana::Resources::Resource
  class << self
    # Get a user's favorites
    #
    # user_gid - [str]  (required) A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    # resource_type - [str]  (required) The resource type of favorites to be returned.
    # workspace - [str]  (required) The workspace in which to get favorites.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/users_base.rb#23
    def get_favorites_for_user(client, user_gid: T.unsafe(nil), resource_type: T.unsafe(nil), workspace: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a user
    #
    # user_gid - [str]  (required) A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/users_base.rb#36
    def get_user(client, user_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # workspace - [str]  The workspace or organization ID to filter users on.
    # team - [str]  The team ID to filter users on.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/users_base.rb#52
    def get_users(client, workspace: T.unsafe(nil), team: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get users in a team
    #
    # team_gid - [str]  (required) Globally unique identifier for the team.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/users_base.rb#65
    def get_users_for_team(client, team_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get users in a workspace or organization
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/users_base.rb#78
    def get_users_for_workspace(client, workspace_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/users_base.rb#10
    def inherited(base); end
  end
end

# Webhooks allow an application to be notified of changes. This is in addition
# to the ability to fetch those changes directly as
# [Events](/developers/api-reference/events) - in fact, Webhooks are just a way
# to receive Events via HTTP POST at the time they occur instead of polling for
# them. For services accessible via HTTP this is often vastly more convenient,
# and if events are not too frequent can be significantly more efficient.
#
# In both cases, however, changes are represented as Event objects - refer to
# the [Events documentation](/developers/api-reference/events) for more
# information on what data these events contain.
#
# **NOTE:** While Webhooks send arrays of Event objects to their target, the
# Event objects themselves contain *only IDs*, rather than the actual resource
# they are referencing. So while a normal event you receive via GET /events
# would look like this:
#
#     {\
#       "resource": {\
#         "id": 1337,\
#         "resource_type": "task",\
#         "name": "My Task"\
#       },\
#       "parent": null,\
#       "created_at": "2013-08-21T18:20:37.972Z",\
#       "user": {\
#         "id": 1123,\
#         "resource_type": "user",\
#         "name": "Tom Bizarro"\
#       },\
#       "action": "changed",\
#       "type": "task"\
#     }
#
# In a Webhook payload you would instead receive this:
#
#     {\
#       "resource": 1337,\
#       "parent": null,\
#       "created_at": "2013-08-21T18:20:37.972Z",\
#       "user": 1123,\
#       "action": "changed",\
#       "type": "task"\
#     }
#
# Webhooks themselves contain only the information necessary to deliver the
# events to the desired target as they are generated.
#
# source://asana//lib/asana/resources/webhook.rb#51
class Asana::Resources::Webhook < ::Asana::Resources::WebhooksBase
  # Returns the value of attribute active.
  #
  # source://asana//lib/asana/resources/webhook.rb#62
  def active; end

  # Returns the value of attribute created_at.
  #
  # source://asana//lib/asana/resources/webhook.rb#64
  def created_at; end

  # This method permanently removes a webhook. Note that it may be possible
  # to receive a request that was already in flight after deleting the
  # webhook, but no further requests will be issued.
  #
  # source://asana//lib/asana/resources/webhook.rb#133
  def delete_by_id; end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/webhook.rb#54
  def gid; end

  # Returns the value of attribute last_failure_at.
  #
  # source://asana//lib/asana/resources/webhook.rb#68
  def last_failure_at; end

  # Returns the value of attribute last_failure_content.
  #
  # source://asana//lib/asana/resources/webhook.rb#70
  def last_failure_content; end

  # Returns the value of attribute last_success_at.
  #
  # source://asana//lib/asana/resources/webhook.rb#66
  def last_success_at; end

  # Returns the value of attribute resource.
  #
  # source://asana//lib/asana/resources/webhook.rb#58
  def resource; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/webhook.rb#56
  def resource_type; end

  # Returns the value of attribute target.
  #
  # source://asana//lib/asana/resources/webhook.rb#60
  def target; end

  class << self
    # Establishing a webhook is a two-part process. First, a simple HTTP POST
    # similar to any other resource creation. Since you could have multiple
    # webhooks we recommend specifying a unique local id for each target.
    #
    # Next comes the confirmation handshake. When a webhook is created, we will
    # send a test POST to the `target` with an `X-Hook-Secret` header as
    # described in the
    # [Resthooks Security documentation](http://resthooks.org/docs/security/).
    # The target must respond with a `200 OK` and a matching `X-Hook-Secret`
    # header to confirm that this webhook subscription is indeed expected.
    #
    # If you do not acknowledge the webhook's confirmation handshake it will
    # fail to setup, and you will receive an error in response to your attempt
    # to create it. This means you need to be able to receive and complete the
    # webhook *while* the POST request is in-flight.
    #
    # resource - [Id] A resource ID to subscribe to. The resource can be a task or project.
    #
    # target - [String] The URL to receive the HTTP POST.
    #
    # options - [Hash] the request I/O options.
    # data - [Hash] the attributes to post.
    #
    # source://asana//lib/asana/resources/webhook.rb#100
    def create(client, resource: T.unsafe(nil), target: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Returns the compact representation of all webhooks your app has
    # registered for the authenticated user in the given workspace.
    #
    # workspace - [Id] The workspace to query for webhooks in.
    #
    # resource - [Id] Only return webhooks for the given resource.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/webhook.rb#114
    def get_all(client, workspace: T.unsafe(nil), resource: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the full record for the given webhook.
    #
    # id - [Id] The webhook to get.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/webhook.rb#124
    def get_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/webhook.rb#74
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/webhooks_base.rb#8
class Asana::Resources::WebhooksBase < ::Asana::Resources::Resource
  class << self
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/webhooks_base.rb#22
    def create_webhook(client, options: T.unsafe(nil), **data); end

    # Delete a webhook
    #
    # webhook_gid - [str]  (required) Globally unique identifier for the webhook.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/webhooks_base.rb#33
    def delete_webhook(client, webhook_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get a webhook
    #
    # webhook_gid - [str]  (required) Globally unique identifier for the webhook.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/webhooks_base.rb#45
    def get_webhook(client, webhook_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # workspace - [str]  (required) The workspace to query for webhooks in.
    # resource - [str]  Only return webhooks for the given resource.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/webhooks_base.rb#61
    def get_webhooks(client, workspace: T.unsafe(nil), resource: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/webhooks_base.rb#10
    def inherited(base); end
  end
end

# A _workspace_ is the highest-level organizational unit in Asana. All projects
# and tasks have an associated workspace.
#
# An _organization_ is a special kind of workspace that represents a company.
# In an organization, you can group your projects into teams. You can read
# more about how organizations work on the Asana Guide.
# To tell if your workspace is an organization or not, check its
# `is_organization` property.
#
# Over time, we intend to migrate most workspaces into organizations and to
# release more organization-specific functionality. We may eventually deprecate
# using workspace-based APIs for organizations. Currently, and until after
# some reasonable grace period following any further announcements, you can
# still reference organizations in any `workspace` parameter.
#
# source://asana//lib/asana/resources/workspace.rb#19
class Asana::Resources::Workspace < ::Asana::Resources::WorkspacesBase
  # The user can be referenced by their globally unique user ID or their email address.
  # Returns the full user record for the invited user.
  #
  # user - [String] An identifier for the user. Can be one of an email address,
  # the globally unique identifier for the user, or the keyword `me`
  # to indicate the current user making the request.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/workspace.rb#107
  def add_user(user: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/workspace.rb#21
  def gid; end

  # Returns the value of attribute is_organization.
  #
  # source://asana//lib/asana/resources/workspace.rb#27
  def is_organization; end

  # Returns the value of attribute name.
  #
  # source://asana//lib/asana/resources/workspace.rb#25
  def name; end

  # The user making this call must be an admin in the workspace.
  # Returns an empty data record.
  #
  # user - [String] An identifier for the user. Can be one of an email address,
  # the globally unique identifier for the user, or the keyword `me`
  # to indicate the current user making the request.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/workspace.rb#121
  def remove_user(user: T.unsafe(nil), options: T.unsafe(nil), **data); end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/workspace.rb#23
  def resource_type; end

  # Retrieves objects in the workspace based on an auto-completion/typeahead
  # search algorithm. This feature is meant to provide results quickly, so do
  # not rely on this API to provide extremely accurate search results. The
  # result set is limited to a single page of results with a maximum size,
  # so you won't be able to fetch large numbers of results.
  #
  # resource_type - [Enum] The type of values the typeahead should return. You can choose from
  # one of the following: custom_field, project, tag, task, and user.
  # Note that unlike in the names of endpoints, the types listed here are
  # in singular form (e.g. `task`). Using multiple types is not yet supported.
  #
  # type - [Enum] **Deprecated: new integrations should prefer the resource_type field.**
  #
  # query - [String] The string that will be used to search for relevant objects. If an
  # empty string is passed in, the API will currently return an empty
  # result set.
  #
  # count - [Number] The number of results to return. The default is `20` if this
  # parameter is omitted, with a minimum of `1` and a maximum of `100`.
  # If there are fewer results found than requested, all will be returned.
  #
  # per_page - [Integer] the number of records to fetch per page.
  # options - [Hash] the request I/O options.
  #
  # source://asana//lib/asana/resources/workspace.rb#93
  def typeahead(resource_type: T.unsafe(nil), type: T.unsafe(nil), query: T.unsafe(nil), count: T.unsafe(nil), per_page: T.unsafe(nil), options: T.unsafe(nil)); end

  # A specific, existing workspace can be updated by making a PUT request on
  # the URL for that workspace. Only the fields provided in the data block
  # will be updated; any unspecified fields will remain unchanged.
  #
  # Currently the only field that can be modified for a workspace is its `name`.
  #
  # Returns the complete, updated workspace record.
  #
  # options - [Hash] the request I/O options.
  # data - [Hash] the attributes to post.
  #
  # source://asana//lib/asana/resources/workspace.rb#65
  def update(options: T.unsafe(nil), **data); end

  class << self
    # Returns the compact records for all workspaces visible to the authorized user.
    #
    # per_page - [Integer] the number of records to fetch per page.
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/workspace.rb#49
    def find_all(client, per_page: T.unsafe(nil), options: T.unsafe(nil)); end

    # Returns the full workspace record for a single workspace.
    #
    # id - [Id] Globally unique identifier for the workspace or organization.
    #
    # options - [Hash] the request I/O options.
    #
    # source://asana//lib/asana/resources/workspace.rb#40
    def find_by_id(client, id, options: T.unsafe(nil)); end

    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/workspace.rb#31
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/workspace_membership.rb#5
class Asana::Resources::WorkspaceMembership < ::Asana::Resources::WorkspaceMembershipsBase
  # Returns the value of attribute gid.
  #
  # source://asana//lib/asana/resources/workspace_membership.rb#8
  def gid; end

  # Returns the value of attribute is_active.
  #
  # source://asana//lib/asana/resources/workspace_membership.rb#20
  def is_active; end

  # Returns the value of attribute is_admin.
  #
  # source://asana//lib/asana/resources/workspace_membership.rb#18
  def is_admin; end

  # Returns the value of attribute is_guest.
  #
  # source://asana//lib/asana/resources/workspace_membership.rb#22
  def is_guest; end

  # Returns the value of attribute resource_type.
  #
  # source://asana//lib/asana/resources/workspace_membership.rb#10
  def resource_type; end

  # Returns the value of attribute user.
  #
  # source://asana//lib/asana/resources/workspace_membership.rb#12
  def user; end

  # Returns the value of attribute user_task_list.
  #
  # source://asana//lib/asana/resources/workspace_membership.rb#16
  def user_task_list; end

  # Returns the value of attribute workspace.
  #
  # source://asana//lib/asana/resources/workspace_membership.rb#14
  def workspace; end

  class << self
    # Returns the plural name of the resource.
    #
    # source://asana//lib/asana/resources/workspace_membership.rb#26
    def plural_name; end
  end
end

# source://asana//lib/asana/resources/gen/workspace_memberships_base.rb#8
class Asana::Resources::WorkspaceMembershipsBase < ::Asana::Resources::Resource
  class << self
    # Get a workspace membership
    #
    # workspace_membership_gid - [str]  (required)
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/workspace_memberships_base.rb#21
    def get_workspace_membership(client, workspace_membership_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get workspace memberships for a user
    #
    # user_gid - [str]  (required) A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/workspace_memberships_base.rb#35
    def get_workspace_memberships_for_user(client, user_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # Get the workspace memberships for a workspace
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # user - [str]  A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/workspace_memberships_base.rb#50
    def get_workspace_memberships_for_workspace(client, workspace_gid: T.unsafe(nil), user: T.unsafe(nil), options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/workspace_memberships_base.rb#10
    def inherited(base); end
  end
end

# source://asana//lib/asana/resources/gen/workspaces_base.rb#8
class Asana::Resources::WorkspacesBase < ::Asana::Resources::Resource
  class << self
    # Add a user to a workspace or organization
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/workspaces_base.rb#22
    def add_user_for_workspace(client, workspace_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Get a workspace
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/workspaces_base.rb#34
    def get_workspace(client, workspace_gid: T.unsafe(nil), options: T.unsafe(nil)); end

    # options - [Hash] the request I/O options
    # > offset - [str]  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
    # > limit - [int]  Results per page. The number of objects to return per page. The value must be between 1 and 100.
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    #
    # source://asana//lib/asana/resources/gen/workspaces_base.rb#48
    def get_workspaces(client, options: T.unsafe(nil)); end

    # @private
    #
    # source://asana//lib/asana/resources/gen/workspaces_base.rb#10
    def inherited(base); end

    # Remove a user from a workspace or organization
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to POST
    #
    # source://asana//lib/asana/resources/gen/workspaces_base.rb#60
    def remove_user_for_workspace(client, workspace_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end

    # Update a workspace
    #
    # workspace_gid - [str]  (required) Globally unique identifier for the workspace or organization.
    # options - [Hash] the request I/O options
    # > opt_fields - [list[str]]  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
    # > opt_pretty - [bool]  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    # data - [Hash] the attributes to PUT
    #
    # source://asana//lib/asana/resources/gen/workspaces_base.rb#73
    def update_workspace(client, workspace_gid: T.unsafe(nil), options: T.unsafe(nil), **data); end
  end
end

# Public: Version of the gem.
#
# source://asana//lib/asana/version.rb#4
Asana::VERSION = T.let(T.unsafe(nil), String)

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  private

  # source://asana//lib/asana/ruby2_0_0_compatibility.rb#1
  def required(name); end
end
