# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `undercover` gem.
# Please instead update this file by running `bin/tapioca gem undercover`.


# source://undercover//lib/undercover/lcov_parser.rb#3
module Undercover; end

# source://undercover//lib/undercover/cli.rb#7
module Undercover::CLI
  class << self
    # source://undercover//lib/undercover/cli.rb#45
    def changeset(opts); end

    # source://undercover//lib/undercover/cli.rb#17
    def run(args); end

    # source://undercover//lib/undercover/cli.rb#25
    def run_report(opts); end

    # source://undercover//lib/undercover/cli.rb#39
    def syntax_version(version); end
  end
end

# TODO: Report calls >parser< for each file instead of
# traversing the whole project at first!
#
# source://undercover//lib/undercover/cli.rb#11
Undercover::CLI::WARNINGS_TO_S = T.let(T.unsafe(nil), Hash)

# Base class for different kinds of input
#
# source://undercover//lib/undercover/changeset.rb#8
class Undercover::Changeset
  include ::Enumerable
  extend ::Forwardable

  # @return [Changeset] a new instance of Changeset
  #
  # source://undercover//lib/undercover/changeset.rb#18
  def initialize(dir, compare_base = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def <=>(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def each(*args, **_arg1, &block); end

  # source://undercover//lib/undercover/changeset.rb#52
  def each_changed_line; end

  # source://undercover//lib/undercover/changeset.rb#48
  def file_paths; end

  # Returns the value of attribute files.
  #
  # source://undercover//lib/undercover/changeset.rb#14
  def files; end

  # source://undercover//lib/undercover/changeset.rb#38
  def last_modified; end

  # source://undercover//lib/undercover/changeset.rb#26
  def update; end

  # TODO: refactor to a standalone validator (depending on changeset AND lcov)
  #
  # source://undercover//lib/undercover/changeset.rb#59
  def validate(lcov_report_path); end

  private

  # Returns the value of attribute compare_base.
  #
  # source://undercover//lib/undercover/changeset.rb#84
  def compare_base; end

  # source://undercover//lib/undercover/changeset.rb#74
  def compare_base_obj; end

  # Diffs `head` or `head` + `compare_base` (if exists),
  # as it makes sense to run Undercover with the most recent file versions
  #
  # source://undercover//lib/undercover/changeset.rb#69
  def full_diff; end

  # source://undercover//lib/undercover/changeset.rb#80
  def head; end

  # Returns the value of attribute repo.
  #
  # source://undercover//lib/undercover/changeset.rb#84
  def repo; end
end

# source://undercover//lib/undercover/changeset.rb#9
Undercover::Changeset::T_ZERO = T.let(T.unsafe(nil), Time)

# source://undercover//lib/undercover/formatter.rb#4
class Undercover::Formatter
  # @return [Formatter] a new instance of Formatter
  #
  # source://undercover//lib/undercover/formatter.rb#5
  def initialize(results); end

  # source://undercover//lib/undercover/formatter.rb#9
  def to_s; end

  private

  # source://undercover//lib/undercover/formatter.rb#17
  def formatted_warnings; end

  # source://undercover//lib/undercover/formatter.rb#37
  def pad_size; end

  # source://undercover//lib/undercover/formatter.rb#26
  def success; end

  # source://undercover//lib/undercover/formatter.rb#31
  def warnings_header; end
end

# source://undercover//lib/undercover/lcov_parser.rb#4
class Undercover::LcovParseError < ::StandardError; end

# source://undercover//lib/undercover/lcov_parser.rb#6
class Undercover::LcovParser
  # @return [LcovParser] a new instance of LcovParser
  #
  # source://undercover//lib/undercover/lcov_parser.rb#9
  def initialize(lcov_io); end

  # source://undercover//lib/undercover/lcov_parser.rb#25
  def coverage(filepath); end

  # Returns the value of attribute io.
  #
  # source://undercover//lib/undercover/lcov_parser.rb#7
  def io; end

  # source://undercover//lib/undercover/lcov_parser.rb#19
  def parse; end

  # Returns the value of attribute source_files.
  #
  # source://undercover//lib/undercover/lcov_parser.rb#7
  def source_files; end

  # source://undercover//lib/undercover/lcov_parser.rb#41
  def total_branch_coverage; end

  # source://undercover//lib/undercover/lcov_parser.rb#32
  def total_coverage; end

  private

  # source://undercover//lib/undercover/lcov_parser.rb#53
  def parse_line(line); end

  class << self
    # source://undercover//lib/undercover/lcov_parser.rb#14
    def parse(lcov_report_path); end
  end
end

# source://undercover//lib/undercover/options.rb#7
class Undercover::Options
  # @return [Options] a new instance of Options
  #
  # source://undercover//lib/undercover/options.rb#22
  def initialize; end

  # Returns the value of attribute compare.
  #
  # source://undercover//lib/undercover/options.rb#20
  def compare; end

  # Sets the attribute compare
  #
  # @param value the value to set the attribute compare to.
  #
  # source://undercover//lib/undercover/options.rb#20
  def compare=(_arg0); end

  # Returns the value of attribute git_dir.
  #
  # source://undercover//lib/undercover/options.rb#20
  def git_dir; end

  # Sets the attribute git_dir
  #
  # @param value the value to set the attribute git_dir to.
  #
  # source://undercover//lib/undercover/options.rb#20
  def git_dir=(_arg0); end

  # Returns the value of attribute lcov.
  #
  # source://undercover//lib/undercover/options.rb#20
  def lcov; end

  # Sets the attribute lcov
  #
  # @param value the value to set the attribute lcov to.
  #
  # source://undercover//lib/undercover/options.rb#20
  def lcov=(_arg0); end

  # source://undercover//lib/undercover/options.rb#33
  def parse(args); end

  # Returns the value of attribute path.
  #
  # source://undercover//lib/undercover/options.rb#20
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://undercover//lib/undercover/options.rb#20
  def path=(_arg0); end

  # Returns the value of attribute syntax_version.
  #
  # source://undercover//lib/undercover/options.rb#20
  def syntax_version; end

  # Sets the attribute syntax_version
  #
  # @param value the value to set the attribute syntax_version to.
  #
  # source://undercover//lib/undercover/options.rb#20
  def syntax_version=(_arg0); end

  private

  # source://undercover//lib/undercover/options.rb#74
  def args_from_options_file(path); end

  # source://undercover//lib/undercover/options.rb#66
  def build_opts(args); end

  # source://undercover//lib/undercover/options.rb#103
  def compare_option(parser); end

  # source://undercover//lib/undercover/options.rb#96
  def git_dir_option(parser); end

  # source://undercover//lib/undercover/options.rb#118
  def guess_lcov_path; end

  # source://undercover//lib/undercover/options.rb#84
  def lcov_path_option(parser); end

  # source://undercover//lib/undercover/options.rb#70
  def project_options; end

  # source://undercover//lib/undercover/options.rb#80
  def project_options_file; end

  # source://undercover//lib/undercover/options.rb#90
  def project_path_option(parser); end

  # source://undercover//lib/undercover/options.rb#110
  def ruby_syntax_option(parser); end
end

# source://undercover//lib/undercover/options.rb#15
Undercover::Options::OUTPUT_FORMATTERS = T.let(T.unsafe(nil), Array)

# source://undercover//lib/undercover/options.rb#16
Undercover::Options::OUTPUT_STDOUT = T.let(T.unsafe(nil), Symbol)

# source://undercover//lib/undercover/options.rb#8
Undercover::Options::RUN_MODE = T.let(T.unsafe(nil), Array)

# source://undercover//lib/undercover/options.rb#9
Undercover::Options::RUN_MODE_DIFF_STRICT = T.let(T.unsafe(nil), Symbol)

# source://undercover//lib/undercover.rb#18
class Undercover::Report
  extend ::Forwardable

  # Initializes a new Undercover::Report
  #
  # @param changeset [Undercover::Changeset]
  # @param opts [Undercover::Options]
  # @return [Report] a new instance of Report
  #
  # source://undercover//lib/undercover.rb#31
  def initialize(changeset, opts); end

  # source://undercover//lib/undercover.rb#72
  def all_results; end

  # source://undercover//lib/undercover.rb#40
  def build; end

  # source://undercover//lib/undercover.rb#66
  def build_warnings; end

  # Returns the value of attribute changeset.
  #
  # source://undercover//lib/undercover.rb#22
  def changeset; end

  # Returns the value of attribute code_dir.
  #
  # source://undercover//lib/undercover.rb#22
  def code_dir; end

  # source://undercover//lib/undercover.rb#76
  def flagged_results; end

  # source://undercover//lib/undercover.rb#80
  def inspect; end

  # Returns the value of attribute lcov.
  #
  # source://undercover//lib/undercover.rb#22
  def lcov; end

  # Returns the value of attribute results.
  #
  # source://undercover//lib/undercover.rb#22
  def results; end

  # source://undercover//lib/undercover.rb#80
  def to_s; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def validate(*args, **_arg1, &block); end

  private

  # source://undercover//lib/undercover.rb#90
  def load_and_parse_file(filepath); end

  # Returns the value of attribute loaded_files.
  #
  # source://undercover//lib/undercover.rb#87
  def loaded_files; end
end

# source://undercover//lib/undercover/result.rb#6
class Undercover::Result
  extend ::Forwardable

  # @return [Result] a new instance of Result
  #
  # source://undercover//lib/undercover/result.rb#13
  def initialize(node, file_cov, file_path); end

  # Returns the value of attribute coverage.
  #
  # source://undercover//lib/undercover/result.rb#9
  def coverage; end

  # Method `coverage_f` returns the total coverage of this Undercover::Result
  # as a % value, taking into account missing branches. Line coverage will be counted
  # as 0 if any branch is untested.
  #
  # source://undercover//lib/undercover/result.rb#47
  def coverage_f; end

  # Returns the value of attribute file_path.
  #
  # source://undercover//lib/undercover/result.rb#9
  def file_path; end

  # source://undercover//lib/undercover/result.rb#105
  def file_path_with_lines; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def first_line(*args, **_arg1, &block); end

  # source://undercover//lib/undercover/result.rb#22
  def flag; end

  # @return [Boolean]
  #
  # source://undercover//lib/undercover/result.rb#26
  def flagged?; end

  # source://undercover//lib/undercover/result.rb#109
  def inspect; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def last_line(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def name(*args, **_arg1, &block); end

  # Returns the value of attribute node.
  #
  # source://undercover//lib/undercover/result.rb#9
  def node; end

  # TODO: move to formatter interface instead!
  #
  # source://undercover//lib/undercover/result.rb#83
  def pretty_print; end

  # TODO: create a formatter interface instead and add some tests.
  # TODO: re-enable rubocops
  #
  # Zips coverage data (that doesn't include any non-code lines) with
  # full source for given code fragment (this includes non-code lines!)
  #
  # source://undercover//lib/undercover/result.rb#69
  def pretty_print_lines; end

  # source://undercover//lib/undercover/result.rb#109
  def to_s; end

  # @return [Boolean]
  #
  # source://undercover//lib/undercover/result.rb#31
  def uncovered?(line_no); end

  private

  # source://undercover//lib/undercover/result.rb#118
  def count_covered_branches(line_number); end
end

# source://undercover//lib/undercover/version.rb#4
Undercover::VERSION = T.let(T.unsafe(nil), String)
