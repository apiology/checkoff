# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cache_method` gem.
# Please instead update this file by running `bin/tapioca gem cache_method`.


# source://cache_method//lib/cache_method/config.rb#3
module CacheMethod
  class << self
    # source://cache_method//lib/cache_method.rb#12
    def config; end

    # source://cache_method//lib/cache_method.rb#55
    def digest(obj); end

    # source://cache_method//lib/cache_method.rb#18
    def klass_name(obj); end

    # source://cache_method//lib/cache_method.rb#22
    def method_delimiter(obj); end

    # source://cache_method//lib/cache_method.rb#26
    def method_signature(obj, method_id); end

    # source://cache_method//lib/cache_method.rb#30
    def resolve_cache_key(obj); end
  end
end

# source://cache_method//lib/cache_method.rb#10
CacheMethod::CACHE_KEY_JOINER = T.let(T.unsafe(nil), String)

# source://cache_method//lib/cache_method/cached_result.rb#2
class CacheMethod::CachedResult
  # @return [CachedResult] a new instance of CachedResult
  #
  # source://cache_method//lib/cache_method/cached_result.rb#3
  def initialize(obj, method_id, original_method_id, ttl, args, &blk); end

  # Returns the value of attribute args.
  #
  # source://cache_method//lib/cache_method/cached_result.rb#19
  def args; end

  # Returns the value of attribute args_digest.
  #
  # source://cache_method//lib/cache_method/cached_result.rb#20
  def args_digest; end

  # Returns the value of attribute blk.
  #
  # source://cache_method//lib/cache_method/cached_result.rb#21
  def blk; end

  # @return [Boolean]
  #
  # source://cache_method//lib/cache_method/cached_result.rb#45
  def exist?; end

  # Store things wrapped in an Array so that nil is accepted
  #
  # source://cache_method//lib/cache_method/cached_result.rb#25
  def fetch; end

  # Returns the value of attribute method_id.
  #
  # source://cache_method//lib/cache_method/cached_result.rb#16
  def method_id; end

  # Returns the value of attribute method_signature.
  #
  # source://cache_method//lib/cache_method/cached_result.rb#17
  def method_signature; end

  # Returns the value of attribute obj.
  #
  # source://cache_method//lib/cache_method/cached_result.rb#15
  def obj; end

  # Returns the value of attribute original_method_id.
  #
  # source://cache_method//lib/cache_method/cached_result.rb#18
  def original_method_id; end

  # Returns the value of attribute ttl.
  #
  # source://cache_method//lib/cache_method/cached_result.rb#22
  def ttl; end

  private

  # source://cache_method//lib/cache_method/cached_result.rb#51
  def cache_key; end

  # source://cache_method//lib/cache_method/cached_result.rb#59
  def current_generation; end

  # source://cache_method//lib/cache_method/cached_result.rb#65
  def get_wrapped; end

  # source://cache_method//lib/cache_method/cached_result.rb#69
  def set_wrapped; end
end

# All Classes (but not instances), get the <tt>.cache_method</tt> method.
#
# source://cache_method//lib/cache_method.rb#81
module CacheMethod::ClassMethods
  # Cache a method. TTL in seconds, defaults to whatever's in CacheMethod.config.default_ttl
  #
  # Note: Remember to define <tt>#as_cache_key</tt> on any object whose instance methods might get cached.
  #
  # Note 2: Check out CacheMethod.config.default_ttl... the default is 24 hours.
  #
  # Example:
  #     class Blog
  #       def get_latest_entries
  #         # [...]
  #       end
  #       cache_method :get_latest_entries
  #     end
  #
  # source://cache_method//lib/cache_method.rb#95
  def cache_method(method_id, ttl = T.unsafe(nil)); end

  # Clear a cache method once another method is called. Useful in situations where
  # you want to clear a cache whenever another method is callled, commonly
  # an update.
  #
  # Example:
  #     class Blog
  #       def get_latest_entries
  #         # [...]
  #       end
  #       def update_entries
  #         # update happens
  #       end
  #       cache_method_clear_on :update_entries, :get_latest_entries
  #     end
  #
  # source://cache_method//lib/cache_method.rb#117
  def cache_method_clear_on(method_id, cache_method_clear_id); end
end

# Here's where you set config options.
#
# Example:
#     CacheMethod.config.storage = Memcached.new '127.0.0.1:11211'
#     CacheMethod.config.default_ttl = 120 # seconds
#
# You'd probably put this in your Rails config/initializers, for example.
#
# source://cache_method//lib/cache_method/config.rb#11
class CacheMethod::Config
  # @return [Config] a new instance of Config
  #
  # source://cache_method//lib/cache_method/config.rb#13
  def initialize; end

  # source://cache_method//lib/cache_method/config.rb#75
  def default_generational_ttl; end

  # TTL for method generational caches. Defaults to 0 (never).
  #
  # Example:
  #     CacheMethod.config.default_generational_ttl = 120 # seconds
  #
  # source://cache_method//lib/cache_method/config.rb#71
  def default_generational_ttl=(seconds); end

  # source://cache_method//lib/cache_method/config.rb#63
  def default_ttl; end

  # TTL for method caches. Defaults to 24 hours or 86,400 seconds.
  #
  # Example:
  #     CacheMethod.config.default_ttl = 120 # seconds
  #
  # source://cache_method//lib/cache_method/config.rb#59
  def default_ttl=(seconds); end

  # Whether to use "generational" caching. Default is true.
  #
  # Pro: enables clearing/flushing/expiring specific methods
  # Con: requires an extra trip to memcached to get the current "generation"
  #
  # Set to false if you just flush everything and don't need to selectively flush particular methods
  #
  # source://cache_method//lib/cache_method/config.rb#23
  def generational=(boolean); end

  # @return [Boolean]
  #
  # source://cache_method//lib/cache_method/config.rb#27
  def generational?; end

  # source://cache_method//lib/cache_method/config.rb#49
  def storage; end

  # Storage for the cache.
  #
  # Supported memcached clients:
  # * memcached[https://github.com/fauna/memcached] (either a Memcached or a Memcached::Rails)
  # * dalli[https://github.com/mperham/dalli] (either a Dalli::Client or an ActiveSupport::Cache::DalliStore)
  # * memcache-client[https://github.com/mperham/memcache-client] (MemCache, the one commonly used by Rails)
  #
  # Supported Redis clients:
  # * redis[https://github.com/ezmobius/redis-rb]
  #
  # Uses the cache[https://github.com/seamusabshere/cache] gem to wrap these, so support depends on that gem
  #
  # Example:
  #     CacheMethod.config.storage = Memcached.new '127.0.0.1:11211'
  #
  # source://cache_method//lib/cache_method/config.rb#45
  def storage=(storage = T.unsafe(nil)); end
end

# source://cache_method//lib/cache_method/generation.rb#2
class CacheMethod::Generation
  # @return [Generation] a new instance of Generation
  #
  # source://cache_method//lib/cache_method/generation.rb#3
  def initialize(obj, method_id); end

  # source://cache_method//lib/cache_method/generation.rb#14
  def fetch; end

  # source://cache_method//lib/cache_method/generation.rb#24
  def mark_passing; end

  # Returns the value of attribute method_id.
  #
  # source://cache_method//lib/cache_method/generation.rb#11
  def method_id; end

  # Returns the value of attribute method_signature.
  #
  # source://cache_method//lib/cache_method/generation.rb#12
  def method_signature; end

  # Returns the value of attribute obj.
  #
  # source://cache_method//lib/cache_method/generation.rb#10
  def obj; end

  private

  # source://cache_method//lib/cache_method/generation.rb#30
  def cache_key; end

  # source://cache_method//lib/cache_method/generation.rb#38
  def get; end

  # source://cache_method//lib/cache_method/generation.rb#42
  def set; end
end

# All Objects, including instances and Classes, get the <tt>#cache_method_clear</tt> method.
#
# source://cache_method//lib/cache_method.rb#60
module CacheMethod::InstanceMethods
  # @return [Boolean]
  #
  # source://cache_method//lib/cache_method.rb#75
  def cache_method_cached?(method_id, *args); end

  # Clear the cache for a particular method.
  #
  # Note: Remember to define <tt>#as_cache_key</tt> on any object whose instance methods might get cached.
  #
  # Example:
  #     my_blog.cache_method_clear :get_latest_entries
  #
  # source://cache_method//lib/cache_method.rb#67
  def cache_method_clear(method_id); end
end

# source://cache_method//lib/cache_method.rb#9
CacheMethod::MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

class Class < ::Module; end

class Module
  include ::CacheMethod::ClassMethods
end

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin
  include ::CacheMethod::InstanceMethods
end
