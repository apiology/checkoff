# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `punchlist` gem.
# Please instead update this file by running `bin/tapioca gem punchlist`.


# XXX: need to include BUG in list
# XXX: need to include BUG in my rubocop config
#
# source://punchlist//lib/punchlist/version.rb#5
module Punchlist; end

# Render a text format of offenses
#
# source://punchlist//lib/punchlist/renderer.rb#5
class Punchlist::CliRenderer
  # source://punchlist//lib/punchlist/renderer.rb#6
  def render(output); end
end

# Configuration for punchlist gem
#
# source://punchlist//lib/punchlist/config.rb#5
class Punchlist::Config
  # @return [Config] a new instance of Config
  #
  # source://punchlist//lib/punchlist/config.rb#18
  def initialize(source_file_globber:, regexp: T.unsafe(nil), glob: T.unsafe(nil), exclude: T.unsafe(nil)); end

  # Returns the value of attribute exclude.
  #
  # source://punchlist//lib/punchlist/config.rb#6
  def exclude; end

  # Returns the value of attribute glob.
  #
  # source://punchlist//lib/punchlist/config.rb#6
  def glob; end

  # Returns the value of attribute regexp.
  #
  # source://punchlist//lib/punchlist/config.rb#6
  def regexp; end

  # source://punchlist//lib/punchlist/config.rb#12
  def source_files; end

  class << self
    # source://punchlist//lib/punchlist/config.rb#8
    def default_punchlist_line_regexp_string; end
  end
end

# Inspects files for punchlist items
#
# source://punchlist//lib/punchlist/inspector.rb#7
class Punchlist::Inspector
  # @param punchlist_line_regexp [Regexp] a regular expression that matches punchlist items
  # @param filename [String] the file to inspect
  # @param file_opener [Class<File>] an object that responds to `open` like `File`
  # @return [Inspector] a new instance of Inspector
  #
  # source://punchlist//lib/punchlist/inspector.rb#11
  def initialize(punchlist_line_regexp, filename, file_opener: T.unsafe(nil)); end

  # @return [Array<Offense>] punchlist items for the specified file
  #
  # source://punchlist//lib/punchlist/inspector.rb#20
  def run; end

  private

  # @return [String]
  #
  # source://punchlist//lib/punchlist/inspector.rb#33
  def filename; end

  # Inspects a line for punchlist items and stores it in this objects state
  #
  # @param line [String] the line to inspect
  # @return [void]
  #
  # source://punchlist//lib/punchlist/inspector.rb#39
  def inspect_line(line); end

  # @return [Regexp]
  #
  # source://punchlist//lib/punchlist/inspector.rb#30
  def punchlist_line_regexp; end
end

# Represents a discovered punchlist item in code
#
# source://punchlist//lib/punchlist/offense.rb#5
class Punchlist::Offense
  # @return [Offense] a new instance of Offense
  #
  # source://punchlist//lib/punchlist/offense.rb#7
  def initialize(filename, line_num, line); end

  # source://punchlist//lib/punchlist/offense.rb#13
  def ==(other); end

  # Returns the value of attribute filename.
  #
  # source://punchlist//lib/punchlist/offense.rb#6
  def filename; end

  # Returns the value of attribute line.
  #
  # source://punchlist//lib/punchlist/offense.rb#6
  def line; end

  # Returns the value of attribute line_num.
  #
  # source://punchlist//lib/punchlist/offense.rb#6
  def line_num; end

  protected

  # source://punchlist//lib/punchlist/offense.rb#19
  def state; end
end

# Parse command line options
#
# source://punchlist//lib/punchlist/option_parser.rb#9
class Punchlist::OptionParser
  # @return [OptionParser] a new instance of OptionParser
  #
  # source://punchlist//lib/punchlist/option_parser.rb#12
  def initialize(args, source_finder_option_parser: T.unsafe(nil)); end

  # Returns the value of attribute default_punchlist_line_regexp.
  #
  # source://punchlist//lib/punchlist/option_parser.rb#10
  def default_punchlist_line_regexp; end

  # source://punchlist//lib/punchlist/option_parser.rb#34
  def generate_config(source_file_globber); end

  # source://punchlist//lib/punchlist/option_parser.rb#18
  def parse_regexp(opts, options); end

  # source://punchlist//lib/punchlist/option_parser.rb#26
  def setup_options(opts); end
end

# Counts the number of 'todo' comments in your code.
#
# source://punchlist//lib/punchlist.rb#12
class Punchlist::Punchlist
  # @return [Punchlist] a new instance of Punchlist
  #
  # source://punchlist//lib/punchlist.rb#13
  def initialize(args, outputter: T.unsafe(nil), option_parser_class: T.unsafe(nil), source_file_globber: T.unsafe(nil)); end

  # source://punchlist//lib/punchlist.rb#28
  def analyze_files; end

  # source://punchlist//lib/punchlist.rb#36
  def look_for_punchlist_items(filename); end

  # source://punchlist//lib/punchlist.rb#40
  def render(output); end

  # source://punchlist//lib/punchlist.rb#22
  def run; end
end

# source://punchlist//lib/punchlist/version.rb#6
Punchlist::VERSION = T.let(T.unsafe(nil), String)
