# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sord` gem.
# Please instead update this file by running `bin/tapioca gem sord`.


# Concrete

# Generic - these will be put in a `Types::Raw`, so writing RBS syntax is a little devious,
# but by their nature we know they'll only be used in an RBS file, so it's probably fine

# source://sord//lib/sord/version.rb#2
# typed: strong
module Sord; end

# Converts the current working directory's YARD registry into an type
# signature file.
#
# source://sord//lib/sord/generator.rb#12
# Converts the current working directory's YARD registry into an type
class Sord::Generator
  # Create a new generator.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash]
  # @return [void]
  #
  # source://sord//lib/sord/generator.rb#37
  # _@param_ `options`
  sig { params(options: T::Hash[T.untyped, T.untyped]).void }
  def initialize(options); end

  # Given a YARD NamespaceObject, add lines defining either its class
  # and instance attributes and their signatures to the current file.
  #
  # @param item [YARD::CodeObjects::NamespaceObject]
  # @return [void]
  #
  # source://sord//lib/sord/generator.rb#492
  # sord warn - YARD::CodeObjects::NamespaceObject wasn't able to be resolved to a constant in this project
  # Given a YARD NamespaceObject, add lines defining either its class
  # _@param_ `item`
  sig { params(item: YARD::CodeObjects::NamespaceObject).void }
  def add_attributes(item); end

  # Adds comments to an object based on a docstring.
  #
  # @param item [YARD::CodeObjects::NamespaceObject]
  # @param typed_object [Parlour::TypedObject]
  # @return [void]
  #
  # source://sord//lib/sord/generator.rb#189
  # sord warn - YARD::CodeObjects::NamespaceObject wasn't able to be resolved to a constant in this project
  # _@param_ `item`
  # _@param_ `typed_object`
  sig { params(item: YARD::CodeObjects::NamespaceObject, typed_object: Parlour::TypedObject).void }
  def add_comments(item, typed_object); end

  # Given a YARD NamespaceObject, add lines defining constants.
  #
  # @param item [YARD::CodeObjects::NamespaceObject]
  # @return [void]
  #
  # source://sord//lib/sord/generator.rb#128
  # sord warn - YARD::CodeObjects::NamespaceObject wasn't able to be resolved to a constant in this project
  # _@param_ `item`
  sig { params(item: YARD::CodeObjects::NamespaceObject).void }
  def add_constants(item); end

  # Given a YARD NamespaceObject, add lines defining its methods and their
  # signatures to the current file.
  #
  # @param item [YARD::CodeObjects::NamespaceObject]
  # @return [void]
  #
  # source://sord//lib/sord/generator.rb#300
  # sord warn - YARD::CodeObjects::NamespaceObject wasn't able to be resolved to a constant in this project
  # Given a YARD NamespaceObject, add lines defining its methods and their
  # _@param_ `item`
  sig { params(item: YARD::CodeObjects::NamespaceObject).void }
  def add_methods(item); end

  # Given a YARD CodeObject, add lines defining its mixins (that is, extends
  # and includes) to the current file. Returns the number of mixins.
  #
  # @param item [YARD::CodeObjects::Base]
  # @return [Integer]
  #
  # source://sord//lib/sord/generator.rb#105
  # sord warn - YARD::CodeObjects::Base wasn't able to be resolved to a constant in this project
  # Given a YARD CodeObject, add lines defining its mixins (that is, extends
  # _@param_ `item`
  sig { params(item: YARD::CodeObjects::Base).returns(Integer) }
  def add_mixins(item); end

  # Given a YARD NamespaceObject, add lines defining its mixins, methods
  # and children to the file.
  #
  # @param item [YARD::CodeObjects::NamespaceObject]
  # @return [void]
  #
  # source://sord//lib/sord/generator.rb#600
  # sord warn - YARD::CodeObjects::NamespaceObject wasn't able to be resolved to a constant in this project
  # Given a YARD NamespaceObject, add lines defining its mixins, methods
  # _@param_ `item`
  sig { params(item: YARD::CodeObjects::NamespaceObject).void }
  def add_namespace(item); end

  # Increment the method counter.
  #
  # @return [void]
  #
  # source://sord//lib/sord/generator.rb#97
  sig { void }
  def count_method; end

  # Increment the namespace counter.
  #
  # @return [void]
  #
  # source://sord//lib/sord/generator.rb#91
  sig { void }
  def count_namespace; end

  # Removes the last character of a default parameter value if it begins with
  # '-', working around a bug in YARD. (See lsegal/yard #894)
  #
  # @param default [String]
  # @return [String, nil]
  #
  # source://sord//lib/sord/generator.rb#728
  # Removes the last character of a default parameter value if it begins with
  # _@param_ `default`
  sig { params(default: String).returns(T.nilable(String)) }
  def fix_default_if_unary_minus(default); end

  # Populates the generator with the contents of the YARD registry, then
  # uses the loaded Parlour::Generator to generate the file. You must
  # load the YARD registry first!
  #
  # @return [void]
  #
  # source://sord//lib/sord/generator.rb#638
  # Populates the generator with the contents of the YARD registry, then
  # uses the loaded Parlour::Generator to generate the file. You must
  sig { void }
  def generate; end

  # @param method [YARD::CodeObjects::MethodObject]
  # @param tag_name [String]
  # @return [YARD::Tags::Tag, nil]
  #
  # source://sord//lib/sord/generator.rb#289
  # sord warn - YARD::CodeObjects::MethodObject wasn't able to be resolved to a constant in this project
  # sord warn - YARD::Tags::Tag wasn't able to be resolved to a constant in this project
  # _@param_ `method`
  # _@param_ `tag_name`
  sig { params(method: YARD::CodeObjects::MethodObject, tag_name: String).returns(T.nilable(YARD::Tags::Tag)) }
  def method_tag(method, tag_name); end

  # @param method [YARD::CodeObjects::MethodObject]
  # @param tag_name [String]
  # @return [Array<YARD::Tags::Tag>]
  #
  # source://sord//lib/sord/generator.rb#279
  # sord warn - YARD::CodeObjects::MethodObject wasn't able to be resolved to a constant in this project
  # sord warn - YARD::Tags::Tag wasn't able to be resolved to a constant in this project
  # _@param_ `method`
  # _@param_ `tag_name`
  sig { params(method: YARD::CodeObjects::MethodObject, tag_name: String).returns(T::Array[YARD::Tags::Tag]) }
  def method_tags(method, tag_name); end

  # @return [Integer] The number of objects this generator has processed so
  #   far.
  #
  # source://sord//lib/sord/generator.rb#17
  # _@return_ — The number of objects this generator has processed so
  # far.
  sig { returns(Integer) }
  def object_count; end

  # Populates the generator with the contents of the YARD registry. You
  # must load the YARD registry first!
  #
  # @return [void]
  #
  # source://sord//lib/sord/generator.rb#627
  # Populates the generator with the contents of the YARD registry. You
  sig { void }
  def populate; end

  # Loads the YARD registry, populates the file, and prints any relevant
  # final logs.
  #
  # @return [void]
  #
  # source://sord//lib/sord/generator.rb#646
  # Loads the YARD registry, populates the file, and prints any relevant
  sig { void }
  def run; end

  # Given two pairs of arrays representing method parameters, in the form
  # of ["variable_name", "default_value"], sort the parameters so they're
  # valid for Sorbet. Sorbet requires that, e.g. required kwargs go before
  # optional kwargs.
  #
  # @param pair1 [Array]
  # @param pair2 [Array]
  # @return Integer
  #
  # source://sord//lib/sord/generator.rb#691
  # Given two pairs of arrays representing method parameters, in the form
  # of ["variable_name", "default_value"], sort the parameters so they're
  # valid for Sorbet. Sorbet requires that, e.g. required kwargs go before
  # _@param_ `pair1`
  # _@param_ `pair2`
  # _@return_ — Integer
  sig { params(pair1: T::Array[T.untyped], pair2: T::Array[T.untyped]).returns(T.untyped) }
  def sort_params(pair1, pair2); end

  # @return [Array<Array(String, YARD::CodeObjects::Base, Integer)>] The
  #   errors encountered by by the generator. Each element is of the form
  #   [message, item, line].
  #
  # source://sord//lib/sord/generator.rb#24
  def warnings; end
end

# source://sord//lib/sord/generator.rb#13
Sord::Generator::VALID_MODES = T.let(T.unsafe(nil), Array)

# Handles writing logs to stdout and any other classes which request them.
#
# source://sord//lib/sord/logging.rb#6
module Sord::Logging
  class << self
    # Adds a hook to the logger.
    #
    # @return [void]
    # @yieldparam kind [Symbol] The kind of log message this is.
    # @yieldparam msg [String] The log message to write.
    # @yieldparam item [YARD::CodeObjects::Base] The CodeObject which this log
    #   is associated with, if any. This is shown before the log message if it is
    #   specified.
    # @yieldreturn [void]
    #
    # source://sord//lib/sord/logging.rb#187
    # sord warn - YARD::CodeObjects::Base wasn't able to be resolved to a constant in this project
    sig { params(blk: T.proc.params(kind: Symbol, msg: String, item: YARD::CodeObjects::Base).void).void }
    def add_hook(&blk); end

    # Print a done message. This should be used when a process completes
    # successfully.
    #
    # @param msg [String] The log message to write.
    # @param item [YARD::CodeObjects::Base] The CodeObject which this log
    #   is associated with, if any. This is shown before the log message if it is
    #   specified.
    # @return [void]
    #
    # source://sord//lib/sord/logging.rb#162
    # sord warn - YARD::CodeObjects::Base wasn't able to be resolved to a constant in this project
    # sord omit - no YARD type given for "**opts", using untyped
    # Print a done message. This should be used when a process completes
    # _@param_ `msg` — The log message to write.
    # _@param_ `item` — The CodeObject which this log  is associated with, if any. This is shown before the log message if it is specified.
    sig { params(msg: String, item: T.nilable(YARD::CodeObjects::Base), opts: T.untyped).void }
    def done(msg, item = T.unsafe(nil), **opts); end

    # Print a duck-typing message. This should be used when the YARD
    # documentation contains duck typing, which isn't supported by Sorbet, so
    # it is substituted for something different.
    #
    # @param msg [String] The log message to write.
    # @param item [YARD::CodeObjects::Base] The CodeObject which this log
    #   is associated with, if any. This is shown before the log message if it is
    #   specified.
    # @return [void]
    #
    # source://sord//lib/sord/logging.rb#116
    # sord warn - YARD::CodeObjects::Base wasn't able to be resolved to a constant in this project
    # sord omit - no YARD type given for "**opts", using untyped
    # Print a duck-typing message. This should be used when the YARD
    # documentation contains duck typing, which isn't supported by Sorbet, so
    # _@param_ `msg` — The log message to write.
    # _@param_ `item` — The CodeObject which this log  is associated with, if any. This is shown before the log message if it is specified.
    sig { params(msg: String, item: T.nilable(YARD::CodeObjects::Base), opts: T.untyped).void }
    def duck(msg, item = T.unsafe(nil), **opts); end

    # Gets the array of log messages types which should be processed. Any not on
    # this list will be discarded.
    #
    # @return [Array<Symbol>]
    # @return [void]
    #
    # source://sord//lib/sord/logging.rb#50
    # Gets the array of log messages types which should be processed. Any not on
    sig { returns(T::Array[Symbol]) }
    def enabled_types; end

    # Sets the array of log messages types which should be processed. Any not on
    # this list will be discarded. This should be a subset of AVAILABLE_TYPES.
    #
    # @param value [Array<Symbol>]
    # @return [void]
    #
    # source://sord//lib/sord/logging.rb#41
    # Sets the array of log messages types which should be processed. Any not on
    # _@param_ `value`
    sig { params(value: T::Array[Symbol]).void }
    def enabled_types=(value); end

    # Print an error message. This should be used for things which require the
    # current process to stop.
    #
    # @param msg [String] The log message to write.
    # @param item [YARD::CodeObjects::Base] The CodeObject which this log
    #   is associated with, if any. This is shown before the log message if it is
    #   specified.
    # @return [void]
    #
    # source://sord//lib/sord/logging.rb#127
    # sord warn - YARD::CodeObjects::Base wasn't able to be resolved to a constant in this project
    # sord omit - no YARD type given for "**opts", using untyped
    # Print an error message. This should be used for things which require the
    # _@param_ `msg` — The log message to write.
    # _@param_ `item` — The CodeObject which this log  is associated with, if any. This is shown before the log message if it is specified.
    sig { params(msg: String, item: T.nilable(YARD::CodeObjects::Base), opts: T.untyped).void }
    def error(msg, item = T.unsafe(nil), **opts); end

    # A generic log message writer which is called by all other specific logging
    # methods. This shouldn't be called outside of the Logging class itself.
    #
    # @param kind [Symbol] The kind of log message this is.
    # @param header [String] The prefix for this log message. For consistency,
    #   it should be up to five uppercase characters wrapped in square brackets,
    #   with some unique colour applied.
    # @param msg [String] The log message to write.
    # @param item [YARD::CodeObjects::Base] The CodeObject which this log
    #   is associated with, if any. This is shown before the log message if it is
    #   specified.
    # @return [void]
    #
    # source://sord//lib/sord/logging.rb#73
    # sord warn - YARD::CodeObjects::Base wasn't able to be resolved to a constant in this project
    # sord omit - no YARD type given for "**opts", using untyped
    # A generic log message writer which is called by all other specific logging
    # _@param_ `kind` — The kind of log message this is.
    # _@param_ `header` — The prefix for this log message. For consistency, it should be up to five uppercase characters wrapped in square brackets, with some unique colour applied.
    # _@param_ `msg` — The log message to write.
    # _@param_ `item` — The CodeObject which this log  is associated with, if any. This is shown before the log message if it is specified.
    sig { params(kind: Symbol, header: String, msg: String, item: YARD::CodeObjects::Base, opts: T.untyped).void }
    def generic(kind, header, msg, item, **opts); end

    # @return [Array<Proc>] The hooks registered on the logger.
    #
    # source://sord//lib/sord/logging.rb#12
    # _@return_ — The hooks registered on the logger.
    sig { returns(T::Array[Proc]) }
    def hooks; end

    # Print an infer message. This should be used when the user should be told
    # that some information has been filled in or guessed for them, and that
    # information is likely correct.
    #
    # @param msg [String] The log message to write.
    # @param item [YARD::CodeObjects::Base] The CodeObject which this log
    #   is associated with, if any. This is shown before the log message if it is
    #   specified.
    # @return [void]
    #
    # source://sord//lib/sord/logging.rb#139
    # sord warn - YARD::CodeObjects::Base wasn't able to be resolved to a constant in this project
    # sord omit - no YARD type given for "**opts", using untyped
    # Print an infer message. This should be used when the user should be told
    # that some information has been filled in or guessed for them, and that
    # _@param_ `msg` — The log message to write.
    # _@param_ `item` — The CodeObject which this log  is associated with, if any. This is shown before the log message if it is specified.
    sig { params(msg: String, item: T.nilable(YARD::CodeObjects::Base), opts: T.untyped).void }
    def infer(msg, item = T.unsafe(nil), **opts); end

    # Print an info message. This should be used for generic informational
    # messages which the user doesn't need to act on.
    #
    # @param msg [String] The log message to write.
    # @param item [YARD::CodeObjects::Base] The CodeObject which this log
    #   is associated with, if any. This is shown before the log message if it is
    #   specified.
    # @return [void]
    #
    # source://sord//lib/sord/logging.rb#104
    # sord warn - YARD::CodeObjects::Base wasn't able to be resolved to a constant in this project
    # sord omit - no YARD type given for "**opts", using untyped
    # Print an info message. This should be used for generic informational
    # _@param_ `msg` — The log message to write.
    # _@param_ `item` — The CodeObject which this log  is associated with, if any. This is shown before the log message if it is specified.
    sig { params(msg: String, item: T.nilable(YARD::CodeObjects::Base), opts: T.untyped).void }
    def info(msg, item = T.unsafe(nil), **opts); end

    # Invokes all registered hooks on the logger.
    #
    # @param kind [Symbol] The kind of log message this is.
    # @param msg [String] The log message to write.
    # @param item [YARD::CodeObjects::Base] The CodeObject which this log
    #   is associated with, if any. This is shown before the log message if it is
    #   specified.
    # @return [void]
    #
    # source://sord//lib/sord/logging.rb#173
    # sord warn - YARD::CodeObjects::Base wasn't able to be resolved to a constant in this project
    # sord omit - no YARD type given for "**opts", using untyped
    # _@param_ `kind` — The kind of log message this is.
    # _@param_ `msg` — The log message to write.
    # _@param_ `item` — The CodeObject which this log  is associated with, if any. This is shown before the log message if it is specified.
    sig { params(kind: Symbol, msg: String, item: YARD::CodeObjects::Base, opts: T.untyped).void }
    def invoke_hooks(kind, msg, item, **opts); end

    # Print an omit message. This should be used as a special type of warning
    # to alert the user that there is some information missing, but this
    # information is not critical to the completion of the process.
    #
    # @param msg [String] The log message to write.
    # @param item [YARD::CodeObjects::Base] The CodeObject which this log
    #   is associated with, if any. This is shown before the log message if it is
    #   specified.
    # @return [void]
    #
    # source://sord//lib/sord/logging.rb#151
    # sord warn - YARD::CodeObjects::Base wasn't able to be resolved to a constant in this project
    # sord omit - no YARD type given for "**opts", using untyped
    # Print an omit message. This should be used as a special type of warning
    # to alert the user that there is some information missing, but this
    # _@param_ `msg` — The log message to write.
    # _@param_ `item` — The CodeObject which this log  is associated with, if any. This is shown before the log message if it is specified.
    sig { params(msg: String, item: T.nilable(YARD::CodeObjects::Base), opts: T.untyped).void }
    def omit(msg, item = T.unsafe(nil), **opts); end

    # Sets whether log messages should be printed or not.
    #
    # @param value [Boolean]
    # @return [void]
    #
    # source://sord//lib/sord/logging.rb#28
    # _@param_ `value`
    sig { params(value: T::Boolean).void }
    def silent=(value); end

    # @return [Boolean] Whether log messages should be printed or not. This is
    #   used for testing.
    #
    # source://sord//lib/sord/logging.rb#21
    # _@return_ — Whether log messages should be printed or not. This is
    # used for testing.
    sig { returns(T::Boolean) }
    def silent?; end

    # Returns a boolean indicating whether a given array is a valid value for
    # #enabled_types.
    #
    # @param value [Array<Symbol>]
    # @return [void]
    #
    # source://sord//lib/sord/logging.rb#58
    # Returns a boolean indicating whether a given array is a valid value for
    # _@param_ `value`
    sig { params(value: T::Array[Symbol]).void }
    def valid_types?(value); end

    # Print a warning message. This should be used for things which require the
    # user's attention but do not prevent the process from stopping.
    #
    # @param msg [String] The log message to write.
    # @param item [YARD::CodeObjects::Base] The CodeObject which this log
    #   is associated with, if any. This is shown before the log message if it is
    #   specified.
    # @return [void]
    #
    # source://sord//lib/sord/logging.rb#93
    # sord warn - YARD::CodeObjects::Base wasn't able to be resolved to a constant in this project
    # sord omit - no YARD type given for "**opts", using untyped
    # Print a warning message. This should be used for things which require the
    # _@param_ `msg` — The log message to write.
    # _@param_ `item` — The CodeObject which this log  is associated with, if any. This is shown before the log message if it is specified.
    sig { params(msg: String, item: T.nilable(YARD::CodeObjects::Base), opts: T.untyped).void }
    def warn(msg, item = T.unsafe(nil), **opts); end
  end
end

# An array of all available logging types.
#
# source://sord//lib/sord/logging.rb#33
Sord::Logging::AVAILABLE_TYPES = T.let(T.unsafe(nil), Array)

# source://sord//lib/sord/parlour_plugin.rb#6
class Sord::ParlourPlugin < ::Parlour::Plugin
  # @return [ParlourPlugin] a new instance of ParlourPlugin
  #
  # source://sord//lib/sord/parlour_plugin.rb#10
  # sord omit - no YARD type given for "options", using untyped
  sig { params(options: T.untyped).void }
  def initialize(options); end

  # source://sord//lib/sord/parlour_plugin.rb#82
  # sord omit - no YARD return type given, using untyped
  sig { returns(T.untyped) }
  def add_custom_tags; end

  # source://sord//lib/sord/parlour_plugin.rb#20
  # sord omit - no YARD type given for "root", using untyped
  # sord omit - no YARD return type given, using untyped
  sig { params(root: T.untyped).returns(T.untyped) }
  def generate(root); end

  # Returns the value of attribute options.
  #
  # source://sord//lib/sord/parlour_plugin.rb#7
  def options; end

  # Returns the value of attribute parlour.
  #
  # source://sord//lib/sord/parlour_plugin.rb#8
  def parlour; end

  # Sets the attribute parlour
  #
  # @param value the value to set the attribute parlour to.
  #
  # source://sord//lib/sord/parlour_plugin.rb#8
  def parlour=(_arg0); end

  class << self
    # source://sord//lib/sord/parlour_plugin.rb#92
    # sord omit - no YARD return type given, using untyped
    sig { params(block: T.untyped).returns(T.untyped) }
    def with_clean_env(&block); end
  end
end

# source://sord//lib/sord/resolver.rb#7
module Sord::Resolver
  class << self
    # source://sord//lib/sord/resolver.rb#69
    # sord omit - no YARD type given for "nodes", using untyped
    # sord omit - no YARD type given for "names_to_paths", using untyped
    # sord omit - no YARD type given for "path", using untyped
    # sord omit - no YARD return type given, using untyped
    sig { params(nodes: T.untyped, names_to_paths: T.untyped, path: T.untyped).returns(T.untyped) }
    def add_rbi_objects_to_paths(nodes, names_to_paths, path = T.unsafe(nil)); end

    # source://sord//lib/sord/resolver.rb#44
    def add_rbs_objects_to_paths(env, names_to_paths, path = T.unsafe(nil)); end

    # @return [Array<String>]
    #
    # source://sord//lib/sord/resolver.rb#108
    sig { returns(T::Array[String]) }
    def builtin_classes; end

    # @return [void]
    #
    # source://sord//lib/sord/resolver.rb#85
    sig { void }
    def clear; end

    # source://sord//lib/sord/resolver.rb#24
    # sord omit - no YARD type given for "hash", using untyped
    # sord omit - no YARD return type given, using untyped
    sig { params(hash: T.untyped).returns(T.untyped) }
    def load_gem_objects(hash); end

    # @param name [String]
    # @return [String, nil]
    #
    # source://sord//lib/sord/resolver.rb#103
    # _@param_ `name`
    sig { params(name: String).returns(T.nilable(String)) }
    def path_for(name); end

    # @param name [String]
    # @return [Array<String>]
    #
    # source://sord//lib/sord/resolver.rb#91
    # _@param_ `name`
    sig { params(name: String).returns(T::Array[String]) }
    def paths_for(name); end

    # @return [void]
    #
    # source://sord//lib/sord/resolver.rb#9
    sig { void }
    def prepare; end

    # @param name [String]
    # @param item [Object]
    # @return [Boolean]
    #
    # source://sord//lib/sord/resolver.rb#127
    # _@param_ `name`
    # _@param_ `item`
    sig { params(name: String, item: Object).returns(T::Boolean) }
    def resolvable?(name, item); end
  end
end

# Contains methods to convert YARD types to Parlour types.
#
# source://sord//lib/sord/type_converter.rb#9
module Sord::TypeConverter
  class << self
    # Given a YARD duck type string, attempts to convert it to one of a list of pre-defined RBS
    # built-in interfaces.
    #
    # For example, the common duck type `#to_s` has a built-in RBS equivalent `_ToS`.
    #
    # If no such interface exists, returns `nil`.
    #
    # @param type [String]
    # @return [Parlour::Types::Type, nil]
    #
    # source://sord//lib/sord/type_converter.rb#306
    # Given a YARD duck type string, attempts to convert it to one of a list of pre-defined RBS
    # built-in interfaces.
    # For example, the common duck type `#to_s` has a built-in RBS equivalent `_ToS`.
    # _@param_ `type`
    sig { params(type: String).returns(T.nilable(Parlour::Types::Type)) }
    def duck_type_to_rbs_type(type); end

    # Handles SORD_ERRORs.
    #
    # @param name [String, Parlour::Types::Type]
    # @param log_warning [String]
    # @param item [YARD::CodeObjects::Base]
    # @param replace_errors_with_untyped [Boolean]
    # @return [Parlour::Types::Type]
    #
    # source://sord//lib/sord/type_converter.rb#262
    # sord warn - YARD::CodeObjects::Base wasn't able to be resolved to a constant in this project
    # _@param_ `name`
    # _@param_ `log_warning`
    # _@param_ `item`
    # _@param_ `replace_errors_with_untyped`
    sig do
      params(
        name: T.any(String, Parlour::Types::Type),
        log_warning: String,
        item: YARD::CodeObjects::Base,
        replace_errors_with_untyped: T::Boolean
      ).returns(Parlour::Types::Type)
    end
    def handle_sord_error(name, log_warning, item, replace_errors_with_untyped); end

    # Given a string of YARD type parameters (without angle brackets), splits
    # the string into an array of each type parameter.
    #
    # @param params [String] The type parameters.
    # @return [Array<String>] The split type parameters.
    #
    # source://sord//lib/sord/type_converter.rb#53
    # Given a string of YARD type parameters (without angle brackets), splits
    # _@param_ `params` — The type parameters.
    # _@return_ — The split type parameters.
    sig { params(params: String).returns(T::Array[String]) }
    def split_type_parameters(params); end

    # Converts a YARD type into a Parlour type.
    #
    # @param yard [Boolean, Array, String] The YARD type.
    # @param item [YARD::CodeObjects::Base] The CodeObject which the YARD type
    #   is associated with. This is used for logging and can be nil, but this
    #   will lead to less informative log messages.
    # @param config [Configuration] The generation configuration.
    # @return [Parlour::Types::Type]
    #
    # source://sord//lib/sord/type_converter.rb#126
    # sord warn - YARD::CodeObjects::Base wasn't able to be resolved to a constant in this project
    # _@param_ `yard` — The YARD type.
    # _@param_ `item` — The CodeObject which the YARD type is associated with. This is used for logging and can be nil, but this will lead to less informative log messages.
    # _@param_ `config` — The generation configuration.
    sig do
      params(
        yard: T.any(T::Boolean, T::Array[T.untyped], String),
        item: YARD::CodeObjects::Base,
        config: Configuration
      ).returns(Parlour::Types::Type)
    end
    def yard_to_parlour(yard, item, config); end
  end
end

# Configuration for how the type converter should work in particular cases.
#
# source://sord//lib/sord/type_converter.rb#99
class Sord::TypeConverter::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://sord//lib/sord/type_converter.rb#100
  # sord omit - no YARD type given for "replace_errors_with_untyped:", using untyped
  # sord omit - no YARD type given for "replace_unresolved_with_untyped:", using untyped
  # sord omit - no YARD type given for "output_language:", using untyped
  sig do
    params(
      replace_errors_with_untyped: T.untyped,
      replace_unresolved_with_untyped: T.untyped,
      output_language: T.untyped
    ).void
  end
  def initialize(replace_errors_with_untyped:, replace_unresolved_with_untyped:, output_language:); end

  # The language which the generated types will be converted to - one of
  # `:rbi` or `:rbs`.
  #
  # source://sord//lib/sord/type_converter.rb#108
  def output_language; end

  # The language which the generated types will be converted to - one of
  # `:rbi` or `:rbs`.
  #
  # source://sord//lib/sord/type_converter.rb#108
  def output_language=(_arg0); end

  # @return [Boolean] If true, T.untyped is used instead of SORD_ERROR_
  #   constants for unknown types.
  #
  # source://sord//lib/sord/type_converter.rb#112
  def replace_errors_with_untyped; end

  # @return [Boolean] If true, T.untyped is used instead of SORD_ERROR_
  #   constants for unknown types.
  #
  # source://sord//lib/sord/type_converter.rb#112
  def replace_errors_with_untyped=(_arg0); end

  # @param replace_unresolved_with_untyped [Boolean] If true, T.untyped is
  #   used when Sord is unable to resolve a constant.
  #
  # source://sord//lib/sord/type_converter.rb#116
  def replace_unresolved_with_untyped; end

  # @param replace_unresolved_with_untyped [Boolean] If true, T.untyped is
  #   used when Sord is unable to resolve a constant.
  #
  # source://sord//lib/sord/type_converter.rb#116
  def replace_unresolved_with_untyped=(_arg0); end
end

# Taken from: https://github.com/ruby/rbs/blob/master/core/builtin.rbs
# When the latest commit was: 6c847d1
#
# Interfaces which use generic arguments have those arguments as `untyped`, since I'm not aware
# of any standard way that these are specified.
#
# source://sord//lib/sord/type_converter.rb#275
Sord::TypeConverter::DUCK_TYPES_TO_RBS_TYPE_NAMES = T.let(T.unsafe(nil), Hash)

# Match duck types which require the object implement one or more methods,
# like '#foo', '#foo & #bar', '#foo&#bar&#baz', and '#foo&#bar&#baz&#foo_bar'.
#
# source://sord//lib/sord/type_converter.rb#31
Sord::TypeConverter::DUCK_TYPE_REGEX = T.let(T.unsafe(nil), Regexp)

# A regular expression which matches a Ruby namespace immediately followed
# by another Ruby namespace in angle brackets or curly braces.
# This is the format usually used in YARD to model generic
# types, such as "Array<String>", "Hash<String, Symbol>",
# "Hash{String => Symbol}", etc.
#
# source://sord//lib/sord/type_converter.rb#21
Sord::TypeConverter::GENERIC_TYPE_REGEX = T.let(T.unsafe(nil), Regexp)

# Matches valid method names.
# From: https://stackoverflow.com/a/4379197/2626000
#
# source://sord//lib/sord/type_converter.rb#26
Sord::TypeConverter::METHOD_NAME_REGEX = T.let(T.unsafe(nil), Regexp)

# A regular expression which matches ordered lists in the format of
# either "Array(String, Symbol)" or "(String, Symbol)".
#
# source://sord//lib/sord/type_converter.rb#36
Sord::TypeConverter::ORDERED_LIST_REGEX = T.let(T.unsafe(nil), Regexp)

# A regular expression which matches the shorthand Array syntax,
# "<String>".
#
# source://sord//lib/sord/type_converter.rb#44
Sord::TypeConverter::SHORTHAND_ARRAY_SYNTAX = T.let(T.unsafe(nil), Regexp)

# A regular expression which matches the shorthand Hash syntax,
# "{String => Symbol}".
#
# source://sord//lib/sord/type_converter.rb#40
Sord::TypeConverter::SHORTHAND_HASH_SYNTAX = T.let(T.unsafe(nil), Regexp)

# A regular expression which matches Ruby namespaces and identifiers.
# "Foo", "Foo::Bar", and "::Foo::Bar" are all matches, whereas "Foo.Bar"
# or "Foo#bar" are not.
#
# source://sord//lib/sord/type_converter.rb#13
Sord::TypeConverter::SIMPLE_TYPE_REGEX = T.let(T.unsafe(nil), Regexp)

# Built in parlour single arg generics
#
# source://sord//lib/sord/type_converter.rb#47
Sord::TypeConverter::SINGLE_ARG_GENERIC_TYPES = T.let(T.unsafe(nil), Array)

# source://sord//lib/sord/version.rb#3
Sord::VERSION = T.let(T.unsafe(nil), String)
