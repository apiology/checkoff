# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `fasterer` gem.
# Please instead update this file by running `bin/tapioca gem fasterer`.


# source://fasterer//lib/fasterer/version.rb#1
module Fasterer; end

# source://fasterer//lib/fasterer/analyzer.rb#11
class Fasterer::Analyzer
  # @return [Analyzer] a new instance of Analyzer
  #
  # source://fasterer//lib/fasterer/analyzer.rb#15
  def initialize(file_path); end

  # source://fasterer//lib/fasterer/analyzer.rb#25
  def errors; end

  # Returns the value of attribute file_path.
  #
  # source://fasterer//lib/fasterer/analyzer.rb#12
  def file_path; end

  # Returns the value of attribute file_path.
  #
  # source://fasterer//lib/fasterer/analyzer.rb#12
  def path; end

  # source://fasterer//lib/fasterer/analyzer.rb#20
  def scan; end

  private

  # source://fasterer//lib/fasterer/analyzer.rb#49
  def scan_by_token(token, element); end

  # source://fasterer//lib/fasterer/analyzer.rb#78
  def scan_for_loop(element); end

  # source://fasterer//lib/fasterer/analyzer.rb#70
  def scan_method_calls(element); end

  # source://fasterer//lib/fasterer/analyzer.rb#62
  def scan_method_definitions(element); end

  # source://fasterer//lib/fasterer/analyzer.rb#82
  def scan_rescue(element); end

  # source://fasterer//lib/fasterer/analyzer.rb#31
  def traverse_sexp_tree(sexp_tree); end
end

# source://fasterer//lib/fasterer/method_call.rb#108
class Fasterer::Argument
  # @return [Argument] a new instance of Argument
  #
  # source://fasterer//lib/fasterer/method_call.rb#111
  def initialize(element); end

  # Returns the value of attribute element.
  #
  # source://fasterer//lib/fasterer/method_call.rb#109
  def element; end

  # source://fasterer//lib/fasterer/method_call.rb#115
  def type; end

  # source://fasterer//lib/fasterer/method_call.rb#119
  def value; end
end

# source://fasterer//lib/fasterer/method_call.rb#2
class Fasterer::MethodCall
  # @return [MethodCall] a new instance of MethodCall
  #
  # source://fasterer//lib/fasterer/method_call.rb#12
  def initialize(element); end

  # Returns the value of attribute arguments.
  #
  # source://fasterer//lib/fasterer/method_call.rb#6
  def arguments; end

  # source://fasterer//lib/fasterer/method_call.rb#31
  def arguments_element; end

  # Returns the value of attribute block_argument_names.
  #
  # source://fasterer//lib/fasterer/method_call.rb#8
  def block_argument_names; end

  # Returns the value of attribute block_body.
  #
  # source://fasterer//lib/fasterer/method_call.rb#7
  def block_body; end

  # Returns the value of attribute element.
  #
  # source://fasterer//lib/fasterer/method_call.rb#3
  def element; end

  # @return [Boolean]
  #
  # source://fasterer//lib/fasterer/method_call.rb#23
  def has_block?; end

  # @return [Boolean]
  #
  # source://fasterer//lib/fasterer/method_call.rb#35
  def lambda_literal?; end

  # Returns the value of attribute method_name.
  #
  # source://fasterer//lib/fasterer/method_call.rb#5
  def method_name; end

  # Returns the value of attribute method_name.
  #
  # source://fasterer//lib/fasterer/method_call.rb#5
  def name; end

  # Returns the value of attribute receiver.
  #
  # source://fasterer//lib/fasterer/method_call.rb#4
  def receiver; end

  # source://fasterer//lib/fasterer/method_call.rb#27
  def receiver_element; end

  private

  # Returns the value of attribute call_element.
  #
  # source://fasterer//lib/fasterer/method_call.rb#41
  def call_element; end

  # source://fasterer//lib/fasterer/method_call.rb#60
  def set_arguments; end

  # TODO: write specs for lambdas and procs
  #
  # source://fasterer//lib/fasterer/method_call.rb#75
  def set_block_argument_names; end

  # source://fasterer//lib/fasterer/method_call.rb#70
  def set_block_body; end

  # source://fasterer//lib/fasterer/method_call.rb#64
  def set_block_presence; end

  # TODO: explanation
  #
  # source://fasterer//lib/fasterer/method_call.rb#43
  def set_call_element; end

  # source://fasterer//lib/fasterer/method_call.rb#56
  def set_method_name; end

  # source://fasterer//lib/fasterer/method_call.rb#52
  def set_receiver; end
end

# source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#6
class Fasterer::MethodCallScanner
  include ::Fasterer::Offensive

  # @return [MethodCallScanner] a new instance of MethodCallScanner
  #
  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#11
  def initialize(element); end

  # Returns the value of attribute element.
  #
  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#9
  def element; end

  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#16
  def method_call; end

  private

  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#95
  def check_each_offense; end

  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#77
  def check_each_with_index_offense; end

  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#119
  def check_fetch_offense; end

  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#81
  def check_first_offense; end

  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#108
  def check_flatten_offense; end

  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#58
  def check_gsub_offense; end

  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#155
  def check_last_offense; end

  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#144
  def check_merge_bang_offense; end

  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#51
  def check_module_eval_offense; end

  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#22
  def check_offense; end

  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#164
  def check_range_include_offense; end

  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#71
  def check_sort_offense; end

  # Need to refactor, fukken complicated conditions.
  #
  # source://fasterer//lib/fasterer/scanners/method_call_scanner.rb#126
  def check_symbol_to_proc; end
end

# source://fasterer//lib/fasterer/method_definition.rb#2
class Fasterer::MethodDefinition
  # @return [MethodDefinition] a new instance of MethodDefinition
  #
  # source://fasterer//lib/fasterer/method_definition.rb#11
  def initialize(element); end

  # Returns the value of attribute arguments.
  #
  # source://fasterer//lib/fasterer/method_definition.rb#7
  def arguments; end

  # Returns the value of attribute block_argument_name.
  #
  # source://fasterer//lib/fasterer/method_definition.rb#5
  def block_argument_name; end

  # Returns the value of attribute body.
  #
  # source://fasterer//lib/fasterer/method_definition.rb#6
  def body; end

  # for testing purposes
  #
  # source://fasterer//lib/fasterer/method_definition.rb#3
  def element; end

  # @return [Boolean]
  #
  # source://fasterer//lib/fasterer/method_definition.rb#19
  def has_block?; end

  # Returns the value of attribute method_name.
  #
  # source://fasterer//lib/fasterer/method_definition.rb#4
  def method_name; end

  # Returns the value of attribute method_name.
  #
  # source://fasterer//lib/fasterer/method_definition.rb#4
  def name; end

  # @return [Boolean]
  #
  # source://fasterer//lib/fasterer/method_definition.rb#23
  def setter?; end

  private

  # source://fasterer//lib/fasterer/method_definition.rb#29
  def arguments_element; end

  # source://fasterer//lib/fasterer/method_definition.rb#53
  def last_argument_element; end

  # source://fasterer//lib/fasterer/method_definition.rb#37
  def set_arguments; end

  # source://fasterer//lib/fasterer/method_definition.rb#47
  def set_block_argument_name; end

  # source://fasterer//lib/fasterer/method_definition.rb#43
  def set_body; end

  # source://fasterer//lib/fasterer/method_definition.rb#33
  def set_method_name; end
end

# source://fasterer//lib/fasterer/method_definition.rb#58
class Fasterer::MethodDefinitionArgument
  # @return [MethodDefinitionArgument] a new instance of MethodDefinitionArgument
  #
  # source://fasterer//lib/fasterer/method_definition.rb#61
  def initialize(element); end

  # @return [Boolean]
  #
  # source://fasterer//lib/fasterer/method_definition.rb#71
  def default_argument?; end

  # Returns the value of attribute element.
  #
  # source://fasterer//lib/fasterer/method_definition.rb#59
  def element; end

  # @return [Boolean]
  #
  # source://fasterer//lib/fasterer/method_definition.rb#75
  def keyword_argument?; end

  # Returns the value of attribute name.
  #
  # source://fasterer//lib/fasterer/method_definition.rb#59
  def name; end

  # @return [Boolean]
  #
  # source://fasterer//lib/fasterer/method_definition.rb#67
  def regular_argument?; end

  # Returns the value of attribute type.
  #
  # source://fasterer//lib/fasterer/method_definition.rb#59
  def type; end

  private

  # source://fasterer//lib/fasterer/method_definition.rb#85
  def set_argument_type; end

  # source://fasterer//lib/fasterer/method_definition.rb#81
  def set_name; end
end

# source://fasterer//lib/fasterer/scanners/method_definition_scanner.rb#7
class Fasterer::MethodDefinitionScanner
  include ::Fasterer::Offensive

  # @return [MethodDefinitionScanner] a new instance of MethodDefinitionScanner
  #
  # source://fasterer//lib/fasterer/scanners/method_definition_scanner.rb#12
  def initialize(element); end

  # Returns the value of attribute element.
  #
  # source://fasterer//lib/fasterer/scanners/method_definition_scanner.rb#10
  def element; end

  private

  # source://fasterer//lib/fasterer/scanners/method_definition_scanner.rb#19
  def check_offense; end

  # source://fasterer//lib/fasterer/scanners/method_definition_scanner.rb#42
  def method_definition; end

  # source://fasterer//lib/fasterer/scanners/method_definition_scanner.rb#27
  def scan_block_call_offense; end

  # source://fasterer//lib/fasterer/scanners/method_definition_scanner.rb#54
  def scan_getter_and_setter_offense; end

  # source://fasterer//lib/fasterer/scanners/method_definition_scanner.rb#73
  def scan_getter_offense; end

  # source://fasterer//lib/fasterer/scanners/method_definition_scanner.rb#58
  def scan_setter_offense; end

  # source://fasterer//lib/fasterer/scanners/method_definition_scanner.rb#46
  def traverse_tree(sexp_tree, &block); end
end

# source://fasterer//lib/fasterer/offense.rb#2
class Fasterer::Offense
  # @return [Offense] a new instance of Offense
  #
  # source://fasterer//lib/fasterer/offense.rb#8
  def initialize(offense_name, line_number); end

  # source://fasterer//lib/fasterer/offense.rb#14
  def explanation; end

  # Returns the value of attribute line_number.
  #
  # source://fasterer//lib/fasterer/offense.rb#3
  def line; end

  # Returns the value of attribute line_number.
  #
  # source://fasterer//lib/fasterer/offense.rb#3
  def line_number; end

  # Returns the value of attribute offense_name.
  #
  # source://fasterer//lib/fasterer/offense.rb#3
  def name; end

  # Returns the value of attribute offense_name.
  #
  # source://fasterer//lib/fasterer/offense.rb#3
  def offense_name; end
end

# source://fasterer//lib/fasterer/offense.rb#18
Fasterer::Offense::EXPLANATIONS = T.let(T.unsafe(nil), Hash)

# source://fasterer//lib/fasterer/offense_collector.rb#4
class Fasterer::OffenseCollector
  extend ::Forwardable

  # @return [OffenseCollector] a new instance of OffenseCollector
  #
  # source://fasterer//lib/fasterer/offense_collector.rb#7
  def initialize; end

  # source://fasterer//lib/fasterer/offense_collector.rb#11
  def [](offense_name); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def any?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def count(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def group_by(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def push(*args, **_arg1, &block); end
end

# source://fasterer//lib/fasterer/scanners/offensive.rb#4
module Fasterer::Offensive
  # Returns the value of attribute offense.
  #
  # source://fasterer//lib/fasterer/scanners/offensive.rb#5
  def offense; end

  # Sets the attribute offense
  #
  # @param value the value to set the attribute offense to.
  #
  # source://fasterer//lib/fasterer/scanners/offensive.rb#5
  def offense=(_arg0); end

  # @return [Boolean]
  #
  # source://fasterer//lib/fasterer/scanners/offensive.rb#7
  def offense_detected?; end

  # @return [Boolean]
  #
  # source://fasterer//lib/fasterer/scanners/offensive.rb#7
  def offensive?; end

  private

  # source://fasterer//lib/fasterer/scanners/offensive.rb#15
  def add_offense(offense_name, element_line_number = T.unsafe(nil)); end

  # source://fasterer//lib/fasterer/scanners/offensive.rb#19
  def check_offense; end
end

# source://fasterer//lib/fasterer/parser.rb#4
class Fasterer::Parser
  class << self
    # source://fasterer//lib/fasterer/parser.rb#7
    def parse(ruby_code); end
  end
end

# source://fasterer//lib/fasterer/parser.rb#5
Fasterer::Parser::PARSER_CLASS = RubyParser

# source://fasterer//lib/fasterer/method_call.rb#124
class Fasterer::Primitive
  # @return [Primitive] a new instance of Primitive
  #
  # source://fasterer//lib/fasterer/method_call.rb#127
  def initialize(element); end

  # @return [Boolean]
  #
  # source://fasterer//lib/fasterer/method_call.rb#139
  def array?; end

  # Returns the value of attribute element.
  #
  # source://fasterer//lib/fasterer/method_call.rb#125
  def element; end

  # @return [Boolean]
  #
  # source://fasterer//lib/fasterer/method_call.rb#135
  def range?; end

  # source://fasterer//lib/fasterer/method_call.rb#131
  def type; end
end

# For now, used for determening if the
# receiver is a reference or a method call.
#
# source://fasterer//lib/fasterer/method_call.rb#84
class Fasterer::ReceiverFactory
  class << self
    # source://fasterer//lib/fasterer/method_call.rb#85
    def new(receiver_info); end
  end
end

# source://fasterer//lib/fasterer/rescue_call.rb#2
class Fasterer::RescueCall
  # @return [RescueCall] a new instance of RescueCall
  #
  # source://fasterer//lib/fasterer/rescue_call.rb#6
  def initialize(element); end

  # Returns the value of attribute element.
  #
  # source://fasterer//lib/fasterer/rescue_call.rb#3
  def element; end

  # Returns the value of attribute rescue_classes.
  #
  # source://fasterer//lib/fasterer/rescue_call.rb#4
  def rescue_classes; end

  private

  # source://fasterer//lib/fasterer/rescue_call.rb#14
  def set_rescue_classes; end
end

# source://fasterer//lib/fasterer/scanners/rescue_call_scanner.rb#6
class Fasterer::RescueCallScanner
  include ::Fasterer::Offensive

  # @return [RescueCallScanner] a new instance of RescueCallScanner
  #
  # source://fasterer//lib/fasterer/scanners/rescue_call_scanner.rb#11
  def initialize(element); end

  # Returns the value of attribute element.
  #
  # source://fasterer//lib/fasterer/scanners/rescue_call_scanner.rb#9
  def element; end

  private

  # source://fasterer//lib/fasterer/scanners/rescue_call_scanner.rb#18
  def check_offense; end

  # source://fasterer//lib/fasterer/scanners/rescue_call_scanner.rb#24
  def rescue_call; end
end

# source://fasterer//lib/fasterer/version.rb#2
Fasterer::VERSION = T.let(T.unsafe(nil), String)

# source://fasterer//lib/fasterer/method_call.rb#99
class Fasterer::VariableReference
  # @return [VariableReference] a new instance of VariableReference
  #
  # source://fasterer//lib/fasterer/method_call.rb#102
  def initialize(reference_info); end

  # Returns the value of attribute name.
  #
  # source://fasterer//lib/fasterer/method_call.rb#100
  def name; end
end
